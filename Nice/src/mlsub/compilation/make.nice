/**************************************************************************/
/*                                N I C E                                 */
/*             A high-level object-oriented research language             */
/*                        (c) Daniel Bonniot 2000                         */
/*                                                                        */
/*  This program is free software; you can redistribute it and/or modify  */
/*  it under the terms of the GNU General Public License as published by  */
/*  the Free Software Foundation; either version 2 of the License, or     */
/*  (at your option) any later version.                                   */
/*                                                                        */
/**************************************************************************/

package mlsub.compilation;

import mlsub.compilation.*;

/**
 * 'Make' tool for mlsub modules.
 * 
 * @author Daniel Bonniot (d.bonniot@mail.dotcom.fr)
 */

void compileComponent(List<Module>, boolean doLink);
compileComponent(modules, doLink)
{
  print("Compiling");
  modules.iter(fun(Module m) => print(" "+m));
  println("");

  modules.iter(fun(Module m) =>
	       m.lastModifiedRequirement(max(javaList(m.getRequirements()).map(fun(Module mi)=>mi.lastModification()))));

  modules.iter(fun(Module m) => m.scope());
  modules.iter(fun(Module m) => m.load());

  if (modules.size() >= 1)
    modules.get(0).freezeGlobalContext();

  modules.iter(fun(Module m) => m.compile());

  if (doLink)
    modules.iter(fun(Module m) => m.link());

  if (modules.size() >= 1)
    modules.get(0).unfreezeGlobalContext();
}

void make(mlsub.compilation.Compilation);
make(compilation@mlsub.compilation.Compilation)
{
  List<List<Module>> sccs =
    stronglyConnectedComponents
      (compilation.root, fun(Module m) => javaList(m.getRequirements()));
  sccs.iter(fun(List<Module> scc) => 
    { compileComponent(scc,
		       !compilation.skipLink); });
  
  if (!compilation.skipLink) 
    compilation.root.endOfLink();
}
