/****************************************************************************
 *                                 N I C E                                  *
 *              A high-level object-oriented research language              *
 *                         (c) Daniel Bonniot 2003                          *
 *                                                                          *
 *  This package is free software; you can redistribute it and/or modify    *
 *  it under the terms of the GNU General Public License as published by    *
 *  Free Software Foundation; either version 2 of the License, or (at your  *
 *  option) any later version.                                              *
 *                                                                          *
 *  As a special exception, the copyright holders of this library give you  *
 *  permission to link this library with independent modules to produce an  *
 *  executable, regardless of the license terms of these independent        *
 *  modules, and to copy and distribute the resulting executable under      *
 *  terms of your choice.                                                   *
 ****************************************************************************/

package nice.lang;

// Operators to manipulate java.math.BigInteger.

import java.math.*;

BigInteger `-`(BigInteger) = native BigInteger BigInteger.negate();

BigInteger `+`(BigInteger, BigInteger) = native BigInteger BigInteger.add(BigInteger);
BigInteger `-`(BigInteger, BigInteger) = native BigInteger BigInteger.subtract(BigInteger);
BigInteger `*`(BigInteger, BigInteger) = native BigInteger BigInteger.multiply(BigInteger);
BigInteger `/`(BigInteger, BigInteger) = native BigInteger BigInteger.divide(BigInteger);
BigInteger `%`(BigInteger, BigInteger) = native BigInteger BigInteger.remainder(BigInteger);

BigInteger `**`(BigInteger, int) = native BigInteger BigInteger.pow(int);

BigInteger `<<`(BigInteger, int) = native BigInteger BigInteger.shiftLeft(int);
BigInteger `>>`(BigInteger, int) = native BigInteger BigInteger.shiftRight(int);

BigInteger `&`(BigInteger, BigInteger) = native BigInteger BigInteger.and(BigInteger);
BigInteger `|`(BigInteger, BigInteger) = native BigInteger BigInteger.or(BigInteger);
//BigInteger `^`(BigInteger, BigInteger) = native BigInteger BigInteger.xor(BigInteger);

BigInteger `~`(BigInteger) = native BigInteger BigInteger.not();

/* 
   Implement the Comparable interface.
   The four comparison operators (<, >, <=, and >=) can be used on BigIntegers.
   Only `<` is implemented here, because the others have generic 
   implementations that use < and boolean negation.
*/
`<`(BigInteger x, BigInteger y) = x.compareTo(y) < 0;
