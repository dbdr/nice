/**************************************************************************/
/*                                N I C E                                 */
/*             A high-level object-oriented research language             */
/*                        (c) Daniel Bonniot 2004                         */
/*                                                                        */
/*  This program is free software; you can redistribute it and/or modify  */
/*  it under the terms of the GNU General Public License as published by  */
/*  the Free Software Foundation; either version 2 of the License, or     */
/*  (at your option) any later version.                                   */
/*                                                                        */
/**************************************************************************/

package bossa.syntax;

import bossa.util.*;

/**
   A field access in a Nice class.
   
   In terms of scoping, this is the symbol
   that is returned when the access to a field is done,
   either a 'get' or a 'set'.

 */
public class NiceFieldAccess extends FieldAccess
{
  final NiceField field;
  
  isFinal() = field.isFinal();

  printInterface(s)
  {
    bossa.util.Internal.error("Should not be part of the module interface");
  }
  
  toString()
  {
    return "" + field.sym.type + " " + 
	field.getTypeDefinition().name + "." + field.getName();
  }
}

NiceFieldAccess createNiceFieldAccess(NiceField field)
{
  let classDef = field.getTypeDefinition();
  let argType = sureMonotype(classDef.lowlevelMonotype());

  let params = createFormalParameters([new Parameter(type: Monotype.create(argType))]);
  let constr = createConstraint(classDef.getBinders(), null);
  let res = new NiceFieldAccess(field.getName(), Node.down,
	parameters: params,
        syntacticConstraint: constr.toString(),
        symbol: cast(null),
        arity: 1,
        field: field);

  res.addChild(params);
  let symbol = createMethodSymbol(res, field.getName(), constr, notNull(field.sym.syntacticType));
  res.symbol = symbol;
  symbol.propagate = Node.global;
  res.addChild(symbol);
  return res;    
}
