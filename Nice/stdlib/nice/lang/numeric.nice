/**************************************************************************/
/*                                N I C E                                 */
/*             A high-level object-oriented research language             */
/*                        (c) Daniel Bonniot 2000                         */
/*                                                                        */
/*  This program is free software; you can redistribute it and/or modify  */
/*  it under the terms of the GNU General Public License as published by  */
/*  the Free Software Foundation; either version 2 of the License, or     */
/*  (at your option) any later version.                                   */
/*                                                                        */
/**************************************************************************/

/**
   Numerical hierarchy.

   Usual operations on native types are inlined, 
   so they have the same efficiency as in Java code.

   @version $Date$
   @author Daniel Bonniot
*/

package nice.lang;

int MAX_INT() = native java.lang.Integer.MAX_VALUE;

// Comparison
boolean `<`(double, double) = inline nice.lang.inline.CompOp("dLt");
boolean `<`(float, float) = inline nice.lang.inline.CompOp("fLt");
boolean `<`(long, long) = inline nice.lang.inline.CompOp("jLt");
boolean `<`(int, int) = inline nice.lang.inline.CompOp("iLt");

boolean `<=`(double, double) = inline nice.lang.inline.CompOp("dLe");
boolean `<=`(float, float) = inline nice.lang.inline.CompOp("fLe");
boolean `<=`(long, long) = inline nice.lang.inline.CompOp("jLe");
boolean `<=`(int, int) = inline nice.lang.inline.CompOp("iLe");

boolean `>`(double, double) = inline nice.lang.inline.CompOp("dGt");
boolean `>`(float, float) = inline nice.lang.inline.CompOp("fGt");
boolean `>`(long, long) = inline nice.lang.inline.CompOp("jGt");
boolean `>`(int, int) = inline nice.lang.inline.CompOp("iGt");

boolean `>=`(double, double) = inline nice.lang.inline.CompOp("dGe");
boolean `>=`(float, float) = inline nice.lang.inline.CompOp("fGe");
boolean `>=`(float, float) = inline nice.lang.inline.CompOp("jGe");
boolean `>=`(int, int) = inline nice.lang.inline.CompOp("iGe");

// Equality
boolean `==`(double, double) = inline nice.lang.inline.CompOp("dEq");
boolean `==`(float, float) = inline nice.lang.inline.CompOp("fEq");
boolean `==`(long, long) = inline nice.lang.inline.CompOp("jEq");
boolean `==`(int, int) = inline nice.lang.inline.CompOp("iEq");

// Inequality
boolean `!=`(double, double) = inline nice.lang.inline.CompOp("dNe");
boolean `!=`(float, float) = inline nice.lang.inline.CompOp("fNe");
boolean `!=`(long, long) = inline nice.lang.inline.CompOp("jNe");
boolean `!=`(int, int) = inline nice.lang.inline.CompOp("iNe");

// Unary +
// Only effect = promotion if type < int
// This conforms to Java. Should we say instead that +(byte) is byte?
double `+`(double) = inline nice.lang.inline.Nop();
float `+`(float) = inline nice.lang.inline.Nop();
long `+`(long) = inline nice.lang.inline.Nop();
int `+`(int) = inline nice.lang.inline.Nop();


// unary negation
double `-`(double) = inline nice.lang.inline.NumOp("dNeg");
float `-`(float) = inline nice.lang.inline.NumOp("fNeg");
long `-`(long) = inline nice.lang.inline.NumOp("jNeg");
int `-`(int) = inline nice.lang.inline.NumOp("iNeg");

// multiplication
double `*`(double, double) = inline nice.lang.inline.NumOp("dMul");
float `*`(float, float) = inline nice.lang.inline.NumOp("fMul");
long `*`(long, long) = inline nice.lang.inline.NumOp("jMul");
int `*`(int, int) = inline nice.lang.inline.NumOp("iMul");

// division
double `/`(double, double) = inline nice.lang.inline.NumOp("dDiv");
float `/`(float, float) = inline nice.lang.inline.NumOp("fDiv");
long `/`(long, long) = inline nice.lang.inline.NumOp("jDiv");
int `/`(int, int) = inline nice.lang.inline.NumOp("iDiv");

// remainder
double `%`(double, double) = inline nice.lang.inline.NumOp("dRem");
float `%`(float, float) = inline nice.lang.inline.NumOp("fRem");
long `%`(long, long) = inline nice.lang.inline.NumOp("jRem");
int `%`(int, int) = inline nice.lang.inline.NumOp("iRem");

// addition
double `+`(double, double) = inline nice.lang.inline.NumOp("dAdd");
float `+`(float, float) = inline nice.lang.inline.NumOp("fAdd");
long `+`(long, long) = inline nice.lang.inline.NumOp("jAdd");
int `+`(int, int) = inline nice.lang.inline.NumOp("iAdd");

// substraction
double `-`(double, double) = inline nice.lang.inline.NumOp("dSub");
float `-`(float, float) = inline nice.lang.inline.NumOp("fSub");
long `-`(long, long) = inline nice.lang.inline.NumOp("jSub");
int `-`(int, int) = inline nice.lang.inline.NumOp("iSub");

// shift
int  `<<`(int , long) = inline nice.lang.inline.NumOp("iShl");
long `<<`(long, long) = inline nice.lang.inline.NumOp("jShl");

int  `>>`(int , long) = inline nice.lang.inline.NumOp("iShr");
long `>>`(long, long) = inline nice.lang.inline.NumOp("jShr");

int  `>>>`(int , long) = inline nice.lang.inline.NumOp("iuShr");
long `>>>`(long, long) = inline nice.lang.inline.NumOp("juShr");

// bitwise operators
int `&`(int, int) = inline nice.lang.inline.NumOp("iAnd");
int `|`(int, int) = inline nice.lang.inline.NumOp("iIOr");
int `^`(int, int) = inline nice.lang.inline.NumOp("iXOr");

long `&`(long, long) = inline nice.lang.inline.NumOp("jAnd");
long `|`(long, long) = inline nice.lang.inline.NumOp("jIOr");
long `^`(long, long) = inline nice.lang.inline.NumOp("jXOr");

// Comparable interface
`<`(n1@Number, n2@Number) = n1.doubleValue() < n2.doubleValue();
