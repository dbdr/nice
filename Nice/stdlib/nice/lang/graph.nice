/****************************************************************************
 *                                 N I C E                                  *
 *              A high-level object-oriented research language              *
 *                         (c) Daniel Bonniot 2003                          *
 *                                                                          *
 *  This package is free software; you can redistribute it and/or modify    *
 *  it under the terms of the GNU General Public License as published by    *
 *  Free Software Foundation; either version 2 of the License, or (at your  *
 *  option) any later version.                                              *
 *                                                                          *
 *  As a special exception, the copyright holders of this library give you  *
 *  permission to link this library with independent modules to produce an  *
 *  executable, regardless of the license terms of these independent        *
 *  modules, and to copy and distribute the resulting executable under      *
 *  terms of your choice.                                                   *
 ****************************************************************************/

package nice.lang;

/** 
    Returns the strongly connected components
    of the graph rooted at the first argument,
    which edges are given by the function argument.
 
    The scc are returned in topological order.
    Tarjan's algorithm (linear).
 */
<Any T> List<List<T>> 
  stronglyConnectedComponents(T start, T->List<T> successors)
{
  Ref<int> id = new Ref(value: 0);
  Stack<T> stack = new Stack();
  Map<T,int> mark = new HashMap();

  List<List<T>> res = new ArrayList();
  visit(start,successors,id,stack,mark,res);
  
  return res;
}

<Any T> int visit(T node, T->List<T> successors, 
		  Ref<int> id, Stack<T> stack, Map<T,int> mark, 
		  List<List<T>> res)
{
  value(id)=value(id)+1;

  mark.put(node, value(id));
  stack.push(node);

  int min = id.value;
  successors(node).foreach(T child=>{
    int m = mark.get(child) || visit(child, successors, id, stack, mark, res);

    if (m < min) 
      min = m;
  });

  if(equals(min,mark.get(node)))
    {
      Vector<T> scc = new Vector();
      T element;
      do
	{
	  element = stack.pop();
	  scc.add(element);
	  mark.put(element,MAX_INT());
	}
      while (element != node);
      res.add(scc);
    }
  return min;
}
