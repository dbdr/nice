/// FAIL
  // Incorrect call of an anonymous function stored in a variable
  boolean -> void f = boolean b => {};
  f();

/// FAIL
  // Incorrect call of an anonymous function stored in a local parameter
  /// Toplevel
  void g(boolean -> void f)
  {
    f();
  }

/// PASS
  int->int f = int x => { if (true) return 0; else return 1; };

/// FAIL
  int->int f = int x => { if (true) return 0; };

/// FAIL
  int->void f = int x => { if (true) return 0; };

/// PASS
  int->void f = int x => { if (true) return; };

/// PASS
  int->void f = int x => { if (true) return; else return; };

/// PASS
  int i = 0;
  f(int j => i = j);
  /// Toplevel
  void f(int->void g) {}

/// PASS
  int i1 = 0, i2 = 1;
  f(int j => i1 = i2 = j);
  /// Toplevel
  void f(int->void g) {}

/// PASS
  int i = 0;
  [1,2,3].foreach(int j => i += j);
  assert (i == 6);

/// PASS
  int k; k = 2;
  [0].foreach(int a => println(k));

/// PASS
  /// package a
  /// Toplevel
class Test{
String[] array = new String[5].fill(int index =>
index.toString());
}
  /// package b import a
  {}

/// FAIL
  () -> int f = () => { 
  if (true) 
    return 1; 
  else 
    /* /// FAIL HERE */ return ""; 
  };

/// COMMENT An anonymous function returns any type iff it never returns
/// COMMENT normally (e.g. always throws an exception).

/// PASS
  int->String f = int i => throw new Error();

/// FAIL
  int->String f = int i => { if (false) throw new Error(); };

/// FAIL
  /// Toplevel
<T> void foo(T->int f = T x => x) {}
