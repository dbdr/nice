// Tests for exception handling

package regtest.basic;

class MyEx extends Exception {
  String info;
}

void test_exceptions();
test_exceptions()
{
  println("\n### Testing exceptions ###");
  ?String s = null;
  try{
    try{
      notNull(s).length();
    }
    finally{
      println("finally");
    }
  }
  catch(NullPointerException e){
    println("NullPointerException");
  }
  catch(nice.lang.AssertionFailed e){
    println("NullPointerException");
  }
  
  try{
    MyEx ex = new MyEx(info:"woula");
    throw ex;
  }
  catch(MyEx e){
    println("MyEx: info=" + e.info);
  }
  catch(Exception e){
    println("Exception");
  }

  try{
    exnRaiser(false);

    boolean b = s == null;
    if (b) 
      throw new MyEx(info: "");
    else
      return;
  }
  catch (MyEx e) {
  }

  try {
    // This throw expression is well-typed
    // It will never be executed but should be compiled into valid bytecode.
    throw neverReturns();
  }
  catch(Error e) {
  }

  testFinally(true);
  testFinally(false);  
  testFinallyInt(true);
  testFinallyInt(false);  
}

<T> T neverReturns()
{
  throw new Error();
}

int exnRaiser(boolean b) 
{
  if (b)
    throw new MyEx(info: "");
  else
    return 1;
}

void testFinally(boolean callReturn)
{
  try{
    try{
      if (callReturn)
	return;
    }
    finally{
      println("Finally is executed if return is called from try");
    }
    return;
  }
  finally{
    println("Outer finally blocks must be executed too");
  }
}

int testFinallyInt(boolean callReturn)
{
  try{
    try{
      if (callReturn)
	return 0;
    }
    finally{
      println("Finally is executed if return is called from try");
    }
    return 1;
  }
  finally{
    println("Outer finally blocks must be executed too");
  }
}
