package regtest.basic;

/** Tests higher order functions */

<Any T, Any U> U apply(T->U f, T x) = f(x);

<Any T, Any U> U apply2(T->U f, T x);
apply2(f, x) = f(x);

class High
{
  alike high( ()->void );

  String->void fieldFunction;
}

high(h@High, f)  { f(); return h; }

void test_parsingExp(High h) = (h.fieldFunction)("");
void test_parsingStmt(High h)
{
  (h.fieldFunction)("");
}

void test_higher_order()
{
  println(id("ID"));
  println((<Any T>(T x)=>x)("LAMBDA"));
  println(apply(<Any T>(T x)=>x, "LAMBDA"));
  println(apply(nativeToString, "Using native methods as first class values"));
  println(apply(id(intIdentity), 42));
}

String nativeToString(String) = native String Object.toString();

int intIdentity(int x) = id(x);

// Using int -> long implicit conversion in the returned value
long intWidening(int x) = x;

void unboundVariable(String v)
{
  throw new Error();
}

void passAsValue() = println(unboundVariable);
