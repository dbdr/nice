/**************************************************************************/
/*                                N I C E                                 */
/*             A high-level object-oriented research language             */
/*                        (c) Daniel Bonniot 2000                         */
/*                                                                        */
/*  This program is free software; you can redistribute it and/or modify  */
/*  it under the terms of the GNU General Public License as published by  */
/*  the Free Software Foundation; either version 2 of the License, or     */
/*  (at your option) any later version.                                   */
/*                                                                        */
/**************************************************************************/

package nice.lang;

/**
   Support for native arrays.
   Make them elements of the collection hierarchy.

   T[] is an equivalent notation for Array<T>
*/

final class Array<T>
  implements Sequence
  finally implements Collection
  = native;

/** Returns a new copy with newSize elements */
<Any T> T[] resize(T[], int newSize) = native Object Native.resize(Object,int);

<Any T> int length(T[]) = native int java.lang.reflect.Array.getLength(Object);

<Any T> T get(T[], int) =
  native Object java.lang.reflect.Array.get(Object,int);
//  inline nice.lang.inline.ArrayGetOp("o");
<Any T> void set(T[], int, T) =
  native void java.lang.reflect.Array.set(Object,int,Object);


boolean get(boolean[], int) = inline nice.lang.inline.ArrayGetOp("z");
byte    get(byte[],    int) = inline nice.lang.inline.ArrayGetOp("b");
short   get(short[],   int) = inline nice.lang.inline.ArrayGetOp("s");
int     get(int[],     int) = inline nice.lang.inline.ArrayGetOp("i");
long    get(long[],    int) = inline nice.lang.inline.ArrayGetOp("l");
char    get(char[],    int) = inline nice.lang.inline.ArrayGetOp("c");
float   get(float[],   int) = inline nice.lang.inline.ArrayGetOp("f");
double  get(double[],  int) = inline nice.lang.inline.ArrayGetOp("d");

void set(boolean[],int,boolean) = inline nice.lang.inline.ArraySetOp("z");
void set(byte[],   int, byte)   = inline nice.lang.inline.ArraySetOp("b");
void set(short[],  int, short)  = inline nice.lang.inline.ArraySetOp("s");
void set(int[],    int, int)    = inline nice.lang.inline.ArraySetOp("i");
void set(long[],   int, long)   = inline nice.lang.inline.ArraySetOp("l");
void set(char[],   int, char)   = inline nice.lang.inline.ArraySetOp("c");
void set(float[],  int, float)  = inline nice.lang.inline.ArraySetOp("f");
void set(double[], int, double) = inline nice.lang.inline.ArraySetOp("d");

// Define collection methods

get(a@Array, n) = get(a, n);
set(a@Array, n, e) = set(a,n,e);
size(a@Array) = a.length;

map<C,T,U>(a@Array, f)
{
  int l = a.length;

  U[] res = new U[l];

  for(int i=0; i<l; i=i+1)
    res[i] = f(a[i]);

  return res;
}

filter<C, T>(a@Array, test)
{
  int l = a.length;
  int found = 0;

  T[] res = new T[l];

  fun(T)() mafun = fun(T elem) =>
  { if(test(elem)) res.set(found++, elem); } ;

  a.iter(fun(T elem) =>
	{ if(test(elem)) res.set(found++, elem); } );

  return resize(res, found);
}

