/**************************************************************************/
/*                          Nice Eclipse-Plugin                           */
/*                          (c) Alex Greif 2003                           */
/*                                                                        */
/*  This program is free software; you can redistribute it and/or modify  */
/*  it under the terms of the GNU General Public License as published by  */
/*  the Free Software Foundation; either version 2 of the License, or     */
/*  (at your option) any later version.                                   */
/*                                                                        */
/**************************************************************************/

package nice.eclipse.core.builder;



class NiceBuilder extends IncrementalProjectBuilder {
	
	IProject currentProject = cast(null);
	?IProgressMonitor monitor = cast(null);
	NiceBuildNotifier notifier = cast(null);
	
	build(kind, argsMap, aMonitor) {
		//println("NiceBuilder.build()");
		currentProject = this.getProject();
		monitor = aMonitor;
		//if (currentProject.isAccessible())
		//	return new IProject[0];

		notifier = new NiceBuildNotifier(monitor: monitor, project: currentProject);
		notifier.begin();
		notifier.checkCancel();
		this.buildAll();

		notifier.done();
		//return new IProject[0];
		return null;
	}


	void buildAll() {
		NicePluginCompilationListener embedded =
			new NicePluginCompilationListener(monitor: monitor, notifier: notifier, project: currentProject);

		Plugin plugin = getNicePlugin();
		try {
			this.getProject().deleteMarkers(
				NICE_MODEL_PROBLEM_MARKER, true, IResource.DEPTH_INFINITE);

			Compilation compilation =
				bossa.modules.fun.createCompilation(embedded);

			File projectFolder = currentProject.getLocation().toFile();
			compilation.sourcePath = new File(projectFolder, getSourcepathProperty(currentProject)).toString();
			compilation.destinationDir = compilation.sourcePath;
			//	sourcePath must be before this line
			compilation.output = new File(projectFolder, getJarNameProperty(currentProject)).getAbsolutePath();
			compilation.packagePath = getClasspathProperty(currentProject);

			//println("sourcePath: " + compilation.sourcePath);
			//println("destinationDir: " + compilation.destinationDir);

			nice.tools.compiler.fun.compile(
					compilation,
					getMainPackageProperty(currentProject),
					null,
					//output,
					null, //native_compiler,
					false //editor
				);

			//int retval = console.statusCode;

		} catch (Exception e) {
			e.printStackTrace();
		}
	}
}




<T> void setAttribute (IMarker, String, ?T) = native void IMarker.setAttribute(String, Object);
void setAttribute (IMarker, String, int) = native void IMarker.setAttribute(String, int);

































