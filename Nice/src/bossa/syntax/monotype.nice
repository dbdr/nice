/**************************************************************************/
/*                                N I C E                                 */
/*             A high-level object-oriented research language             */
/*                        (c) Daniel Bonniot 2004                         */
/*                                                                        */
/*  This program is free software; you can redistribute it and/or modify  */
/*  it under the terms of the GNU General Public License as published by  */
/*  the Free Software Foundation; either version 2 of the License, or     */
/*  (at your option) any later version.                                   */
/*                                                                        */
/**************************************************************************/

package bossa.syntax;

import bossa.util.*;

/**
   A monotype, build by application of
   a type constructor to type parameters.

*/
public class MonotypeConstructor extends Monotype
{
  public ?TypeIdent tc = null;
  // used when the lowlevel TC is know in advance
  private ?mlsub.typing.TypeConstructor lowlevelTC = null;
  TypeParameters parameters;
  ?Location loc;
 
  Monotype cloneType() = new MonotypeConstructor(tc:tc,parameters:parameters,loc:loc);

  rawResolve(typeMap)
  {
    if (lowlevelTC == null)
      {
	let newTC = notNull(this.tc).resolveToTC(notNull(typeMap));
	if (! (newTC instanceof TypeConstructor))
	  throw User.error(notNull(this.tc), notNull(this.tc)+" should be a type constructor");
	lowlevelTC = newTC;
      }

    mlsub.typing.Monotype[?] resolvedParams = parameters.resolve(notNull(typeMap));

    try{
      return new mlsub.typing.MonotypeConstructor(lowlevelTC, resolvedParams);
    }
    catch(mlsub.typing.BadSizeEx e){
      // See if this is a class with default type parameters
      let res = getTypeWithTC(notNull(lowlevelTC), cast(resolvedParams));
      if (res == null)
        throw User.error(this, (tc!=null ? "Class "+tc : notNull(lowlevelTC).toString()) +
		       Util.has(e.expected, "type parameter", e.actual));

      return res;
    }
  }

  substitute(map)
  {
    Monotype res = createMonotypeConstructor
      (notNull(tc),
       new TypeParameters(content: Monotype.substitute(map, notNull(parameters.content))),
       loc);
    res.nullness = this.nullness;
    return res;
  }

  containsAlike() = Monotype.containsAlike(notNull(parameters.content));

  public ?TypeIdent getTC() = tc;
  
  public TypeParameters getTP() = parameters;
  
  location() = loc || notNull(tc).location();

  toString()
  {
    return this.nullnessString() + 
      (lowlevelTC != null ? notNull(lowlevelTC).toString() : notNull(tc).toString()) 
      + parameters;
  }

}

public MonotypeConstructor createMonotypeConstructor(TypeIdent tc, ?TypeParameters parameters,
			     ?Location loc)
{
  return new MonotypeConstructor(tc: tc, 
	parameters: parameters || new TypeParameters(content: []), loc: loc);
}

Monotype createMonotypeConstructor(mlsub.typing.TypeConstructor tc, TypeParameters parameters,
		      Location loc)
{
  return new MonotypeConstructor(lowlevelTC: tc, parameters: parameters, loc: loc);
}

/**
   Type parameters.
   Holds a colloction of Monotype.

*/
public class TypeParameters
{
  public Monotype[] content;

  mlsub.typing.Monotype[?] resolve(TypeMap ts)
  {
    return Monotype.resolve(ts, content);
  }

  toString() = Util.map("<",", ",">", content);
}  

public TypeParameters createTypeParameters(List<Monotype> tps)
{
  return new TypeParameters(content: Monotype.toArray(tps));
}
/**
   Functional type.

 */
public class FunType extends bossa.syntax.Monotype
{
  private bossa.syntax.Monotype[] in;
  private bossa.syntax.Monotype out;

  rawResolve(typeMap)
  {
    return new mlsub.typing.FunType
      (bossa.syntax.Monotype.resolve(notNull(typeMap), in),
       out.resolve(typeMap));
  }

 substitute(map)
  {
    bossa.syntax.Monotype res = new bossa.syntax.FunType
      (in: bossa.syntax.Monotype.substitute(map,in), out: out.substitute(map));
    res.nullness = this.nullness;
    return res;
  }

  containsAlike() = Monotype.containsAlike(in) || out.containsAlike();
  
  location() = out.location();

  toString()
  {
    return "(" + Util.map("", ", ", "", in) + 
      (nullness == maybe ? ")?->" : ")->") + out;
  }
  
  toStringExtern() = "(" + Util.map("", ", ", "", in) + ")->" + out.toStringExtern();
}

public FunType createFunType(?List<bossa.syntax.Monotype> in, 
		 bossa.syntax.Monotype out)
{
  return new FunType(in: (in != null ? in.toArray() : []), out: out);
}

public FunType createFunType_(bossa.syntax.Monotype[?] in, bossa.syntax.Monotype out)
{
  return new FunType(in: (in != null ? in : []), out: out);
}

/**
   The "alike" syntactic keyword in Monotypes

 */
public class Alike extends bossa.syntax.Monotype
{
  private Monotype[] parameters;
  private Location loc;

  // Alike should be removed as soon as types are constructed.
  rawResolve(map)
  {
    throw User.error(this, "\"alike\" can only be used in class method definitions");
  }

  void typecheck()
  {
    Internal.error("Alike not resolved");
  }

  substitute(map)
  {
    let tc = map.get(alike_id);

    if (tc == null)
      return this;

    assert tc instanceof MonotypeConstructor;
    let res = createMonotypeConstructor(notNull(tc.lowlevelTC), 
       new TypeParameters(content: Monotype.substitute(map, parameters)), 
       loc);
    res.nullness = this.nullness;
    return res;
  }

  containsAlike() = true;
  
  toString() = "alike" + Util.map("<", ", ", ">", parameters);

  location() = loc;
}

// common ID object
let String alike_id = "<ALIKE>";
String getAlikeID() = alike_id;

public Monotype createAlike(List<Monotype> parameters, Location location)
{
  return new Alike(parameters: Monotype.toArray(parameters), loc: location);
}
