<?xml version="1.0" encoding="UTF-8"?>
<!-- The file was formatted automatically by Eclipse 3.1.0 with maximum line width set to 110. -->
<project name="Nice" default="check">
  <property environment="env" />
  <property name="compiler" value="modern" description="example: ant -Dcompiler=gcj" />
  <property name="jvmArgs" value="-Xms64m -Xmx128m -ea" description="JVM options" />
  <property name="build" value="classes" />
  <property name="javaccVersion" value="javacc-3.2" />
  <property name="javaccZip" value="external/${javaccVersion}.zip" />
  <available file="${javaccZip}" property="haveJavacc" />
  <path id="freshNice">
    <pathelement path="${build}" />
  </path>

  <macrodef name="mac-javac-single">
    <attribute name="includes" />
    <attribute name="classpath" default="" />
    <sequential>
      <javac srcdir="src${path.separator}stdlib"
             destdir="${build}"
             classpath="@{classpath}"
             includes="@{includes}"
             debug="on"
             optimize="yes"
             compiler="${compiler}" />
    </sequential>
  </macrodef>
  <macrodef name="mac-javac-multi">
    <attribute name="classpath" default="" />
    <element name="include" optional="no" />
    <sequential>
      <javac srcdir="src${path.separator}stdlib"
             destdir="${build}"
             classpath="@{classpath}"
             debug="on"
             optimize="yes"
             compiler="${compiler}">
        <include />
      </javac>
    </sequential>
  </macrodef>
  <macrodef name="mac-nicec-old">
    <attribute name="package" />
    <attribute name="runtime" default="${NICE_JAR}" />
    <attribute name="args" default="" />
    <attribute name="sourcepath" default="src${path.separator}stdlib" />
    <sequential>
      <java failonerror="yes"
            fork="yes"
            classpath="@{runtime}"
            classname="nice.tools.compiler.console.dispatch">
        <jvmarg line="${jvmArgs}" />
        <arg value="--sourcepath" />
        <arg value="@{sourcepath}" />
        <arg value="--destination" />
        <arg value="${build}" />
        <arg value="--exclude-runtime" />
        <arg line="@{args}" />
        <arg value="@{package}" />
      </java>
    </sequential>
  </macrodef>
  <macrodef name="mac-nicec-new">
    <attribute name="package" />
    <attribute name="runtime" default="${build}" />
    <attribute name="args" default="" />
    <attribute name="sourcepath" default="src${path.separator}stdlib" />
    <sequential>
      <java failonerror="yes"
            fork="yes"
            classpath="@{runtime}"
            classname="nice.tools.compiler.console.dispatch">
        <jvmarg line="${jvmArgs}" />
        <arg value="--sourcepath" />
        <arg value="@{sourcepath}" />
        <arg value="--destination" />
        <arg value="${build}" />
        <arg value="--exclude-runtime" />
        <arg line="@{args}" />
        <arg value="@{package}" />
      </java>
    </sequential>
  </macrodef>

  <!-- Find an existing "nice.jar". -->
  <!-- Fresh "nice.jar" is usually available at "http://nice.sourceforge.net/nice.jar". -->
  <target name="envNicec1" if="env.NICEPATH">
    <property name="NICE_JAR" value="${env.NICEPATH}${file.separator}nice.jar" />
  </target>
  <target name="envNicec2" if="env.NICE">
    <property name="NICE_JAR" value="${env.NICE}${file.separator}nice.jar" />
  </target>
  <target name="envNicec3" if="env.NICE_JAR">
    <property name="NICE_JAR" value="${env.NICE_JAR}" />
  </target>
  <target name="initialize" depends="envNicec3,envNicec2,envNicec1">
    <echo message="Existing Nice compiler was found at ${NICE_JAR}" level="info" />
  </target>

  <!-- Bootstrap is split into a sequence of targets, combined in the "compiler1" target. -->
  <target name="core-bootstrap" depends="initialize">
    <mkdir dir="${build}" />
    <move file="src/bossa/syntax/dispatch.java.bootstrap"
          tofile="src/bossa/syntax/dispatch.java"
          failonerror="no" />
    <mac-javac-single includes="nice/tools/util/System.java" />
    <mac-nicec-old package="nice.tools.repository" args="-R" />
    <mac-nicec-old package="nice.tools.visibility" args="-r" />
    <mac-javac-multi>
      <include>
        <include name="bossa/syntax/dispatch.java" />
        <include name="mlsub/typing/*.java" />
        <include name="gnu/expr/*.java" />
        <include name="nice/lang/Native.java" />
        <include name="nice/lang/rawArray.java" />
        <include name="bossa/modules/Package.java" />
        <include name="bossa/modules/CompilationListener.java" />
        <include name="nice/tools/code/*.java" />
        <include name="nice/tools/util/JDK.java" />
      </include>
    </mac-javac-multi>
    <mac-javac-single includes="nice/lang/inline/*.java" />
    <mac-nicec-old package="bossa.modules" args="-R" />
    <mac-nicec-old package="nice.tools.ast" args="-r" />
    <mac-javac-single includes="bossa/syntax/*.java" />
    <move file="src/bossa/syntax/dispatch.java"
          tofile="src/bossa/syntax/dispatch.java.bootstrap"
          failonerror="no" />
    <delete file="${build}/bossa/syntax/dispatch.class" />
    <mac-nicec-old package="bossa.syntax" args="-r" />
  </target>
  <target name="javacc-download" unless="haveJavacc">
    <!-- actual location is currently https://www.dev.java.net/files/documents/17/686/javacc-3.2.zip -->
    <property name="url" value="https://javacc.dev.java.net/files/documents/17/686/${javaccVersion}.zip" />
    <echo message="Should download '${url}' and save it into '${javaccZip}'." level="info" />
    <exec executable="wget" dir="external">
      <arg value="-t0" />
      <arg value="-c" />
      <arg value="https://javacc.dev.java.net/files/documents/17/686/${javaccVersion}.zip" />
    </exec>
  </target>
  <available file="${build}/javacc.jar" property="haveJavaccJar" />
  <target name="javacc" depends="javacc-download" unless="haveJavaccJar">
    <unzip src="${javaccZip}" dest="${build}">
      <patternset>
        <include name="${javaccVersion}/bin/lib/javacc.jar" />
      </patternset>
    </unzip>
    <move file="${build}/${javaccVersion}/bin/lib/javacc.jar" todir="${build}" />
    <delete dir="${build}/${javaccVersion}" />
  </target>
  <target name="parser" depends="javacc">
    <java fork="yes" dir="src/bossa/parser" classname="javacc">
      <classpath>
        <pathelement path="${basedir}/${build}/javacc.jar" />
        <pathelement path="${basedir}/${build}" />
      </classpath>
      <arg value="Parser.jj" />
    </java>
  </target>
  <target name="recompile" depends="initialize">
    <mac-javac-multi classpath="${NICE_JAR}">
      <include>
        <include name="bossa/**/*.java" />
        <include name="nice/**/*.java" />
        <include name="mlsub/**/*.java" />
        <include name="gnu/*/*.java" />
        <include name="gnu/*/*/*.java" />
      </include>
    </mac-javac-multi>
    <mac-javac-single includes="nice/lang/*.java" />
  </target>
  <target name="setDate">
    <!-- TODO: Extract the current Nice version from the head of the NEWS file. -->
    <property name="version" value="0.9.14 prerelease" />
    <property name="to" value="src/nice/tools/compiler/dateBuild.nice" />
    <property name="LET" value="public let String" />
    <tstamp>
      <format property="NICE_DATE" timezone="UTC" pattern="yyyy.MM.dd, HH:mm:ss zzz" />
    </tstamp>
    <echo file="${to}" append="no" message="package nice.tools.compiler;&#10;" />
    <echo file="${to}" append="yes" message="${LET} versionNumber = &quot;${version}&quot;;&#10;" />
    <echo file="${to}" append="yes" message="${LET} buildDate = &quot;${NICE_DATE}&quot;;&#10;" />
    <echo file="${to}" append="yes" message="${LET} javaVersion = &quot;${java.version}&quot;;&#10;" />
    <manifest file="src/nice/tools/compiler/Manifest">
      <attribute name="Main-Class" value="nice.tools.compiler.console.fun" />
      <attribute name="Implementation-Title" value="Nice Compiler" />
      <attribute name="Implementation-Version" value="${version}" />
      <attribute name="Implementation-Vendor" value="Daniel Bonniot" />
      <attribute name="Implementation-URL" value="http://nice.sourceforge.net/" />
      <attribute name="Build-Id" value="Nice compiler version ${version} (build ${NICE_DATE})" />
    </manifest>
  </target>
  <target name="compiler" depends="initialize">
    <!-- The last part of the bootstrapping. -->
    <mac-nicec-old package="bossa.syntax" args="-r" />
    <mac-nicec-old package="nice.tools.compiler.console" args="-R" />
    <!--
      Make a snapshot of the compiler.
      It isn't used, but the "check" target will see that the file exists
      and will not try to recompile everything.
    -->
    <antcall target="makeArchive" />
  </target>
  <target name="compiler1"
          depends="core-bootstrap,javacc,parser,recompile,setDate,compiler"
          description="build intermediate compiler" />
  <target name="compiler2" depends="initialize">
    <!-- Rebuild the compiler with itself. -->
    <mac-nicec-new package="bossa.syntax" args="-R" />
    <mac-nicec-new package="nice.tools.compiler.console" args="-R" />
  </target>
  <target name="tools" depends="initialize">
    <echo message="Compiling nice.tools.doc..." level="info" />
    <mac-nicec-new package="nice.tools.doc" />

    <echo message="Compiling nice.tools.unit.console..." level="info" />
    <mac-nicec-new package="nice.tools.unit.console" />

    <echo message="Compiling nice.tools.ant..." level="info" />
    <!-- From the Makefile: NICE_ANTJAR or ANT_HOME should be set, -->
    <!-- Ant should be in the CLASSPATH or at least linked to by ./external/ant.jar -->
    <property name="sep" value="${path.separator}" />
    <property name="ant1" value="${env.NICE_ANTJAR}" />
    <property name="ant2" value="${env.ANT_HOME}/lib/ant.jar" />
    <property name="ant3" value="external/ant.jar" />
    <property name="antPath" value="${ant1}${sep}${ant2}${sep}${ant3}" />
    <echo message="Classpath is '${antPath}'." level="debug" />
    <mac-nicec-new package="nice.tools.ant" args="--classpath ${antPath}" />
    <mac-javac-single includes="nice/tools/ant/*.java" classpath="${antPath}" />

    <echo message="Compiling nice.tools.repository.publish..." level="info" />
    <mac-nicec-new package="nice.tools.repository.publish" args="--jar ${build}/nicepublish.jar" />
  </target>
  <target name="libs" depends="initialize">
    <mac-nicec-new package="nice.functional" />
    <mac-nicec-new package="nice.io" />
  </target>
  <target name="bootstrap" depends="compiler1,compiler2,tools,libs,recompile" />
  <!-- The end of bootstrap targets. -->

  <target name="makeArchive">
    <delete file="share/java/nice.jar" />
    <mkdir dir="share/java" />
    <jar destfile="share/java/nice.jar" duplicate="preserve" manifest="src/nice/tools/compiler/Manifest">
      <fileset dir="${build}">
        <include name="nice/**" />
        <include name="mlsub/**" />
        <include name="bossa/**" />
        <include name="gnu/**" />
      </fileset>
    </jar>
  </target>
  <available file="share/java/nice.jar" property="haveArchive" />
  <target name="archive" unless="haveArchive">
    <antcall target="bootstrap" />
    <antcall target="makeArchive" />
  </target>

  <target name="jar" depends="archive" description="compile and put Nice compiler into share/java/nice.jar">
  </target>

  <!-- Testing targets. -->
  <property name="checkFail" value="yes" description="whether to fail if there are testsuite regressions" />
  <target name="testengine">
    <mac-javac-single includes="nice/tools/testsuite/*.java" />
    <available file="${build}/nice/tools/testsuite/package.nicei" property="haveAdvancedTestengine" />
  </target>
  <target name="testengine_advanced" depends="testengine" unless="haveAdvancedTestengine">
    <mac-nicec-new package="nice.tools.testsuite" />
  </target>
  <target name="check_compiler" depends="archive,testengine">
    <java classpathref="freshNice"
          classname="nice.tools.testsuite.TestNice"
          fork="yes"
          failonerror="${checkFail}">
      <jvmarg line="${jvmArgs}" />
      <arg value="testsuite/compiler" />
    </java>
  </target>
  <target name="check_lib" depends="archive,testengine">
    <java classpathref="freshNice"
          classname="nice.tools.testsuite.TestNice"
          fork="yes"
          failonerror="${checkFail}">
      <jvmarg line="${jvmArgs}" />
      <arg value="testsuite/lib" />
    </java>
  </target>
  <target name="check_advanced" depends="archive,testengine,testengine_advanced">
    <java classpathref="freshNice"
          classname="nice.tools.testsuite.fun"
          fork="yes"
          failonerror="${checkFail}">
      <jvmarg line="${jvmArgs}" />
    </java>
  </target>
  <target name="check" depends="check_compiler,check_lib,check_advanced" description="run testsuite" />
  <!-- The end of testing targets. -->

  <target name="clean" description="remove all generated files">
    <delete dir="${build}" />
    <delete dir="nice" />
    <delete dir="temp-testcase" />
    <delete dir="testsuite-fail-folder" />
    <delete dir="testsuite-temp-folder" />
    <delete>
      <fileset dir="regtest" includes="*.jar" />
      <fileset dir="src/bossa/parser">
        <include name="Parse*.java" />
        <include name="Token*.java" />
        <include name="*CharStream.java" />
      </fileset>
      <fileset dir="bin">
        <include name="nicedoc" />
        <include name="niceunit" />
        <include name="nicedoc.lnk" />
        <include name="niceunit.lnk" />
      </fileset>
      <fileset dir="testsuite">
        <include name="**/*.class" />
        <include name="**/*.nicei" />
        <include name="**/*.jar" />
      </fileset>
    </delete>
    <delete dir="share/java" />
    <move file="src/bossa/syntax/dispatch.java"
          tofile="src/bossa/syntax/dispatch.java.bootstrap"
          failonerror="no" />
  </target>
</project>
