/// PASS
  /// TOPLEVEL
  /* A simple global var. */
  var int x = 0;

/// PASS
  /// TOPLEVEL
  /* A global var can have a null value. */
  var ?int x = null;

/// PASS
  /// TOPLEVEL
  /* A global var can have a null value. */
  var ?String x = null;

/// PASS
  /// TOPLEVEL
  /* A global var can have a functional value. */
  var int->int x = int y => y + 1;

/// PASS
  /// TOPLEVEL
  <Any T> T id(T x) = x;
  var int->int x = id(int y => y + 1);

/// PASS
  x(1);
  /// TOPLEVEL
  /* A global var can have a functional value. */
  var int->int x = int y => y + 1;
  
/// PASS
  int->int f = x;
  f(1);
  /// TOPLEVEL
  /* A global var can have a functional value. */
  var int->int x = int y => y + 1;
  
/// PASS
  /// Toplevel
var List<String> test2 = (()=> new ArrayList()) ();

/// PASS
  /// Toplevel
// Checks proper closures inside initialization expressions.
var Map<String,String> classMap = (()=> {
  Map<String,String> classMap' = new HashMap();
  [("int", "java.lang.Integer")].foreach((String,String) pair => {
    (String key, String value) = pair;
    classMap'.put(key, value);
  });
  return classMap';
})();


/// PASS
  /* Modifying a global var. */
  x = 1;
  /// TOPLEVEL
  var int x = 0;

/// PASS
  /// package a 
  /// TOPLEVEL
  var int x = 0;
  int getAX() = x;
  /// package b import a
  /* Modifying a global var from a different package. */
  x = 1; 
  assert(getAX() == 1);

/// PASS
  /// Toplevel
  var String f = "";
  var int f = 0;
  var String v = f;


/// PASS
  assert(x==0);
  /// TOPLEVEL
  let int x = 0;

/// FAIL
  s = "";
  /// TOPLEVEL
  let String s = "abc";

/// PASS
  String t = s;
  /// TOPLEVEL
  let String s = "abc";

/// PASS
  /// package a 
  /// TOPLEVEL
  let int x = 1;
  /// package b import a
  assert(x == 1);

/// FAIL
  /// package a 
  /// TOPLEVEL
  let int x = 0;
  /// package b import a
  x = 1;

/// PASS 
  /// package a 
  /// TOPLEVEL
  let char x = 'x';
  /// package b import a
  {}

/// PASS
  check();
  /// Toplevel
void check()
{
  assert QNAME.b != null;
}

let String A = "A";
let String B = A + ".B";

let QualifiedName QNAME = new QualifiedName(a: A, b: B);

class QualifiedName { String a; String b; }

/// PASS
  check();
  /// Toplevel
void check()
{
  assert QNAME.b != null;
}

let String B = AA + ".B";
let String AA = A + ".A";
let String A = "A";

let QualifiedName QNAME = new QualifiedName(a: A, b: B);

class QualifiedName { String a; String b; }

/// PASS
  assert s4.equals("1234");
  /// Toplevel
let String s4 = s3 + "4";
let String s3 = s2 + "3";
let String s2 = s1 + "2";
let String s1 = "1";

/// PASS
  assert isFoo;
  /// Toplevel
var boolean isFoo = computeFoo();

var java.io.File f  = new java.io.File("foo");

boolean computeFoo() = f.getPath().equals("foo");

/// FAIL
  /// Toplevel
  var String s;
