/// COMMENT Symbols that are less specific than others are ignored.

/// Global

class A {}
class B extends A {}


/// PASS
  f(new B());

  ///Toplevel
void f(A) { assert (false); }
void f(B, ?String s = null) {}


/// PASS
  f(a: new B(), "");

  ///Toplevel
void f(A a, String s) { assert(false); }
void f(B a, String s) { }

/// PASS
  f(a: new B(), "");

  ///Toplevel
void f(A a, String s) { assert(false); }
void f(int s, int a) {}
void f(B a, String s) { }

/// PASS
  h(a: new B());

  ///Toplevel
void h(?String s = null, A a) {}
void h(B a, ?String s = null) {}

/// FAIL
  f(a: new B(), "");

  ///Toplevel
void f(A a, String s) { }
void f(B a, String s) { }
void f(B a, String s, int i = 0) { }

/// PASS
  /// Toplevel
  abstract class A {}
  class B extends A {}
  void foo(A);
  void foo(B);
  foo(@B(A)) {}
  foo(@B(B)) {}

/// PASS
  /// Toplevel
  abstract class A {}
  class B extends A {}
  void foo(A, String);
  void foo(B, String);
  foo(@B(A), s) {}
  foo(@B(B), s) {}

/// FAIL
  /// Toplevel
  abstract class A {}
  class B extends A {}
  void foo(A, String);
  void foo(B ,Number);
  //still ambigious for the second argument
  foo(@B(A) ,s) {}
  foo(@B(B) ,s) {}

/// PASS
  /// Toplevel
  abstract class A {}
  class B extends A {}
  void foo(A, A);
  void foo(A, B);
  void foo(B, A);
  void foo(B, B);
  foo(@B(A) ,@B(A)) {}
  foo(@B(A) ,@B(B)) {}
  foo(@B(B) ,@B(A)) {}
  foo(@B(B) ,@B(B)) {}

/// FAIL
  /// Toplevel
  abstract class A {}
  class B extends A {}
  void foo(A);
  void foo(A);
  foo(@B(A)) {}
  foo(@B(B)) {}
