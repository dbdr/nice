/// PASS
  while (true) break;

/// PASS
  /// COMMENT: do not confuse loops
  boolean ok = false;
  while (true)
    {
      while (true) break;
      ok = true;
      break;
    }
  assert(ok);

/// PASS
  /// COMMENT: do not confuse loops
  boolean ok = false;
  while (true) break;
  ok = true;
  while (true) break;
  assert(ok);

/// PASS
  /// COMMENT: do not confuse loops
  for (int i = 0; i < 5; i++)
    {
      for (int j = 0; j < 5; j++)
        continue;
      if (true) continue;
      assert false;
    }

/// PASS
  /// COMMENT: do not confuse loops
  for (int i = 0; i < 5; i++) continue;
  for (int i = 0; i < 5; i++) continue;

/// FAIL
  break /*/// FAIL HERE */ undefined_label;

/// FAIL
  for(;;)
    continue /*/// FAIL HERE */ undefined_label;

/// PASS
  boolean doneFinally = false;
  for(;;)
    try {
      break;
    } finally {
      doneFinally = true;
    }
  assert doneFinally;

/// PASS
  boolean doneFinally = false;
  try {
    for(;;)
      break;
    assert !doneFinally;
  } finally {
    doneFinally = true;
  }

/// PASS
  let s = "abc";
  while(true) {
    synchronized(s){
      if (s == "abc") break;
    }
  }

/// FAIL
  label:
    {
       /*/// FAIL HERE */ label: while (true)
       {
         break label;
       }
    }
