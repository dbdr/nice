/// COMMENT Introducing a method that is more general than an existing one.
/// COMMENT That is, the existing one overrides the new one.

/// PASS
  /// package a
  /// Toplevel
class Collection
{
  void foo() {}
}

  /// package b import a
  /// Toplevel
abstract interface Fooable {}
<Fooable F> void foo(F this);

class a.Collection implements Fooable;

/// PASS
  /// package a
  /// Toplevel
class Collection
{
  void foo() {}
}

  /// package b import a
  /// Toplevel
abstract interface Fooable
{
  void foo();
}

class a.Collection implements Fooable;

/// PASS
  /// package a
  /// Toplevel
class Top {} class Bot extends Top {}

class A
{
  boolean ran = false;

  void foo(Top x) { ran = true; }
}

  /// package b import a
  let a = new a.A();
  doIt(a);
  assert a.ran;

  /// Toplevel
abstract interface Fooable
{
  void foo(Bot b);
}

class a.A implements Fooable;

<Fooable F> void doIt(F fooable) = fooable.foo(new Bot());


/// PASS
  // Real-world situation for the above.
  doIt(System.out);

  using(let w = new PrintWriter(new OutputStreamWriter(System.out))) {
    doIt(w);
  }

  /// Toplevel
import java.io.*;

abstract interface Printer
{
  void print(String);
}

class java.io.PrintStream implements Printer;
class java.io.PrintWriter implements Printer;

<Printer P> void doIt(P printer) = printer.print("hello\n");


/// PASS
  let c = new ArrayList();
  c.addTwice("A");
  assert c.size() == 2;

  // Check that overrides work
  let l = new SilentlyEmptyList();
  l.addTwice("A");
  assert l.size() == 0;
  /// Toplevel
abstract interface Addable<T> { void add(T item); }

interface java.util.Collection implements Addable;

<Addable A, T> void addTwice(A<T> a, T e) { a.add(e); a.add(e); }

class SilentlyEmptyList<T> extends LinkedList
{
  add(e) = false;
}

/// FAIL
  let c = new ArrayList();
  c.addTwice("A");
  assert c.size() == 2;

  /// Toplevel
abstract interface Addable<T>
{
  // Wrong return type
  /*/// FAIL HERE */ String add(T item);
}

interface java.util.Collection implements Addable;

<Addable A, T> void addTwice(A<T> a, T e) { a.add(e); a.add(e); }

/// FAIL
  /// package a
  /// Toplevel
interface A { void foo() {} }

  /// package b import a
  new C().doAdd();
  /// Toplevel
class B { void foo() {} }

abstract interface I { void /*/// FAIL HERE */ foo(); }
<I T> void doAdd(T x) = x.foo();

interface a.A implements I;

class C extends B implements I {
  // Missing implementation of foo.
  // Another option would be to accept the foo(B) implementation
  // as implementing the foo(I) method for C.
}

/// PASS
  /// package a
  /// Toplevel
interface A { boolean foo(); }

  /// package b import a
  assert new D().foo();
  assert test(new D());
  /// Toplevel
abstract interface I { boolean foo(); }
<I T> boolean test(T x) = x.foo();

interface a.A implements I;

// New implementation, which should satisfy both methods.
class D implements A { foo() = true; }


/// PASS
  // bug #1834805
  /// package a
  /// Toplevel
int foo(int x) = x;

  /// package b import a
  assert foo(3.3) == 4.3;
  /// Toplevel
double foo(double x) = x + 1;
