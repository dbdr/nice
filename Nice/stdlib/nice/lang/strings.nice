/****************************************************************************
 *                                 N I C E                                  *
 *              A high-level object-oriented research language              *
 *                         (c) Daniel Bonniot 2003                          *
 *                                                                          *
 *  This package is free software; you can redistribute it and/or modify    *
 *  it under the terms of the GNU General Public License as published by    *
 *  Free Software Foundation; either version 2 of the License, or (at your  *
 *  option) any later version.                                              *
 *                                                                          *
 *  As a special exception, the copyright holders of this library give you  *
 *  permission to link this library with independent modules to produce an  *
 *  executable, regardless of the license terms of these independent        *
 *  modules, and to copy and distribute the resulting executable under      *
 *  terms of your choice.                                                   *
 ****************************************************************************/

/**
   String manipulation functions.
*/

package nice.lang;

/****************************************************************
 * Strings
 ****************************************************************/

<T> String `+`(String s, T o) = s.concat(String.valueOf(o));
<!T> String `+`(T o, String s) = o.toString().concat(s);
String `+`(String s1, String s2) = s1.concat(s2);

int indexOf(String, char)          = native int String.indexOf(int);
int indexOf(String, char, int)     = native int String.indexOf(int, int);
int lastIndexOf(String, char)      = native int String.lastIndexOf(int);
int lastIndexOf(String, char, int) = native int String.lastIndexOf(int, int);

String replace(String source, char c, String with)
{
  StringBuffer res = new StringBuffer();
  char[] tab = source.toCharArray();
  int pos = 0;
  int newpos;
  while ((newpos = source.indexOf(c, pos)) != -1)
    {
      res.append(tab, pos, newpos - pos);
      res.append(with);
      pos = newpos + 1;
    }
  return res.append(tab, pos, tab.length - pos).toString();
}

String deleteAtEnd(String source, String what)
{
  if (!(source.endsWith(what)))
    return source;

  int pos = source.lastIndexOf(what);
  return notNull(source.substring(0, pos));
}

char get(String s, int index) = native char String.charAt(int);
char charAt(String s, int index) = native char String.charAt(int);

/**
 * Break a string into a <code>List&lt;String&gt;</code> of substrings,
 * splitting at (and removing) every occurrence of the <code>separator</code>
 * string.
 * 
 * @param str the string to split
 * @param separator the separator to split on 
 */
List<String> split(String str, char separator)
{
  List<String> res = new ArrayList();
  int ntx = 0;
  int pos = 0;
  while(ntx > -1)
    {
      ntx = str.indexOf(separator, pos);
      if (ntx > -1)
	{
	  if (ntx > 0)
	    {
	      res.add(str.substring(pos, ntx));
	    }
	  pos = ntx + 1;
	}
      else
	{
	  res.add(pos == 0 ? str : str.substring(pos));
	}
    }
  return res;
}

/**
 * Join a collection of strings together, interspersing <code>separator</code>
 * among them.
 *
 * @param strings the strings to join
 * @param separator the separator string to place between each 
 *    string and the one before it
 */
String join(Collection<String> strings, String separator)
{
  StringBuffer buff = new StringBuffer();
  Iterator<String> it = strings.iterator();
  while(it.hasNext())
    {
      buff.append(it.next());
      if (it.hasNext())
	buff.append(separator);
    }
  return buff.toString();
}
