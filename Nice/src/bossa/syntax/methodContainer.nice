/**************************************************************************/
/*                                N I C E                                 */
/*             A high-level object-oriented research language             */
/*                        (c) Daniel Bonniot 2004                         */
/*                                                                        */
/*  This program is free software; you can redistribute it and/or modify  */
/*  it under the terms of the GNU General Public License as published by  */
/*  the Free Software Foundation; either version 2 of the License, or     */
/*  (at your option) any later version.                                   */
/*                                                                        */
/**************************************************************************/

package bossa.syntax;

import bossa.util.*;

/**
   An entity in which methods can be declared.

   It can have type parameters, that are implicitely added 
   to the englobed methods.

*/
public abstract class MethodContainer extends Definition
{
  ?mlsub.typing.Variance variance = null;
  ?ClassConstraint classConstraint = null;
  /** Remember the declared class constraint, as it appears in the source. */
  ?ClassConstraint declaredClassConstraint = null;
    { declaredClassConstraint = classConstraint; }
  mlsub.typing.AtomicConstraint[?] resolvedConstraints = null;

  {
    this.name.prepend(module.pkg.getName() + ".");
  }

  /** The name of this method container without package qualification. */
  String getSimpleName()
  {
    String name = this.getName().toString();
    return name.substring(name.lastIndexOf('.') + 1);
  }

  mlsub.typing.TypeSymbol getTypeSymbol();

  resolve()
  {
    if (classConstraint != null)
      {
	TypeScope scope = new TypeScope(this.typeScope);
	try { 
          scope.addSymbols(notNull(classConstraint).getBinders());
        }
	catch(TypeScope.DuplicateName ex) {}
	resolvedConstraints = notNull(classConstraint).getAtoms().mapToArray(
		AtomicConstraint ac => ac.resolve(scope));
      }
  }

  /** The binders of the constraint. */
  public mlsub.typing.TypeSymbol[?] getBinders()
  {
    if (classConstraint == null)
      return null;
    else
      return notNull(classConstraint).getBinders().toArray();
  }

  /** The type parameters of the class. */
  public mlsub.typing.Monotype[?] getTypeParameters()
  {
    if (classConstraint == null)
      return null;
    else
      return notNull(classConstraint).typeParameters;
  }

  public mlsub.typing.Constraint getResolvedConstraint()
  {
    if (classConstraint == null)
      return mlsub.typing.Constraint.True;
    else
      return new mlsub.typing.Constraint
	(notNull(classConstraint).getBinders().toArray, resolvedConstraints);
  }

  /**
     Children should call this implementation (super) then print
     their specific information. 
   */
  printInterface(s)
  {
    // Always print the constraint as a prefix constraint.

    if (declaredClassConstraint == null)
      return;

    s.print(declaredClassConstraint);
  }

  String printTypeParameters()
  {
    if (declaredClassConstraint == null)
      return "";

    mlsub.typing.Monotype[] typeParameters = notNull(declaredClassConstraint).typeParameters;
    StringBuffer res = new StringBuffer("<");
    for (int n = 0; n < typeParameters.length; n++)
      {
        let vari = notNull(variance).getVariance(n);
	if (vari == mlsub.typing.Variance.CONTRAVARIANT) 
          res.append("-");
        else if (vari == mlsub.typing.Variance.COVARIANT)
          res.append("+");

	res.append(typeParameters[n].toString());
	if (n + 1 < typeParameters.length)
	  res.append(", ");
      }

    return res.append(">").toString();
  }
}

?mlsub.typing.Variance makeVariance(List<?boolean> typeParametersVariances)
{
  int[] variances = new int[typeParametersVariances.size()];
  for (int i = typeParametersVariances.size(); --i >= 0;)
    if (typeParametersVariances.get(i) != null)
      if (typeParametersVariances.get(i) == true)
        variances[i] = mlsub.typing.Variance.COVARIANT;
      else
        variances[i] = mlsub.typing.Variance.CONTRAVARIANT;

  return mlsub.typing.Variance.make(variances);
}

public class ClassConstraint extends Constraint
{
  /** The type parameters of the class. */
  mlsub.typing.Monotype[] typeParameters;
}

/**
   @param cst an additional constraint for the type parameters of this class.
*/
public ClassConstraint createClassConstraint(?Constraint cst, 
                                  mlsub.typing.MonotypeVar[] typeParameters, List<AtomicConstraint> atoms,
                                  Location loc)
{
  mlsub.typing.TypeSymbol[] binders;
  List<AtomicConstraint> constraints;
  boolean resolve;

  if (cst == trueConstraint || cst == null) 
    {
      binders = cast(typeParameters);
      constraints = atoms;
      resolve = false;
    }
  else
    {
       constraints = cst.getAtoms();
       binders = cst.getBinders().toArray();
       resolve = true;
    }

   return createClassConstraint(binders, constraints, typeParameters, resolve, loc);
}

ClassConstraint createClassConstraint(mlsub.typing.TypeSymbol[] binders, List<AtomicConstraint>  atoms,
                        mlsub.typing.MonotypeVar[] typeParameters, boolean resolve,
                        Location loc)
{
  mlsub.typing.Monotype[] tps;
  if (resolve)
    /**
       Replace those type parameters that have been introduced in the
       constraint by their definition.
    */
    tps = cast(typeParameters.mapToArray(mlsub.typing.MonotypeVar binder =>
	{
          for (s : binders)
            if (s.toString().equals(binder.getName()))
              {
                if (s instanceof mlsub.typing.MonotypeVar)
                  return s;
                else
                  // The type parameter must be in fact a type constructor
                  // of variance zero.
                  return new mlsub.typing.MonotypeConstructor(cast(s), null);
              }

          throw User.error(loc, binder + " is not declared in the constraint");
        }));
  else
    tps = cast(typeParameters);

  // The type parameters have nullness markers.
  for (tp : typeParameters)
    nice.tools.typing.Types.makeMarkedType(tp);

  let res = new ClassConstraint(Node.upper, binders: new ArrayList(binders),
	atomics: atoms, typeParameters: tps);

  for (b : binders)
    res.addTypeSymbol(b);

  return res;
}
