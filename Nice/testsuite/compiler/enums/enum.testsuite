/// PASS
  assert foo(blue);
  /// Toplevel
  enum Color {red, blue, green}
  boolean foo(Color);
  foo(red) = false;
  foo(blue) = true;
  foo(green) = false;

/// PASS
  /// package a 
  /// Toplevel
  enum Color {red, blue, green}
  boolean foo(Color);
  foo(red) = false;
  foo(blue) = true;
  foo(green) = false;
  /// package b import a
  assert foo(blue);

/// FAIL
  /// Toplevel
  enum Color {red, blue, green}
  void foo(Color);
  foo(red) = {};
  foo(blue) = {};

/// PASS
  assert foo(blue);
  /// Toplevel
  enum Color {red, blue, green}
  boolean foo(Color);
  foo(x) = false;
  foo(blue) = true;
  foo(green) = false;

/// FAIL
  /// Toplevel
  enum Single { thing }

/// PASS
  /// package a 
  /// Toplevel
  enum Color {red, blue, green}
  boolean foo(Color);
  foo(x) = false;
  /// package b import a
  assert foo(green);
  /// Toplevel
  foo(red) = false;
  foo(blue) = false;
  foo(green) = true;

/// PASS
  assert red.toString().equals("red");
  assert blue.toString().equals("blue");
  assert green.toString().equals("green");
  assert red.ordinal == 0;
  assert blue.ordinal == 1;
  assert green.ordinal == 2;
  /// Toplevel
  enum Color {red, blue, green}

/// PASS
  Color c = red;
  assert c.equals(red);
  assert !c.equals(blue);
  assert !c.equals(green);
  /// Toplevel
  enum Color {red, blue, green}

/// PASS
  List<Color> elems = red.family();
  assert elems.size() == 3;
  assert elems.contains(red);
  assert elems.contains(blue);
  assert elems.contains(green);
  /// Toplevel
  enum Color {red, blue, green}

/// PASS
  /// package a 
  /// Toplevel
  enum Color {red, blue, green}
  /// package b import a
  List<Color> elems = red.family();
  assert elems.size() == 3;
  assert elems.contains(red);
  assert elems.contains(blue);
  assert elems.contains(green);
