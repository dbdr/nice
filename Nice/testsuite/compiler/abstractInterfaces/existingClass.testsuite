/// COMMENT Implementation of an abstract interface by an existing class.

/// PASS
  /// Toplevel
  abstract interface I {}
  class java.lang.String implements I;

/// PASS
  /// package a
  /// Toplevel
  abstract interface I {}
  class java.lang.String implements I;
  /// package b import a
  {}

/// FAIL
  /// package a
  /// Toplevel
  abstract interface I {}
  /// package b
  /// Toplevel
  class java.lang.String implements a.I;

/// FAIL
  /// package a
  /// Toplevel
  abstract interface I {}
  /// package b import a
  /// Toplevel
  class java.lang.String implements I;


/// FAIL
  /// Toplevel
  abstract interface I { void f(); }
  class java.lang.String implements I;

/// PASS
  f("ABC");
  /// Toplevel
  abstract interface I { void f(); }
  class java.lang.String implements I;
  f(String x) {}

/// PASS
  /// Toplevel

  abstract interface I {
    alike f();
  }
  class java.io.File finally implements I;
  f(java.io.File f) = new java.io.File("foo");

/// FAIL
  /// Toplevel

  abstract interface I {
    alike f();
  }
  class java.io.File implements I;
  f(java.io.File f) = new java.io.File("foo");

/// PASS
  /// Toplevel
  abstract interface AI {}
  interface java.io.FileFilter implements AI;

/// FAIL
  /// Toplevel
  abstract interface AI {}
  // FileFilter is not a class
  class java.io.FileFilter implements AI;

/// FAIL
  /// Toplevel
  abstract interface AI {}
  // String is not an interface
  interface java.lang.String implements AI;

/// PASS
  // bug #904327
  // When implementing a non-abstract interface, the class must really
  // implement that interface in the bytecode.

  /// package vendor
  /// Toplevel
public class Vendor {}

  /// package test import vendor
  Vendor a = new Vendor();
  a.vend();

  /// Toplevel
public interface ITest {}

public void vend(ITest i){ println("ITest"); }

class vendor.Vendor implements ITest;

/// FAIL
  // bug #989049
  // Making an existing class implement a non-abstract interface
  // can only be done with classes defined in Nice.
  String a = "hello";
  println( a.test() );

  /// Toplevel
interface ITest { String test(); }

class /*/// FAIL HERE */ java.lang.String implements ITest;
test(String a) = "done";

/// FAIL
  // Making an existing class implement a non-abstract interface
  // can only be done with classes defined in Nice.
  // Retyped classes are not valid either.
  let l = new ArrayList();
  println( l.test() );

  /// Toplevel
interface ITest<T> { String test(); }

interface /*/// FAIL HERE */ java.util.Collection implements ITest;
test(Collection a) = "done";

/// FAIL
  // a primitive can't implement a non abstract interface
  /// Toplevel
  interface I {
    int foo();
  } 
  class /*/// FAIL HERE */nice.lang.int implements I;
  foo(x) = x;
