
/**************************************************************************/
/*                                                                        */
/*  This program is free software; you can redistribute it and/or modify  */
/*  it under the terms of the GNU General Public License as published by  */
/*  the Free Software Foundation; either version 2 of the License, or     */
/*  (at your option) any later version.                                   */
/*                                                                        */
/**************************************************************************/


package nice.ui.common;



/**
 * DECLARATION of methods to add nice.ui.swing.NiceListener to nice.ui.swing.NiceListenerHandler
 */

public <AncestorListenerHandler H> void addNiceAncestorListener(H,NiceAncestorListener);
public <CaretListenerHandler H> void addNiceCaretListener(H,NiceCaretListener);
public <CellEditorListenerHandler H> void addNiceCellEditorListener(H,NiceCellEditorListener);
public <ChangeListenerHandler H> void addNiceChangeListener(H,NiceChangeListener);
public <DocumentListenerHandler H> void addNiceDocumentListener(H,NiceDocumentListener);
public <HyperlinkListenerHandler H> void addNiceHyperlinkListener(H,NiceHyperlinkListener);
public <InternalFrameListenerHandler H> void addNiceInternalFrameListener(H,NiceInternalFrameListener);
public <ListDataListenerHandler H> void addNiceListDataListener(H,NiceListDataListener);
public <ListSelectionListenerHandler H> void addNiceListSelectionListener(H,NiceListSelectionListener);
public <MenuDragMouseListenerHandler H> void addNiceMenuDragMouseListener(H,NiceMenuDragMouseListener);
public <MenuKeyListenerHandler H> void addNiceMenuKeyListener(H,NiceMenuKeyListener);
public <MenuListenerHandler H> void addNiceMenuListener(H,NiceMenuListener);
public <PopupMenuListenerHandler H> void addNicePopupMenuListener(H,NicePopupMenuListener);
public <TableColumnModelListenerHandler H> void addNiceTableColumnModelListener(H,NiceTableColumnModelListener);
public <TableModelListenerHandler H> void addNiceTableModelListener(H,NiceTableModelListener);
public <TreeExpansionListenerHandler H> void addNiceTreeExpansionListener(H,NiceTreeExpansionListener);
public <TreeWillExpandListenerHandler H> void addNiceTreeWillExpandListener(H,NiceTreeWillExpandListener);
public <TreeModelListenerHandler H> void addNiceTreeModelListener(H,NiceTreeModelListener);
public <TreeSelectionListenerHandler H> void addNiceTreeSelectionListener(H,NiceTreeSelectionListener);
public <UndoableEditListenerHandler H> void addNiceUndoableEditListener(H,NiceUndoableEditListener);



/**
 * DEFINITION of methods to add nice.ui.awt.NiceListener to nice.ui.awt.NiceListenerHandler
 */

addNiceActionListener(this@javax.swing.AbstractButton,listener) = this.addActionListener(listener);
addNiceActionListener(this@javax.swing.JFileChooser,listener) = this.addActionListener(listener);
addNiceActionListener(this@javax.swing.Timer,listener) = this.addActionListener(listener);
addNiceActionListener(this@javax.swing.DefaultButtonModel,listener) = this.addActionListener(listener);
addNiceActionListener(this@javax.swing.JComboBox,listener) = this.addActionListener(listener);
addNiceActionListener(this@javax.swing.JTextField,listener) = this.addActionListener(listener);
addNiceAdjustmentListener(this@javax.swing.JScrollBar,listener) = this.addAdjustmentListener(listener);
addNiceItemListener(this@javax.swing.AbstractButton,listener) = this.addItemListener(listener);
addNiceItemListener(this@javax.swing.DefaultButtonModel,listener) = this.addItemListener(listener);
addNiceItemListener(this@javax.swing.JComboBox,listener) = this.addItemListener(listener);
addNiceAncestorListener(this@javax.swing.JComponent,listener) = this.addAncestorListener(listener);
addNiceCaretListener(this@javax.swing.text.JTextComponent,listener) = this.addCaretListener(listener);
addNiceCellEditorListener(this@javax.swing.AbstractCellEditor,listener) = this.addCellEditorListener(listener);
addNiceChangeListener(this@javax.swing.AbstractButton,listener) = this.addChangeListener(listener);
addNiceChangeListener(this@javax.swing.JSlider,listener) = this.addChangeListener(listener);
addNiceChangeListener(this@javax.swing.JProgressBar,listener) = this.addChangeListener(listener);
addNiceChangeListener(this@javax.swing.DefaultSingleSelectionModel,listener) = this.addChangeListener(listener);
addNiceChangeListener(this@javax.swing.DefaultBoundedRangeModel,listener) = this.addChangeListener(listener);
addNiceChangeListener(this@javax.swing.DefaultButtonModel,listener) = this.addChangeListener(listener);
addNiceChangeListener(this@javax.swing.text.DefaultCaret,listener) = this.addChangeListener(listener);
addNiceChangeListener(this@javax.swing.JViewport,listener) = this.addChangeListener(listener);
addNiceChangeListener(this@javax.swing.JTabbedPane,listener) = this.addChangeListener(listener);
addNiceDocumentListener(this@javax.swing.text.AbstractDocument,listener) = this.addDocumentListener(listener);
addNiceHyperlinkListener(this@javax.swing.JEditorPane,listener) = this.addHyperlinkListener(listener);
addNiceInternalFrameListener(this@javax.swing.JInternalFrame,listener) = this.addInternalFrameListener(listener);
addNiceListDataListener(this@javax.swing.AbstractListModel,listener) = this.addListDataListener(listener);
addNiceListSelectionListener(this@javax.swing.JList,listener) = this.addListSelectionListener(listener);
addNiceListSelectionListener(this@javax.swing.DefaultListSelectionModel,listener) = this.addListSelectionListener(listener);
addNiceMenuDragMouseListener(this@javax.swing.JMenuItem,listener) = this.addMenuDragMouseListener(listener);
addNiceMenuKeyListener(this@javax.swing.JMenuItem,listener) = this.addMenuKeyListener(listener);
addNiceMenuListener(this@javax.swing.JMenu,listener) = this.addMenuListener(listener);
addNicePopupMenuListener(this@javax.swing.JPopupMenu,listener) = this.addPopupMenuListener(listener);
addNiceTreeExpansionListener(this@javax.swing.JTree,listener) = this.addTreeExpansionListener(listener);
addNiceTreeWillExpandListener(this@javax.swing.JTree,listener) = this.addTreeWillExpandListener(listener);
addNiceTreeModelListener(this@javax.swing.tree.DefaultTreeModel,listener) = this.addTreeModelListener(listener);
addNiceTreeSelectionListener(this@javax.swing.JTree,listener) = this.addTreeSelectionListener(listener);
addNiceTreeSelectionListener(this@javax.swing.tree.DefaultTreeSelectionModel,listener) = this.addTreeSelectionListener(listener);

//JDK1.4  addNicePopupMenuListener(this@javax.swing.JComboBox,listener) = this.addPopupMenuListener(listener);
//JDK1.4  addNiceChangeListener(this@javax.swing.AbstractSpinnerModel,listener) = this.addChangeListener(listener);
//JDK1.4  addNiceChangeListener(this@javax.swing.JSpinner,listener) = this.addChangeListener(listener);


addNiceVetoableChangeListener(this@javax.swing.JComponent,listener)
{
	this.addVetoableChangeListener(listener);
	this.addInAccessibleListener(listener,vetoableChangeListeners);
}

addNicePropertyChangeListener(this@javax.swing.AbstractAction,listener)
{
	this.addPropertyChangeListener(listener);
	this.addInAccessibleListener(listener,propertyChangeListeners);
}

addNicePropertyChangeListener(this@javax.swing.tree.DefaultTreeSelectionModel,listener)
{
	this.addPropertyChangeListener(listener);
	this.addInAccessibleListener(listener,propertyChangeListeners);
}

addNicePropertyChangeListener(this@javax.swing.table.TableColumn,listener)
{
	this.addPropertyChangeListener(listener);
	this.addInAccessibleListener(listener,propertyChangeListeners);
}

addNiceTableModelListener(this@javax.swing.table.TableModel,listener)
{
	this.addTableModelListener(listener);
	this.addInAccessibleListener(listener,tableModelListeners);
}

addNiceTableColumnModelListener(this@javax.swing.table.TableColumnModel,listener)
{
	this.addColumnModelListener(listener);
	this.addInAccessibleListener(listener,tableColumnModelListeners);
}

addNiceChangeListener(this@javax.swing.MenuSelectionManager,listener)
{
	this.addChangeListener(listener);
	this.addInAccessibleListener(listener,changeListeners);
}

addNiceChangeListener(this@javax.swing.colorchooser.DefaultColorSelectionModel,listener)
{
	this.addChangeListener(listener);
	this.addInAccessibleListener(listener,changeListeners);
}

addNiceUndoableEditListener(this@javax.swing.undo.UndoableEditSupport,listener)
{
	this.addUndoableEditListener(listener);
	this.addInAccessibleListener(listener,undoableEditListeners);
}



/**
 * DEFINITION of functions to add nice.ui.awt.NiceListeners to nice.ui.awt.NiceListenerHandler
 */

public <MenuListenerHandler H> void addMenuListener
  (H this,
   MenuEvent ?-> void menuCanceled = null,
   MenuEvent ?-> void menuDeselected = null,
   MenuEvent ?-> void menuSelected = null         
   )
{
  this.addNiceMenuListener
    (new NiceMenuListener
      (menuCanceled: menuCanceled,
       menuDeselected: menuDeselected,
       menuSelected: menuSelected
       ));
}


public <MenuDragMouseListenerHandler H> void addMenuDragMouseListener
  (H this,
   MenuDragMouseEvent ?-> void menuDragMouseDragged = null,
   MenuDragMouseEvent ?-> void menuDragMouseEntered = null,
   MenuDragMouseEvent ?-> void menuDragMouseExited = null,
   MenuDragMouseEvent ?-> void menuDragMouseReleased = null
   )
{
  this.addNiceMenuDragMouseListener
    (new NiceMenuDragMouseListener
      (menuDragMouseDragged: menuDragMouseDragged,
       menuDragMouseEntered: menuDragMouseEntered,
       menuDragMouseExited: menuDragMouseExited,
       menuDragMouseReleased: menuDragMouseReleased
       ));
}


public <MenuKeyListenerHandler H> void addMenuKeyListener
  (H this, 
   MenuKeyEvent ?-> void menuKeyPressed = null,
   MenuKeyEvent ?-> void menuKeyReleased = null,
   MenuKeyEvent ?-> void menuKeyTyped = null       
   )
{
  this.addNiceMenuKeyListener
    (new NiceMenuKeyListener
      (menuKeyPressed: menuKeyPressed,
       menuKeyReleased: menuKeyReleased,
       menuKeyTyped: menuKeyTyped
       ));
}


public <ChangeListenerHandler H> void addChangeListener
  (H this,
   ChangeEvent -> void stateChanged
   )
{
   this.addNiceChangeListener
     (new NiceChangeListener
       (stateChanged: stateChanged
       ));       
}


public <UndoableEditListenerHandler H> void addUndoableEditListener
  (H this,
   UndoableEditEvent -> void undoableEditHappened      
   )
{
  this.addNiceUndoableEditListener
    (new NiceUndoableEditListener
      (undoableEditHappened: undoableEditHappened
       ));                                                 
}


public <TableColumnModelListenerHandler H> void addTableColumnModelListener
  (H this,
   TableColumnModelEvent ?-> void columnAdded = null,
   TableColumnModelEvent ?-> void columnMoved = null,
   TableColumnModelEvent ?-> void columnRemoved = null,
   ListSelectionEvent ?-> void columnSelectionChanged = null,
   ChangeEvent ?-> void columnMarginChanged = null         
   )
{
  this.addNiceTableColumnModelListener
    (new NiceTableColumnModelListener
      (columnAdded: columnAdded,
       columnMoved: columnMoved,
       columnRemoved: columnRemoved,
       columnSelectionChanged: columnSelectionChanged,
       columnMarginChanged: columnMarginChanged
       ));
}


public <TableModelListenerHandler H> void addTableModelListener
  (H this,
   TableModelEvent -> void tableChanged            
   )
{
  this.addNiceTableModelListener
    (new NiceTableModelListener
      (tableChanged: tableChanged
       ));                                                 
}


public <CellEditorListenerHandler H> void addNiceiceCellEditorListener
  (H this,
   ChangeEvent ?-> void editingCanceled = null,
   ChangeEvent ?-> void editingStopped = null          
   )
{
  this.addNiceCellEditorListener
    (new NiceCellEditorListener
      (editingCanceled: editingCanceled,
       editingStopped: editingStopped
       ));
}


public <ListSelectionListenerHandler H> void addListSelectionListener
  (H this,
   ListSelectionEvent -> void listSelectionValueChanged      
   )
{
  this.addNiceListSelectionListener
    (new NiceListSelectionListener
      (listSelectionValueChanged: listSelectionValueChanged
       ));                                                 
}


public <ListDataListenerHandler H> void addListDataListener
  (H this,
   ListDataEvent ?-> void contentsChanged = null,
   ListDataEvent ?-> void intervalAdded = null,
   ListDataEvent ?-> void intervalRemoved = null        
   )
{
  this.addNiceListDataListener
    (new NiceListDataListener
      (contentsChanged: contentsChanged,
       intervalAdded: intervalAdded,
       intervalRemoved: intervalRemoved
       ));
}


public <TreeModelListenerHandler H> void addTreeModelListener
  (H this,
   TreeModelEvent ?-> void treeNodesChanged = null,
   TreeModelEvent ?-> void treeNodesInserted = null,
   TreeModelEvent ?-> void treeNodesRemoved = null,
   TreeModelEvent ?-> void treeStructureChanged = null        
   )
{
  this.addNiceTreeModelListener
    (new NiceTreeModelListener
      (treeNodesChanged: treeNodesChanged,
       treeNodesInserted: treeNodesInserted,
       treeNodesRemoved: treeNodesRemoved,
       treeStructureChanged: treeStructureChanged
       ));
}


public <TreeSelectionListenerHandler H> void addTreeSelectionListener
  (H this,
   TreeSelectionEvent -> void treeSelectionValueChanged      
   )
{
  this.addNiceTreeSelectionListener
    (new NiceTreeSelectionListener
      (treeSelectionValueChanged: treeSelectionValueChanged
       ));                                             
}


public <DocumentListenerHandler H> void addDocumentListener
  (H this,
   DocumentEvent ?-> void changedUpdate = null,
   DocumentEvent ?-> void insertUpdate = null,
   DocumentEvent ?-> void removeUpdate = null                                 
   )
{
  this.addNiceDocumentListener
    (new NiceDocumentListener
      (changedUpdate: changedUpdate,
       insertUpdate: insertUpdate,
       removeUpdate: removeUpdate
       ));                                          
}


public <TreeExpansionListenerHandler H> void addTreeExpansionListener
  (H this,
   TreeExpansionEvent ?-> void treeCollapsed = null,
   TreeExpansionEvent ?-> void treeExpanded = null
   )
{   
  this.addNiceTreeExpansionListener
    (new NiceTreeExpansionListener(treeCollapsed: treeCollapsed,
     treeExpanded: treeExpanded
     ));       
}

   
public <TreeWillExpandListenerHandler H> void addTreeWillExpandListener
  (H this,  
   TreeExpansionEvent ?-> void treeWillExpand = null,
   TreeExpansionEvent ?-> void treeWillCollapse = null
   )
{  
  this.addNiceTreeWillExpandListener
    (new NiceTreeWillExpandListener
      (treeWillCollapse: treeWillCollapse,
       treeWillExpand: treeWillExpand
       ));  
}


public <InternalFrameListenerHandler H> void addInternalFrameListener
  (H this,
   InternalFrameEvent ?-> void internalFrameActivated = null,
   InternalFrameEvent ?-> void internalFrameClosed = null,
   InternalFrameEvent ?-> void internalFrameClosing = null,
   InternalFrameEvent ?-> void internalFrameDeactivated = null,
   InternalFrameEvent ?-> void internalFrameDeiconified = null,
   InternalFrameEvent ?-> void internalFrameIconified = null,
   InternalFrameEvent ?-> void internalFrameOpened = null        
   )
{
  this.addNiceInternalFrameListener
    (new NiceInternalFrameListener
      (internalFrameActivated: internalFrameActivated,
       internalFrameClosed: internalFrameClosed,
       internalFrameClosing: internalFrameClosing,
       internalFrameDeactivated: internalFrameDeactivated,
       internalFrameDeiconified: internalFrameDeiconified,
       internalFrameIconified: internalFrameIconified,
       internalFrameOpened: internalFrameOpened
       ));
}


public <PopupMenuListenerHandler H> void addPopupMenuListener
  (H this,
   PopupMenuEvent ?-> void popupMenuCanceled = null,
   PopupMenuEvent ?-> void popupMenuWillBecomeInvisible = null,
   PopupMenuEvent ?-> void popupMenuWillBecomeVisible = null          
   )
{
  this.addNicePopupMenuListener
    (new NicePopupMenuListener
      (popupMenuCanceled: popupMenuCanceled,
       popupMenuWillBecomeInvisible: popupMenuWillBecomeInvisible,
       popupMenuWillBecomeVisible: popupMenuWillBecomeVisible
       ));
}


public <HyperlinkListenerHandler H> void addHyperlinkListener
  (H this,
   HyperlinkEvent -> void hyperlinkUpdate        
   )
{
  this.addNiceHyperlinkListener
    (new NiceHyperlinkListener
      (hyperlinkUpdate: hyperlinkUpdate
       ));
}


public <CaretListenerHandler H> void addCaretListener
  (H this,
   CaretEvent -> void caretUpdate         
   )
{
  this.addNiceCaretListener
    (new NiceCaretListener
      (caretUpdate: caretUpdate
       ));
}


public <AncestorListenerHandler H> void addAncestorListener
  (H this,
   AncestorEvent ?-> void ancestorAdded = null,
   AncestorEvent ?-> void ancestorMoved = null,
   AncestorEvent ?-> void ancestorRemoved = null       
)
{
  this.addNiceAncestorListener
    (new NiceAncestorListener
      (ancestorAdded: ancestorAdded,
       ancestorMoved: ancestorMoved,
       ancestorRemoved: ancestorRemoved
       ));
}
