/**************************************************************************/
/*                             N I C E                                    */
/*        A simple imperative object-oriented research language           */
/*                   (c)  Daniel Bonniot 2004                             */
/*                                                                        */
/*  This program is free software; you can redistribute it and/or modify  */
/*  it under the terms of the GNU General Public License as published by  */
/*  the Free Software Foundation; either version 2 of the License, or     */
/*  (at your option) any later version.                                   */
/*                                                                        */
/**************************************************************************/

package bossa.syntax;

import bossa.util.*;

/**
   A method defined in Nice.
   
 */
public class NiceMethod extends UserOperator
{
  private boolean isOverride;
  private ?bossa.util.Location returnTypeLocation = null;

  private ?List<VarSymbol> homonyms = null;
  private ?List<MethodDeclaration> specializedMethods = null;

  {
    registerDispatchTest(this);
  }

  public boolean isMain()
  {
    return name.toString().equals("main") && arity==1 &&
	notNull(this.getType()).domain()[0].toString().equals("java.lang.String[]");
  }

  resolve()
  {
    super;

    // In interface files, we can assume that if the method overrides
    // any other known method, there is an explicit override keyword.
    // So we can avoid looking for specializations when there isn't one.
    if (isOverride || ! module.compiled())
      {
        homonyms = module.scope.lookup(this.getName());
        if (notNull(homonyms).size() == 1)
          homonyms = null;
        else
          notNull(homonyms).remove(this.getSymbol());
      }
  }

  typedResolve()
  {
    this.findSpecializedMethods();

    if (isOverride && specializedMethods == null)
      User.error(this, "This method does not override any other method");

    if (! this.inInterfaceFile() && ! isOverride && specializedMethods != null)
      {
        let parent = notNull(specializedMethods)[0];
        boolean sameResult = 
          this.getReturnType().toString().equals(parent.getReturnType().toString());

        if (sameResult)
          User.warning(this, "This method overrides " + parent +
	"\nYou should make this explicit, either by omitting the return type" +
                       "\nor by using the 'override' keyword");
        else
          User.warning(this, "This method overrides " + parent +
	"\nYou should make this explicit by using the 'override' keyword");
      }

    super;
  }

  listSpecializedMethods()
  {
    return specializedMethods == null ? null : notNull(specializedMethods).iterator();
  }

  specializesMethods() = specializedMethods != null;

  private void findSpecializedMethods()
  {
    if (homonyms == null)
      return;

    mlsub.typing.Domain ourDomain = nice.tools.typing.Types.domain(this.getType());

    for (s : notNull(homonyms))
      {
        let ?MethodDeclaration d = s.getMethodDeclaration();

        // Ignore non-methods.
        if (d == null || d.isIgnored())
          continue;

        // Check that we have the same number of arguments
        if (d.getArity() != this.getArity())
          continue;

        mlsub.typing.Domain itsDomain = nice.tools.typing.Types.domain(s.getType());

        // Do we have a smaller domain?
        if (! (mlsub.typing.Typing.smaller(ourDomain, itsDomain, true))
            ||  nice.tools.typing.Types.typeParameterDispatch(this.getType(), s.getType()))
          {
            // If the method is imported,
            // check if the reverse relation holds with that method
            if (d.module != null && d.module.compiled() &&
                mlsub.typing.Typing.smaller(itsDomain, ourDomain, true) &&
                ! nice.tools.typing.Types.typeParameterDispatch(s.getType(), this.getType()))
              {
                if (! nice.tools.typing.Types.covariantSpecialization(s.getType(), this.getType()))
                  User.error
                    (returnTypeLocation!=null ? returnTypeLocation : this.location(),
"The return type should be less precise than the return type of method\n" +
d + "\ndefined in:\n" +
                     d.location());

                // d is a specialized version of this.
                if (d instanceof NiceMethod)
                  d.addSpecializedMethod(this);

                // Therefore, all its implementations also belong to this.
                addAllAlternatives(d, this);
              }

            continue;
          }

        // In a compiled package, we don't need checking.
        if (! module.compiled())
	  if (! this.checkOverride(s, d, ourDomain, itsDomain))
	    // Ignore. Errors are reported by checkOverride.
            continue;

        this.addSpecializedMethod(d);
      }

    homonyms = null;
  }

  /** Return true if the override of d by this is OK.
      Return false if the override should be ignored.
  */
  private boolean checkOverride
    (VarSymbol s, MethodDeclaration d,
     mlsub.typing.Domain ourDomain, mlsub.typing.Domain itsDomain)
  {
    if (! nice.tools.typing.Types.covariantSpecialization(this.getType(), s.getType()))
      {
	User.error
	(returnTypeLocation != null ? returnTypeLocation : this.location(),
"The return type is less precise than the original return type of method\n" +
	 d + "\ndefined in:\n" +
	 d.location());
      }

    // Check if we are a proper specialization, or if we actually have
    // the same domain.
    if (mlsub.typing.Typing.smaller(itsDomain, ourDomain))
      {
	if (module == d.module)
	  User.error(this, "This method has a domain identical to " +
		     d + ", which is defined at " + d.location());
	else
	  // Methods with identical domains in different packages are
	  // accepted, but they do not specialize each other.
	  // They can be refered to unambiguously by using their
	  // fully qualified name.
	  return false;
      }

    return true;
  }

  private void addSpecializedMethod(MethodDeclaration method)
  {
    if (specializedMethods == null)
      specializedMethods = new ArrayList(5);

    notNull(specializedMethods).add(method);
  }

  /** @return a string that uniquely represents this method */
  getFullName() = module.pkg.getName() + '.' + name + ':' + this.getType();

  computeCode() = getDispatchMethod(this, module);

  public gnu.expr.LambdaExp getLambda() = nice.tools.code.Gen.dereference(this.getCode());

  compile() {}

  printInterface(s)
  {
    if (specializedMethods != null)
      s.print("override ");
    s.print(this.toString() + ";\n");
  }
}


public NiceMethod createNiceMethod(LocatedString name, 
	Constraint constraint, Monotype returnType, 
	FormalParameters parameters,
	Contract contract, boolean isOverride)
{
  let res = new NiceMethod(name, Node.down, 
	parameters: parameters,
        arity: parameters.size,
	syntacticConstraint: constraint.toString(),
	symbol: cast(null),
	contract: contract,
	isOverride: isOverride,
	returnTypeLocation: returnType.location());

  res.addChild(parameters);
  res.setSymbol(new MethodSymbol(res, name, constraint, returnType));
  return res;
}

/**
   The method is a class or interface member.
    
   @param c the class this method belongs to.
   @param name the name of the method
   @param typeParams the type parameters
   @param constraint the constraint
   @param returnType the return type
   @param params the MonoTypes of the parameters
   @param body the body of the function, or null if this is a real method
*/
public Definition createMemberMethod
    (MethodContainer c,
     LocatedString name, 
     Constraint constraint,
     Monotype returnType,
     FormalParameters params,
     ?Statement body, 
     Contract contract,
     boolean isOverride)
{
  // it is a class method, there is an implicit "this" argument

  boolean hasAlike = returnType.containsAlike() || params.containsAlike();

  let thisConstraint = c.classConstraint;
  mlsub.typing.TypeSymbol[?] thisBinders = c.getBinders();
    
  mlsub.typing.TypeSymbol container = c.getTypeSymbol();
  // contains the interface if container is one
  ?mlsub.typing.Interface itf = null;
  // contains the associated tc if possible
  ?mlsub.typing.TypeConstructor tc = null;
  if (container instanceof mlsub.typing.TypeConstructor)
      tc = container;
  else
    {
      itf = cast(container);
      tc = notNull(itf).associatedTC();
    }
    
  // if the constraint is True
  // we must create a new one, otherwise we would
  // modify other methods!
  if (constraint == trueConstraint)
      constraint = createConstraint(new ArrayList(), new ArrayList());

  constraint.addBinders(thisBinders);
  if (thisConstraint != null)
    constraint.addAtoms(thisConstraint.getAtoms());

  Monotype thisType;

  // "alike" is not created for a non-abstract interface
  // if alike is not present in the type, since it saves
  // a type parameter (more intuituve for rebinding)
  // and it does not change typing to do so.
  if (hasAlike || tc == null)
      {
	let alikeTC = new mlsub.typing.TypeConstructor("Alike", c.variance, false, false);
	
	// Add in front. Important for rebinding in method alternatives
	constraint.addFirstBinder(alikeTC);
	
	mlsub.typing.AtomicConstraint atom;
	if (itf != null)
	  atom = new mlsub.typing.ImplementsCst(alikeTC, itf);
	else
	  atom = new mlsub.typing.TypeConstructorLeqCst(alikeTC, tc);
	constraint.addAtom(new AtomicConstraintWrapper(atom: atom));

	thisType = new MonotypeWrapper
          (type: sureMonotype
           (new mlsub.typing.MonotypeConstructor
            (alikeTC, c.getTypeParameters())));

	if (hasAlike)
	  {
	    Map<String, Monotype> map = new HashMap();
	    map.put(getAlikeID(), 
		createMonotypeConstructor(alikeTC,
			createTypeParameters(new ArrayList()), name.location()));
	    returnType = returnType.substitute(map);
	    params.substitute(map);
	  }
      }
    else
      thisType = new SureMonotypeWrapper(tc: tc, params: c.getTypeParameters());

    params.addThis(thisType);

    if (body == null)
      return createNiceMethod(name, constraint, returnType, params, contract,
                            isOverride);
    else
      return createMethodWithDefault
        (name, constraint, returnType, params, body, contract, isOverride);
  }

public gnu.expr.Expression getDispatchMethod(NiceMethod def, Module module)
{
  String name = def.getName().toString();
  gnu.expr.LambdaExp res;
  gnu.bytecode.Type[] argTypes;
  gnu.bytecode.Type retType;

  // Try to compile the dispatch method as a member method if possible.
  ?NiceClass receiver;
  if (def.getArity() == 0)
    receiver = null;
  else
    {
      receiver = getNiceClass(def.getArgTypes()[0]);

      // JVM interfaces cannot contain code.
      if (receiver != null && receiver.isInterface())
        receiver = null;

      // Special treatment for serialization at the moment.
      if (def.getArity() == 2 &&
          (name.equals("writeObject")||name.equals("readObject")))
        receiver = null;
    }

  /*
    If this package is not recompiled,
    we fetch the bytecode type information
    from the previous dispatch class.
    Benefits: we get the most precise bytecode type for methods,
      as computed during the initial compilation.
      This would not be the case if we recomputed it,
      as the precise types are found during typechecking.
  */
  ?gnu.bytecode.Method meth = module.pkg.lookupDispatchClassMethod
   (receiver == null ? null : receiver.getClassType(),
    name, "id", def.getFullName());
  if (meth != null) // Reuse existing dispatch method header
    {
      // The dispatch code will have to be regenerated anyway
      meth.eraseCode();

      argTypes = notNull(meth.arg_types);

      if (receiver != null)
	argTypes = [receiver.getClassType()] + argTypes;

      retType  = notNull(meth.return_type);

      // Make sure we use the same bytecode name, since compiled code
      // can rely on it.
      name = meth.getName();
    }
  else // Get type information from the nice declaration
    {
      argTypes = def.javaArgTypes();
      retType  = def.javaReturnType();
    }

  res = generateMethod
    (name, argTypes, retType, def.getSymbols(), toplevel: true, member: receiver != null);
  res.parameterCopies = cast(notNull(def.formalParameters()).getParameterCopies());

  // add unique information to disambiguate which method this represents
  res.addBytecodeAttribute
    (new gnu.bytecode.MiscAttr("id", def.getFullName().getBytes()));

  if (receiver != null)
    return receiver.addJavaMethod(res);
  else
    return module.pkg.addMethod(res, false);
}
