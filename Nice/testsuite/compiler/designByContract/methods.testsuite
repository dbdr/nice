/// PASS
  /// Toplevel
int f(int x, int y)
  requires 
    x > 3 : "x is big enough",
    y < x
  ensures 
    result > 3;

f(x,y) = x;

/// FAIL
  /// Toplevel
int f(int x, int y)
  requires 
    /*/// FAIL HERE */ x : "x is big enough";

f(x,y) = x;

/// FAIL
  /// Toplevel
void f(int x)
  ensures result == result;

f(x) {}

/// PASS
  f(1);
  /// Toplevel
int f(int x)
  ensures result > 0;

f(x) = x;

/// PASS
  try {
    f(0);
    throw new Exception();
  } catch (AssertionFailed e) {}
  /// Toplevel
int f(int x)
  ensures result > 0;

f(x) = x;

/// PASS
  f();
  /// Toplevel
void f()
  ensures true;

f() {}

/// PASS
  try {
    f();
    throw new Exception();
  } catch(AssertionFailed e) {}
  /// Toplevel
void f()
  ensures false;

f() {}

/// FAIL
  /// Toplevel
  int f() ensures (/*/// FAIL HERE */(result = 0) == 0);
 
  f() = 1;

/// PASS
  /// package a
  /// Toplevel
  void foo(int x, int y) requires x > 0, y <= 0 {}
  /// package b import a
  var ok = false;
  try {
    foo(-1, 0);
  } catch(AssertionFailed e) { ok = true; }
  assert ok;
  ok = false;
  try {
    foo(0, 1);
  } catch(AssertionFailed e) { ok = true; }
  assert ok;

/// PASS
  // bug #982048
  // Use of 'this' in a contract

  bar(new A(foo: null));

  /// Toplevel
  class A { ?int foo; }
  void bar(A a) requires a.foo == null || notNull(a.foo) >= 0 {}

/// PASS
  /// package a
  /// Toplevel
// Compilation of contracts in class methods with multiple packages
public class Index
{
  final boolean relativeToEnd;

  public void `-`()
    requires this.relativeToEnd
  {
  }
}

  /// package b import a
  {}
