/**************************************************************************/
/*                                N I C E                                 */
/*             A high-level object-oriented research language             */
/*                        (c) Daniel Bonniot 2001                         */
/*                                                                        */
/*  This program is free software; you can redistribute it and/or modify  */
/*  it under the terms of the GNU General Public License as published by  */
/*  the Free Software Foundation; either version 2 of the License, or     */
/*  (at your option) any later version.                                   */
/*                                                                        */
/**************************************************************************/

package nice.lang;

/**
   Support for native arrays.
   Make them elements of the collection hierarchy.

   T[] is an equivalent notation for Array<T>
*/

final class Array<T>
  implements java.util.List<T>
  = native;

/** Returns an array with the newSize first elements. 
    The result can be the same array as the argument.
*/
<Any T> T[] resize(T[], int newSize) = native Object Native.resize(Object,int);

<Any T> int length(T[]) = inline nice.lang.inline.ArrayLength();

<Any T> T    get(T[], int)    = inline nice.lang.inline.ArrayGetOp("o");
<Any T> void set(T[], int, T) = inline nice.lang.inline.ArraySetOp("o");


boolean get(boolean[], int) = inline nice.lang.inline.ArrayGetOp("z");
byte    get(byte[],    int) = inline nice.lang.inline.ArrayGetOp("b");
short   get(short[],   int) = inline nice.lang.inline.ArrayGetOp("s");
int     get(int[],     int) = inline nice.lang.inline.ArrayGetOp("i");
long    get(long[],    int) = inline nice.lang.inline.ArrayGetOp("l");
char    get(char[],    int) = inline nice.lang.inline.ArrayGetOp("c");
float   get(float[],   int) = inline nice.lang.inline.ArrayGetOp("f");
double  get(double[],  int) = inline nice.lang.inline.ArrayGetOp("d");

void set(boolean[],int, boolean) = inline nice.lang.inline.ArraySetOp("z");
void set(byte[],   int, byte)    = inline nice.lang.inline.ArraySetOp("b");
void set(short[],  int, short)   = inline nice.lang.inline.ArraySetOp("s");
void set(int[],    int, int)     = inline nice.lang.inline.ArraySetOp("i");
void set(long[],   int, long)    = inline nice.lang.inline.ArraySetOp("l");
void set(char[],   int, char)    = inline nice.lang.inline.ArraySetOp("c");
void set(float[],  int, float)   = inline nice.lang.inline.ArraySetOp("f");
void set(double[], int, double)  = inline nice.lang.inline.ArraySetOp("d");


<T,U | T <: U> void copy(T[] from, int fromIndex = 0, 
			 U[] to, int toIndex = 0, int count) = 
  native void System.arraycopy(Object, int, Object, int, int);

<T,U | T <: U> void copy(List<T> from, int fromIndex = 0, 
			 U[] to, int toIndex = 0, int count)
{
  for (int i = fromIndex + count; --i >= fromIndex;)
    to[i] = from[toIndex + i];
}

<Any T> T[] slice(T[] array, int from = 0, int to = -1)
{
  if (to == -1) 
    to = array.length - 1;

  return fill(new T[to - from + 1], int i => array[i + from]);
}

// Define collection methods

map<C,T,U>(a@Array, f) = fill(new U[a.length], int i => f(a[i]));

filter<C, T>(a@Array, test) = a.filter(test);

// Specialized versions for arrays.

<T> T[] filter(T[] a, T -> boolean test)
{
  int l = a.length;
  int found = 0;

  T[] res = cast(new T[l]);

  a.iter(fun(T elem) =>
	{ if(test(elem)) res.set(found++, elem); } );

  return resize(res, found);
}

<Any T> void iter(T[] a, (T)->void f)
{
  for (int i = 0; i < a.length; i++)
    f(a[i]);
}

<Any T> ?T find(!T[] a, (!T)->boolean test)
{
  for (int i = 0; i < a.length; i++)
    if (test(a[i]))
      return a[i];
  return null;
}

/**
   Fills a newly created array with non-null values.

   A typical usage is to allocate a new array and set its values at the same time:
   <code>
     String[] numbers = fill(new String[10], int i => "number " + i);
   </code>

   The equivalent code in Java would be:
   <code>
     String[] numbers = new String[10];
     for (int i = 0; i < 10; i++) {
       numbers[i] = "number " + i;
     }
   </code>

   It is important that no reference to the array is kept,
   because that would make it possible to store null values in it.
   There is no danger as long as the array is created inside the call, 
   like in the above example.
*/
<Any T, Any U | U <: T> U[] fill(T[] array, int->U value)
// In particular, this is useful with T = ?X and U = !X.
// The above type is more general, and useful when the component type is a type variable.
{
  for (int i = 0; i < array.length; i++)
    array[i] = value(i);
  return cast(array);
}
