/**************************************************************************/
/*                                N I C E                                 */
/*             A high-level object-oriented research language             */
/*                        (c) Daniel Bonniot 2003                         */
/*                                                                        */
/*  This package is free software; you can redistribute it and/or modify  */
/*  it under the terms of the GNU Lesser General Public License as        */
/*  published by the Free Software Foundation; either version 2 of the    */
/*  License, or (at your option) any later version.                       */
/*                                                                        */
/**************************************************************************/

package nice.lang;

//Methods that returns a Iterator interface.
//If a "for in" is wanted for another class then they could be added easily.

<E> Iterator<E> forIterator(Collection<E> c) = c.iterator();
<E> Iterator<E> forIterator(E[] arr) = new ArrayForIterator(arr: arr);
Iterator<char> forIterator(String s) = new StringForIterator(str: s);
Iterator<char> forIterator(StringBuffer sb) = new StringBufferForIterator(strb: sb);

//The implementations of additional Iterators

private class ArrayForIterator<E> implements Iterator<E> {
  E[] arr;
  int pos = 0;
  hasNext() = pos < arr.length;
  next() = arr[pos++];
  remove() { throw new UnsupportedOperationException(); }
}

private class StringForIterator<E | E <: char, char <: E> implements Iterator<E> {
  String str;
  int pos = 0;
  hasNext() = pos < str.length();
  next() = str.charAt(pos++);
  remove() { throw new UnsupportedOperationException(); }
}

private class StringBufferForIterator<E | E <: char, char <: E> implements Iterator<E> {
  StringBuffer strb;
  int pos = 0;
  hasNext() = pos < strb.length();
  next() = strb.charAt(pos++);
  remove() { throw new UnsupportedOperationException(); }
}
