package nice.awt;

import nice.beans;

import java.awt.*;
import java.awt.event.*;
import java.beans.*;

// --------------------------------------------------------------------------------------------------
// --------------------- ActionDecorators for java.awt.Window ---------------------------------------
// --------------------------------------------------------------------------------------------------

void addWindowListeners(java.awt.Window window,
                        WindowEvent ?-> void windowActivated = null,
                        WindowEvent ?-> void windowClosed = null,
                        WindowEvent ?-> void windowClosing = null,
                        WindowEvent ?-> void windowDeactivated = null,
                        WindowEvent ?-> void windowDeiconified = null,
                        WindowEvent ?-> void windowIconified = null,
                        WindowEvent ?-> void windowOpened = null,
//                      WindowEvent ?-> void windowGainedFocus = null,
//                      WindowEvent ?-> void windowLostFocus = null,     
//                      WindowEvent ?-> void windowStateChanged = null,

//                      optional anonymous functions from java.awt.Container

                        ContainerEvent ?-> void componentAdded = null, 
                        ContainerEvent ?-> void componentRemoved = null,
                           
//                      optional anonymous functions from java.awt.Component
                          
                        ?String propertyName = null,
                        ComponentEvent ?-> void componentHidden = null,
                        ComponentEvent ?-> void componentMoved = null,
                        ComponentEvent ?-> void componentResized = null,
                        ComponentEvent ?-> void componentShown = null,
                        FocusEvent ?-> void focusGained = null,
                        FocusEvent ?-> void focusLost = null,
                        HierarchyEvent ?-> void hierarchyAncestorMoved = null,
                        HierarchyEvent ?-> void hierarchyAncestorResized = null,
                        HierarchyEvent ?-> void hierarchyChanged = null,
                        InputMethodEvent ?-> void caretPositionChanged = null,
                        InputMethodEvent ?-> void inputMethodTextChanged = null,
                        KeyEvent ?-> void keyPressed = null,
                        KeyEvent ?-> void keyReleased = null,
                        KeyEvent ?-> void keyTyped = null, 
                        MouseEvent ?-> void mouseClicked = null,
                        MouseEvent ?-> void mouseEntered = null,
                        MouseEvent ?-> void mouseExited = null,
                        MouseEvent ?-> void mousePressed = null,
                        MouseEvent ?-> void mouseReleased = null,   
                        MouseEvent ?-> void mouseDragged = null,
                        MouseEvent ?-> void mouseMoved = null,
                        PropertyChangeEvent ?-> void propertyChange = null
//                      MouseWheelEvent ?-> void mouseWheelMoved = null 
                        )
{
   // only if one of the according optional parameters really has a value, we will create and add the listener object
   if(windowActivated != null || 
      windowClosed != null ||
      windowClosing != null ||
      windowDeactivated != null ||
      windowDeiconified != null ||
      windowIconified != null ||
      windowOpened != null
//    windowGainedFocus != null ||  
//    windowLostFocus != null ||
//    windowStateChanged != null
      )
   {    
      
      window.addWindowListener(new NiceWindowListener(windowActivated: windowActivated,
                                                      windowClosed: windowClosed,
                                                      windowClosing: windowClosing,
                                                      windowDeactivated: windowDeactivated,
                                                      windowDeiconified: windowDeiconified,
                                                      windowIconified: windowIconified,
                                                      windowOpened: windowOpened
//                                                    windowGainedFocus: windowGainedFocus,
//                                                    windowLostFocus: windowLostFocus,
//                                                    windowStateChanged: windowStateChanged
                                                      ));
   }
  
   window.addContainerListeners(componentAdded: componentAdded,
                                componentRemoved: componentRemoved,                                                    
                                propertyName: propertyName,
                                componentHidden: componentHidden,
                                componentMoved: componentMoved,
                                componentResized: componentResized,
                                componentShown: componentShown,
                                focusGained: focusGained,
                                focusLost: focusLost,
                                hierarchyAncestorMoved: hierarchyAncestorMoved,
                                hierarchyAncestorResized: hierarchyAncestorResized,
                                hierarchyChanged: hierarchyChanged,
                                caretPositionChanged: caretPositionChanged,
                                inputMethodTextChanged: inputMethodTextChanged,
                                keyPressed: keyPressed,
                                keyReleased: keyReleased,
                                keyTyped: keyTyped, 
                                mouseClicked: mouseClicked,
                                mouseEntered: mouseEntered,
                                mouseExited: mouseExited,
                                mousePressed: mousePressed,
                                mouseReleased: mouseReleased,   
                                mouseDragged: mouseDragged,
                                mouseMoved: mouseMoved,
                                propertyChange: propertyChange
//                              mouseWheelMoved: mouseWheelMoved 
                                );                             
}



// --------------------------------------------------------------------------------------------------
// --------------------- ActionDecorators for java.awt.Container ------------------------------------
// --------------------------------------------------------------------------------------------------

void addContainerListeners(java.awt.Container container, 
                          ContainerEvent ?-> void componentAdded = null, 
                          ContainerEvent ?-> void componentRemoved = null,
                           
//                        optional anonymous functions from java.awt.Component
                          
                           ?String propertyName = null,
                           ComponentEvent ?-> void componentHidden = null,
                           ComponentEvent ?-> void componentMoved = null,
                           ComponentEvent ?-> void componentResized = null,
                           ComponentEvent ?-> void componentShown = null,
                           FocusEvent ?-> void focusGained = null,
                           FocusEvent ?-> void focusLost = null,
                           HierarchyEvent ?-> void hierarchyAncestorMoved = null,
                           HierarchyEvent ?-> void hierarchyAncestorResized = null,
                           HierarchyEvent ?-> void hierarchyChanged = null,
                           InputMethodEvent ?-> void caretPositionChanged = null,
                           InputMethodEvent ?-> void inputMethodTextChanged = null,
                           KeyEvent ?-> void keyPressed = null,
                           KeyEvent ?-> void keyReleased = null,
                           KeyEvent ?-> void keyTyped = null, 
                           MouseEvent ?-> void mouseClicked = null,
                           MouseEvent ?-> void mouseEntered = null,
                           MouseEvent ?-> void mouseExited = null,
                           MouseEvent ?-> void mousePressed = null,
                           MouseEvent ?-> void mouseReleased = null,   
                           MouseEvent ?-> void mouseDragged = null,
                           MouseEvent ?-> void mouseMoved = null,
                           PropertyChangeEvent ?-> void propertyChange = null
//                         MouseWheelEvent ?-> void mouseWheelMoved = null 
                         ) 
{
   // only if one of the according optional parameters really has a value, we will create and add the listener object
   if(componentAdded != null ||
      componentRemoved != null
      )
   {
      container.addContainerListener(new NiceContainerListener(componentAdded: componentAdded, 
                                                               componentRemoved: componentRemoved 
                                                               ));
   }
                                                           
   container.addComponentListeners(propertyName: propertyName,
                                   componentHidden: componentHidden,
                                   componentMoved: componentMoved,
                                   componentResized: componentResized,
                                   componentShown: componentShown,
                                   focusGained: focusGained,
                                   focusLost: focusLost,
                                   hierarchyAncestorMoved: hierarchyAncestorMoved,
                                   hierarchyAncestorResized: hierarchyAncestorResized,
                                   hierarchyChanged: hierarchyChanged,
                                   caretPositionChanged: caretPositionChanged,
                                   inputMethodTextChanged: inputMethodTextChanged,
                                   keyPressed: keyPressed,
                                   keyReleased: keyReleased,
                                   keyTyped: keyTyped, 
                                   mouseClicked: mouseClicked,
                                   mouseEntered: mouseEntered,
                                   mouseExited: mouseExited,
                                   mousePressed: mousePressed,
                                   mouseReleased: mouseReleased,   
                                   mouseDragged: mouseDragged,
                                   mouseMoved: mouseMoved,
                                   propertyChange: propertyChange
//                                 mouseWheelMoved: mouseWheelMoved 
                                   );
}

// --------------------------------------------------------------------------------------------------
// --------------------- ActionDecorators for java.awt.Checkbox ---------------------------------------
// --------------------------------------------------------------------------------------------------

void addCheckboxListeners(java.awt.Checkbox checkbox,
                          ItemEvent ?-> void itemStateChanged = null,
                         
//                        optional anonymous functions from java.awt.Component

                          ?String propertyName = null,
                          ComponentEvent ?-> void componentHidden = null,
                          ComponentEvent ?-> void componentMoved = null,
                          ComponentEvent ?-> void componentResized = null,
                          ComponentEvent ?-> void componentShown = null,
                          FocusEvent ?-> void focusGained = null,
                          FocusEvent ?-> void focusLost = null,
                          HierarchyEvent ?-> void hierarchyAncestorMoved = null,
                          HierarchyEvent ?-> void hierarchyAncestorResized = null,
                          HierarchyEvent ?-> void hierarchyChanged = null,
                          InputMethodEvent ?-> void caretPositionChanged = null,
                          InputMethodEvent ?-> void inputMethodTextChanged = null,
                          KeyEvent ?-> void keyPressed = null,
                          KeyEvent ?-> void keyReleased = null,
                          KeyEvent ?-> void keyTyped = null, 
                          MouseEvent ?-> void mouseClicked = null,
                          MouseEvent ?-> void mouseEntered = null,
                          MouseEvent ?-> void mouseExited = null,
                          MouseEvent ?-> void mousePressed = null,
                          MouseEvent ?-> void mouseReleased = null,   
                          MouseEvent ?-> void mouseDragged = null,
                          MouseEvent ?-> void mouseMoved = null,
                          PropertyChangeEvent ?-> void propertyChange = null
//                        MouseWheelEvent ?-> void mouseWheelMoved = null            
                          )
{
   // only if one of the according optional parameters really has a value, we will create and add the listener object
   if(itemStateChanged != null) checkbox.addItemListener(new NiceItemListener(itemStateChanged: itemStateChanged));

   checkbox.addComponentListeners(propertyName: propertyName,
                                  componentHidden: componentHidden,
                                  componentMoved: componentMoved,
                                  componentResized: componentResized,
                                  componentShown: componentShown,
                                  focusGained: focusGained,
                                  focusLost: focusLost,
                                  hierarchyAncestorMoved: hierarchyAncestorMoved,
                                  hierarchyAncestorResized: hierarchyAncestorResized,
                                  hierarchyChanged: hierarchyChanged,
                                  caretPositionChanged: caretPositionChanged,
                                  inputMethodTextChanged: inputMethodTextChanged,
                                  keyPressed: keyPressed,
                                  keyReleased: keyReleased,
                                  keyTyped: keyTyped, 
                                  mouseClicked: mouseClicked,
                                  mouseEntered: mouseEntered,
                                  mouseExited: mouseExited,
                                  mousePressed: mousePressed,
                                  mouseReleased: mouseReleased,   
                                  mouseDragged: mouseDragged,
                                  mouseMoved: mouseMoved,
                                  propertyChange: propertyChange
//                                mouseWheelMoved: mouseWheelMoved 
                                  );
}



// --------------------------------------------------------------------------------------------------
// --------------------- ActionDecorators for java.awt.TextComponent ---------------------------------------
// --------------------------------------------------------------------------------------------------

void addTextComponentListeners(java.awt.TextComponent text,
                               TextEvent ?-> void textValueChanged = null,
                         
//                             optional anonymous functions from java.awt.Component

                               ?String propertyName = null,
                               ComponentEvent ?-> void componentHidden = null,
                               ComponentEvent ?-> void componentMoved = null,
                               ComponentEvent ?-> void componentResized = null,
                               ComponentEvent ?-> void componentShown = null,
                               FocusEvent ?-> void focusGained = null,
                               FocusEvent ?-> void focusLost = null,
                               HierarchyEvent ?-> void hierarchyAncestorMoved = null,
                               HierarchyEvent ?-> void hierarchyAncestorResized = null,
                               HierarchyEvent ?-> void hierarchyChanged = null,
                               InputMethodEvent ?-> void caretPositionChanged = null,
                               InputMethodEvent ?-> void inputMethodTextChanged = null,
                               KeyEvent ?-> void keyPressed = null,
                               KeyEvent ?-> void keyReleased = null,
                               KeyEvent ?-> void keyTyped = null, 
                               MouseEvent ?-> void mouseClicked = null,
                               MouseEvent ?-> void mouseEntered = null,
                               MouseEvent ?-> void mouseExited = null,
                               MouseEvent ?-> void mousePressed = null,
                               MouseEvent ?-> void mouseReleased = null,   
                               MouseEvent ?-> void mouseDragged = null,
                               MouseEvent ?-> void mouseMoved = null,
                               PropertyChangeEvent ?-> void propertyChange = null
//                             MouseWheelEvent ?-> void mouseWheelMoved = null            
                               )
{
   // only if one of the according optional parameters really has a value, we will create and add the listener object
   if(textValueChanged != null) text.addTextListener(new NiceTextListener(textValueChanged: textValueChanged));

   text.addComponentListeners(propertyName: propertyName,
                              componentHidden: componentHidden,
                              componentMoved: componentMoved,
                              componentResized: componentResized,
                              componentShown: componentShown,
                              focusGained: focusGained,
                              focusLost: focusLost,
                              hierarchyAncestorMoved: hierarchyAncestorMoved,
                              hierarchyAncestorResized: hierarchyAncestorResized,
                              hierarchyChanged: hierarchyChanged,
                              caretPositionChanged: caretPositionChanged,
                              inputMethodTextChanged: inputMethodTextChanged,
                              keyPressed: keyPressed,
                              keyReleased: keyReleased,
                              keyTyped: keyTyped, 
                              mouseClicked: mouseClicked,
                              mouseEntered: mouseEntered,
                              mouseExited: mouseExited,
                              mousePressed: mousePressed,
                              mouseReleased: mouseReleased,   
                              mouseDragged: mouseDragged,
                              mouseMoved: mouseMoved,
                              propertyChange: propertyChange
//                            mouseWheelMoved: mouseWheelMoved 
                              );
}


// --------------------------------------------------------------------------------------------------
// --------------------- ActionDecorators for java.awt.TextField ---------------------------------------
// --------------------------------------------------------------------------------------------------

void addTextFieldListeners(java.awt.TextField text,
                           ActionEvent ?-> void actionPerformed = null,
                      
//                         optional anonymous function from java.awt.TextComponent
                         
                           TextEvent ?-> void textValueChanged = null,
                         
//                         optional anonymous functions from java.awt.Component

                           ?String propertyName = null,
                           ComponentEvent ?-> void componentHidden = null,
                           ComponentEvent ?-> void componentMoved = null,
                           ComponentEvent ?-> void componentResized = null,
                           ComponentEvent ?-> void componentShown = null,
                           FocusEvent ?-> void focusGained = null,
                           FocusEvent ?-> void focusLost = null,
                           HierarchyEvent ?-> void hierarchyAncestorMoved = null,
                           HierarchyEvent ?-> void hierarchyAncestorResized = null,
                           HierarchyEvent ?-> void hierarchyChanged = null,
                           InputMethodEvent ?-> void caretPositionChanged = null,
                           InputMethodEvent ?-> void inputMethodTextChanged = null,
                           KeyEvent ?-> void keyPressed = null,
                           KeyEvent ?-> void keyReleased = null,
                           KeyEvent ?-> void keyTyped = null, 
                           MouseEvent ?-> void mouseClicked = null,
                           MouseEvent ?-> void mouseEntered = null,
                           MouseEvent ?-> void mouseExited = null,
                           MouseEvent ?-> void mousePressed = null,
                           MouseEvent ?-> void mouseReleased = null,   
                           MouseEvent ?-> void mouseDragged = null,
                           MouseEvent ?-> void mouseMoved = null,
                           PropertyChangeEvent ?-> void propertyChange = null
//                         MouseWheelEvent ?-> void mouseWheelMoved = null            
                           )
{
   // only if one of the according optional parameters really has a value, we will create and add the listener object
   if(actionPerformed != null) text.addActionListener(new NiceActionListener(actionPerformed: actionPerformed));

   text.addTextComponentListeners(textValueChanged: textValueChanged,
                                  propertyName: propertyName,
                                  componentHidden: componentHidden,
                                  componentMoved: componentMoved,
                                  componentResized: componentResized,
                                  componentShown: componentShown,
                                  focusGained: focusGained,
                                  focusLost: focusLost,
                                  hierarchyAncestorMoved: hierarchyAncestorMoved,
                                  hierarchyAncestorResized: hierarchyAncestorResized,
                                  hierarchyChanged: hierarchyChanged,
                                  caretPositionChanged: caretPositionChanged,
                                  inputMethodTextChanged: inputMethodTextChanged,
                                  keyPressed: keyPressed,
                                  keyReleased: keyReleased,
                                  keyTyped: keyTyped, 
                                  mouseClicked: mouseClicked,
                                  mouseEntered: mouseEntered,
                                  mouseExited: mouseExited,
                                  mousePressed: mousePressed,
                                  mouseReleased: mouseReleased,   
                                  mouseDragged: mouseDragged,
                                  mouseMoved: mouseMoved,
                                  propertyChange: propertyChange
//                                mouseWheelMoved: mouseWheelMoved 
                                  );
}    


// --------------------------------------------------------------------------------------------------
// --------------------- ActionDecorators for java.awt.Scrollbar ---------------------------------------
// --------------------------------------------------------------------------------------------------

void addScrollbarListeners(java.awt.Scrollbar scrollbar,
                           AdjustmentEvent ?-> void adjustmentValueChanged = null,
                         
//                         optional anonymous functions from java.awt.Component

                           ?String propertyName = null,
                           ComponentEvent ?-> void componentHidden = null,
                           ComponentEvent ?-> void componentMoved = null,
                           ComponentEvent ?-> void componentResized = null,
                           ComponentEvent ?-> void componentShown = null,
                           FocusEvent ?-> void focusGained = null,
                           FocusEvent ?-> void focusLost = null,
                           HierarchyEvent ?-> void hierarchyAncestorMoved = null,
                           HierarchyEvent ?-> void hierarchyAncestorResized = null,
                           HierarchyEvent ?-> void hierarchyChanged = null,
                           InputMethodEvent ?-> void caretPositionChanged = null,
                           InputMethodEvent ?-> void inputMethodTextChanged = null,
                           KeyEvent ?-> void keyPressed = null,
                           KeyEvent ?-> void keyReleased = null,
                           KeyEvent ?-> void keyTyped = null, 
                           MouseEvent ?-> void mouseClicked = null,
                           MouseEvent ?-> void mouseEntered = null,
                           MouseEvent ?-> void mouseExited = null,
                           MouseEvent ?-> void mousePressed = null,
                           MouseEvent ?-> void mouseReleased = null,   
                           MouseEvent ?-> void mouseDragged = null,
                           MouseEvent ?-> void mouseMoved = null,
                           PropertyChangeEvent ?-> void propertyChange = null
//                         MouseWheelEvent ?-> void mouseWheelMoved = null            
                           )
{
   // only if one of the according optional parameters really has a value, we will create and add the listener object
   if(adjustmentValueChanged != null) scrollbar.addAdjustmentListener(new NiceAdjustmentListener(adjustmentValueChanged: adjustmentValueChanged));

   scrollbar.addComponentListeners(propertyName: propertyName,
                                   componentHidden: componentHidden,
                                   componentMoved: componentMoved,
                                   componentResized: componentResized,
                                   componentShown: componentShown,
                                   focusGained: focusGained,
                                   focusLost: focusLost,
                                   hierarchyAncestorMoved: hierarchyAncestorMoved,
                                   hierarchyAncestorResized: hierarchyAncestorResized,
                                   hierarchyChanged: hierarchyChanged,
                                   caretPositionChanged: caretPositionChanged,
                                   inputMethodTextChanged: inputMethodTextChanged,
                                   keyPressed: keyPressed,
                                   keyReleased: keyReleased,
                                   keyTyped: keyTyped, 
                                   mouseClicked: mouseClicked,
                                   mouseEntered: mouseEntered,
                                   mouseExited: mouseExited,
                                   mousePressed: mousePressed,
                                   mouseReleased: mouseReleased,   
                                   mouseDragged: mouseDragged,
                                   mouseMoved: mouseMoved,
                                   propertyChange: propertyChange
//                                 mouseWheelMoved: mouseWheelMoved 
                                   );
}

// --------------------------------------------------------------------------------------------------
// --------------------- ActionDecorators for java.awt.Choice ---------------------------------------
// --------------------------------------------------------------------------------------------------

void addChoiceListeners(java.awt.Choice choice,
                        ItemEvent ?-> void itemStateChanged = null,
                         
//                      optional anonymous functions from java.awt.Component

                        ?String propertyName = null,
                        ComponentEvent ?-> void componentHidden = null,
                        ComponentEvent ?-> void componentMoved = null,
                        ComponentEvent ?-> void componentResized = null,
                        ComponentEvent ?-> void componentShown = null,
                        FocusEvent ?-> void focusGained = null,
                        FocusEvent ?-> void focusLost = null,
                        HierarchyEvent ?-> void hierarchyAncestorMoved = null,
                        HierarchyEvent ?-> void hierarchyAncestorResized = null,
                        HierarchyEvent ?-> void hierarchyChanged = null,
                        InputMethodEvent ?-> void caretPositionChanged = null,
                        InputMethodEvent ?-> void inputMethodTextChanged = null,
                        KeyEvent ?-> void keyPressed = null,
                        KeyEvent ?-> void keyReleased = null,
                        KeyEvent ?-> void keyTyped = null, 
                        MouseEvent ?-> void mouseClicked = null,
                        MouseEvent ?-> void mouseEntered = null,
                        MouseEvent ?-> void mouseExited = null,
                        MouseEvent ?-> void mousePressed = null,
                        MouseEvent ?-> void mouseReleased = null,   
                        MouseEvent ?-> void mouseDragged = null,
                        MouseEvent ?-> void mouseMoved = null,
                        PropertyChangeEvent ?-> void propertyChange = null
//                      MouseWheelEvent ?-> void mouseWheelMoved = null            
                        )
{
   // only if one of the according optional parameters really has a value, we will create and add the listener object
   if(itemStateChanged != null) choice.addItemListener(new NiceItemListener(itemStateChanged: itemStateChanged));

   choice.addComponentListeners(propertyName: propertyName,
                                componentHidden: componentHidden,
                                componentMoved: componentMoved,
                                componentResized: componentResized,
                                componentShown: componentShown,
                                focusGained: focusGained,
                                focusLost: focusLost,
                                hierarchyAncestorMoved: hierarchyAncestorMoved,
                                hierarchyAncestorResized: hierarchyAncestorResized,
                                hierarchyChanged: hierarchyChanged,
                                caretPositionChanged: caretPositionChanged,
                                inputMethodTextChanged: inputMethodTextChanged,
                                keyPressed: keyPressed,
                                keyReleased: keyReleased,
                                keyTyped: keyTyped, 
                                mouseClicked: mouseClicked,
                                mouseEntered: mouseEntered,
                                mouseExited: mouseExited,
                                mousePressed: mousePressed,
                                mouseReleased: mouseReleased,   
                                mouseDragged: mouseDragged,
                                mouseMoved: mouseMoved,
                                propertyChange: propertyChange
//                              mouseWheelMoved: mouseWheelMoved 
                                );
}

// --------------------------------------------------------------------------------------------------
// --------------------- ActionDecorators for java.awt.List ---------------------------------------
// --------------------------------------------------------------------------------------------------

void addListListeners(java.awt.List list,
                      ActionEvent ?-> void actionPerformed = null,
                      ItemEvent ?-> void itemStateChanged = null,
                         
//                    optional anonymous functions from java.awt.Component

                      ?String propertyName = null,
                      ComponentEvent ?-> void componentHidden = null,
                      ComponentEvent ?-> void componentMoved = null,
                      ComponentEvent ?-> void componentResized = null,
                      ComponentEvent ?-> void componentShown = null,
                      FocusEvent ?-> void focusGained = null,
                      FocusEvent ?-> void focusLost = null,
                      HierarchyEvent ?-> void hierarchyAncestorMoved = null,
                      HierarchyEvent ?-> void hierarchyAncestorResized = null,
                      HierarchyEvent ?-> void hierarchyChanged = null,
                      InputMethodEvent ?-> void caretPositionChanged = null,
                      InputMethodEvent ?-> void inputMethodTextChanged = null,
                      KeyEvent ?-> void keyPressed = null,
                      KeyEvent ?-> void keyReleased = null,
                      KeyEvent ?-> void keyTyped = null, 
                      MouseEvent ?-> void mouseClicked = null,
                      MouseEvent ?-> void mouseEntered = null,
                      MouseEvent ?-> void mouseExited = null,
                      MouseEvent ?-> void mousePressed = null,
                      MouseEvent ?-> void mouseReleased = null,   
                      MouseEvent ?-> void mouseDragged = null,
                      MouseEvent ?-> void mouseMoved = null,
                      PropertyChangeEvent ?-> void propertyChange = null
//                    MouseWheelEvent ?-> void mouseWheelMoved = null            
                      )
{
   // only if one of the according optional parameters really has a value, we will create and add the listener object
   if(actionPerformed != null) list.addActionListener(new NiceActionListener(actionPerformed: actionPerformed));
   
   // only if one of the according optional parameters really has a value, we will create and add the listener object
   if(itemStateChanged != null) list.addItemListener(new NiceItemListener(itemStateChanged: itemStateChanged));

   list.addComponentListeners(propertyName: propertyName,
                              componentHidden: componentHidden,
                              componentMoved: componentMoved,
                              componentResized: componentResized,
                              componentShown: componentShown,
                              focusGained: focusGained,
                              focusLost: focusLost,
                              hierarchyAncestorMoved: hierarchyAncestorMoved,
                              hierarchyAncestorResized: hierarchyAncestorResized,
                              hierarchyChanged: hierarchyChanged,
                              caretPositionChanged: caretPositionChanged,
                              inputMethodTextChanged: inputMethodTextChanged,
                              keyPressed: keyPressed,
                              keyReleased: keyReleased,
                              keyTyped: keyTyped, 
                              mouseClicked: mouseClicked,
                              mouseEntered: mouseEntered,
                              mouseExited: mouseExited,
                              mousePressed: mousePressed,
                              mouseReleased: mouseReleased,   
                              mouseDragged: mouseDragged,
                              mouseMoved: mouseMoved,
                              propertyChange: propertyChange
//                            mouseWheelMoved: mouseWheelMoved 
                              );
}

// --------------------------------------------------------------------------------------------------
// --------------------- ActionDecorators for java.awt.Label ---------------------------------------
// --------------------------------------------------------------------------------------------------

void addLabelListeners(java.awt.Label label,

//                     optional anonymous functions from java.awt.Component

                       ?String propertyName = null,
                       ComponentEvent ?-> void componentHidden = null,
                       ComponentEvent ?-> void componentMoved = null,
                       ComponentEvent ?-> void componentResized = null,
                       ComponentEvent ?-> void componentShown = null,
                       FocusEvent ?-> void focusGained = null,
                       FocusEvent ?-> void focusLost = null,
                       HierarchyEvent ?-> void hierarchyAncestorMoved = null,
                       HierarchyEvent ?-> void hierarchyAncestorResized = null,
                       HierarchyEvent ?-> void hierarchyChanged = null,
                       InputMethodEvent ?-> void caretPositionChanged = null,
                       InputMethodEvent ?-> void inputMethodTextChanged = null,
                       KeyEvent ?-> void keyPressed = null,
                       KeyEvent ?-> void keyReleased = null,
                       KeyEvent ?-> void keyTyped = null, 
                       MouseEvent ?-> void mouseClicked = null,
                       MouseEvent ?-> void mouseEntered = null,
                       MouseEvent ?-> void mouseExited = null,
                       MouseEvent ?-> void mousePressed = null,
                       MouseEvent ?-> void mouseReleased = null,   
                       MouseEvent ?-> void mouseDragged = null,
                       MouseEvent ?-> void mouseMoved = null,
                       PropertyChangeEvent ?-> void propertyChange = null
//                     MouseWheelEvent ?-> void mouseWheelMoved = null            
                       )
{

   label.addComponentListeners(propertyName: propertyName,
                               componentHidden: componentHidden,
                               componentMoved: componentMoved,
                               componentResized: componentResized,
                               componentShown: componentShown,
                               focusGained: focusGained,
                               focusLost: focusLost,
                               hierarchyAncestorMoved: hierarchyAncestorMoved,
                               hierarchyAncestorResized: hierarchyAncestorResized,
                               hierarchyChanged: hierarchyChanged,
                               caretPositionChanged: caretPositionChanged,
                               inputMethodTextChanged: inputMethodTextChanged,
                               keyPressed: keyPressed,
                               keyReleased: keyReleased,
                               keyTyped: keyTyped, 
                               mouseClicked: mouseClicked,
                               mouseEntered: mouseEntered,
                               mouseExited: mouseExited,
                               mousePressed: mousePressed,
                               mouseReleased: mouseReleased,   
                               mouseDragged: mouseDragged,
                               mouseMoved: mouseMoved,
                               propertyChange: propertyChange
//                             mouseWheelMoved: mouseWheelMoved 
                               );
}

// --------------------------------------------------------------------------------------------------
// --------------------- ActionDecorators for java.awt.Button ---------------------------------------
// --------------------------------------------------------------------------------------------------

void addButtonListeners(java.awt.Button button,
                        ActionEvent ?-> void actionPerformed = null,
                         
//                      optional anonymous functions from java.awt.Component

                        ?String propertyName = null,
                        ComponentEvent ?-> void componentHidden = null,
                        ComponentEvent ?-> void componentMoved = null,
                        ComponentEvent ?-> void componentResized = null,
                        ComponentEvent ?-> void componentShown = null,
                        FocusEvent ?-> void focusGained = null,
                        FocusEvent ?-> void focusLost = null,
                        HierarchyEvent ?-> void hierarchyAncestorMoved = null,
                        HierarchyEvent ?-> void hierarchyAncestorResized = null,
                        HierarchyEvent ?-> void hierarchyChanged = null,
                        InputMethodEvent ?-> void caretPositionChanged = null,
                        InputMethodEvent ?-> void inputMethodTextChanged = null,
                        KeyEvent ?-> void keyPressed = null,
                        KeyEvent ?-> void keyReleased = null,
                        KeyEvent ?-> void keyTyped = null, 
                        MouseEvent ?-> void mouseClicked = null,
                        MouseEvent ?-> void mouseEntered = null,
                        MouseEvent ?-> void mouseExited = null,
                        MouseEvent ?-> void mousePressed = null,
                        MouseEvent ?-> void mouseReleased = null,   
                        MouseEvent ?-> void mouseDragged = null,
                        MouseEvent ?-> void mouseMoved = null,
                        PropertyChangeEvent ?-> void propertyChange = null
//                      MouseWheelEvent ?-> void mouseWheelMoved = null            
                        )
{
   // only if one of the according optional parameters really has a value, we will create and add the listener object
   if(actionPerformed != null) button.addActionListener(new NiceActionListener(actionPerformed: actionPerformed));

   button.addComponentListeners(propertyName: propertyName,
                                componentHidden: componentHidden,
                                componentMoved: componentMoved,
                                componentResized: componentResized,
                                componentShown: componentShown,
                                focusGained: focusGained,
                                focusLost: focusLost,
                                hierarchyAncestorMoved: hierarchyAncestorMoved,
                                hierarchyAncestorResized: hierarchyAncestorResized,
                                hierarchyChanged: hierarchyChanged,
                                caretPositionChanged: caretPositionChanged,
                                inputMethodTextChanged: inputMethodTextChanged,
                                keyPressed: keyPressed,
                                keyReleased: keyReleased,
                                keyTyped: keyTyped, 
                                mouseClicked: mouseClicked,
                                mouseEntered: mouseEntered,
                                mouseExited: mouseExited,
                                mousePressed: mousePressed,
                                mouseReleased: mouseReleased,   
                                mouseDragged: mouseDragged,
                                mouseMoved: mouseMoved,
                                propertyChange: propertyChange
//                              mouseWheelMoved: mouseWheelMoved 
                                );
}


// --------------------------------------------------------------------------------------------------
// --------------------- ActionDecorators for java.awt.MenuItem --------------------------
// --------------------------------------------------------------------------------------------------

void addMenuItemListeners(java.awt.MenuItem menuItem,
                          ActionEvent ?-> void actionPerformed = null       
                          )
{
   // only if one of the according optional parameters really has a value, we will create and add the listener object
   if(actionPerformed != null) menuItem.addActionListener(new NiceActionListener(actionPerformed: actionPerformed));                                                 
}



// --------------------------------------------------------------------------------------------------
// --------------------- ActionDecorators for java.awt.CheckboxMenuItem -----------------------------
// --------------------------------------------------------------------------------------------------

void addCheckboxMenuItemListeners(java.awt.CheckboxMenuItem menuItem,
                                  ActionEvent ?-> void actionPerformed = null,       
                                  ItemEvent ?-> void itemStateChanged = null
                                  )
{
   // only if one of the according optional parameters really has a value, we will create and add the listener object
   if(actionPerformed != null) menuItem.addActionListener(new NiceActionListener(actionPerformed: actionPerformed));          
   if(itemStateChanged != null) menuItem.addItemListener(new NiceItemListener(itemStateChanged: itemStateChanged));                                       
}



//// --------------------------------------------------------------------------------------------------
//// --------------------- ActionDecorators for java.awt.ScrollPaneAdjustable -----------------------------
//// --------------------------------------------------------------------------------------------------
//
//void addScrollPaneAdjustableListeners(java.awt.ScrollPaneAdjustable adjustable,
//                                      AdjustmentEvent ?-> void adjustmentValueChanged = null,       
//                                      )
//{
//
//   if(adjustmentValueChanged != null) adjustable.addAdjustmentListener(new NiceAdjustmentListener(adjustmentValueChanged: adjustmentValueChanged));                                               
//}


//// --------------------------------------------------------------------------------------------------
//// --------------------- ActionDecorators for java.awt.KeyboardFocusManager -------------------------
//// --------------------------------------------------------------------------------------------------
//
//void addKeyboardFocusManagerListeners(java.awt.KeyboardFocusManager manager,
//                                      ?String propertyName = null,
//                                      PropertyChangeEvent ?-> void propertyChange = null,       
//                                      PropertyChangeEvent ?-> void vetoableChange = null
//                                  )
//{
//   // only if one of the according optional parameters really has a value, we will create and add the listener object                                                                 
//   if(propertyName != null && propertyChange != null) 
//   {
//      manager.addPropertyChangeListener(propertyName,
//                                        new NicePropertyChangeListener(propertyChange: propertyChange
//                                        )); 
//   } 
//   else if(propertyName == null && propertyChange != null)
//   {
//      manager.addPropertyChangeListener(new NicePropertyChangeListener(propertyChange: propertyChange));
//   }	    
//                                                                     
//   if(propertyName != null && vetoableChange != null) 
//   {
//      manager.addVetoableChangeListener(propertyName,
//                                        new NiceVetoableChangeListener(vetoableChange: vetoableChange
//                                        )); 
//   } 
//   else if(propertyName == null && vetoableChange != null)
//   {
//      manager.addPropertyChangeListener(new NicePropertyChangeListener(vetoableChange: vetoableChange));
//   }	                                         
//}


// --------------------------------------------------------------------------------------------------
// --------------------- ActionDecorators for java.awt.Toolkit --------------------------
// --------------------------------------------------------------------------------------------------

void addToolkitListeners(java.awt.Toolkit toolkit,
                         AWTEvent ?-> void eventDispatched = null,
                         long eventMask = 0,
                         ?String propertyName = null,
                         PropertyChangeEvent ?-> void propertyChange = null       
                         )
{
   // only if one of the according optional parameters really has a value, we will create and add the listener object
   if(eventDispatched != null) toolkit.addAWTEventListener(new NiceAWTEventListener(eventDispatched: eventDispatched),eventMask);  

   if(propertyName != null && propertyChange != null) 
   {
      toolkit.addPropertyChangeListener(propertyName,
                                        new NicePropertyChangeListener(propertyChange: propertyChange
                                        )); 
   }                                              
}


// --------------------------------------------------------------------------------------------------
// --------------------- ActionDecorators for java.awt.dnd.DragGestureRecognizer --------------------
// --------------------------------------------------------------------------------------------------

void addDragGestureRecognizerListeners(java.awt.dnd.DragGestureRecognizer recognizer, 
                                       DragGestureEvent ?-> void dragGestureRecognized = null
                                       )
{ 
   // only if one of the according optional parameters really has a value, we will create and add the listener object
   if(dragGestureRecognized != null) recognizer.addDragGestureListener(new NiceDragGestureListener(dragGestureRecognized: dragGestureRecognized));
}


// --------------------------------------------------------------------------------------------------
// --------------------- ActionDecorators for java.awt.dnd.DragSource -------------------------------
// --------------------------------- j2sk1.4.0 feature ----------------------------------------------
// --------------------------------------------------------------------------------------------------
//
//void addDragSourceListeners(java.awt.dnd.DragSource source, 
//                            DragSourceDropEvent ?-> void dsDragDropEnd = null,
//                            DragSourceDragEvent ?-> void dsDragEnter = null,
//                            DragSourceDragEvent ?-> void dsDragOver = null,
//                            DragSourceDragEvent ?-> void dsDropActionChanged = null,
//                            DragSourceEvent ?-> void dsDragExit = null
//                            DragSourceDragEvent ?-> void dragMouseMoved
//                            )
//{ 
//   // only if one of the according optional parameters really has a value, we will create and add the listener object
//   if(dsDragDropEnd != null ||
//      dsDragEnter != null ||
//      dsDragOver != null ||
//      dsDropActionChanged != null ||
//      dsDragExit != null
//      )
//   {   
//      source.addDragSourceListener(new NiceDragSourceListener(dsDragDropEnd: dsDragDropEnd,
//                                                              dsDragEnter: dsDragEnter,
//                                                              dsDragOver: dsDragOver,
//                                                              dsDropActionChanged: dsDropActionChanged,
//                                                              dsDragExit: dsDragExit
//                                                              dragMouseMoved: dragMouseMoved
//                                                              ));
//   }
//   // only if one of the according optional parameters really has a value, we will create and add the listener object
//   if(dragMouseMoved != null) source.addDragSourceMotionListener(new NiceDragSourceListener(dragMouseMoved: dragMouseMoved));
//}


// --------------------------------------------------------------------------------------------------
// --------------------- ActionDecorators for java.awt.dnd.DragSourceContext -------------------------------
// --------------------------------- j2sk1.4.0 feature ----------------------------------------------
// --------------------------------------------------------------------------------------------------

void addDragSourceContextListeners(java.awt.dnd.DragSourceContext context, 
                                   DragSourceDropEvent ?-> void dsDragDropEnd = null,
                                   DragSourceDragEvent ?-> void dsDragEnter = null,
                                   DragSourceDragEvent ?-> void dsDragOver = null,
                                   DragSourceDragEvent ?-> void dsDropActionChanged = null,
                                   DragSourceEvent ?-> void dsDragExit = null
                                   )
{ 
   // only if one of the according optional parameters really has a value, we will create and add the listener object
   if(dsDragDropEnd != null ||
      dsDragEnter != null ||
      dsDragOver != null ||
      dsDropActionChanged != null ||
      dsDragExit != null
      )
   {
      context.addDragSourceListener(new NiceDragSourceListener(dsDragDropEnd: dsDragDropEnd,
                                                               dsDragEnter: dsDragEnter,
                                                               dsDragOver: dsDragOver,
                                                               dsDropActionChanged: dsDropActionChanged,
                                                               dsDragExit: dsDragExit
                                                               ));
   }
}

// --------------------------------------------------------------------------------------------------
// --------------------- ActionDecorators for java.awt.dnd.DropTarget -------------------------------
// --------------------------------- j2sk1.4.0 feature ----------------------------------------------
// --------------------------------------------------------------------------------------------------

void addDropTargetListeners(java.awt.dnd.DropTarget target, 
                            DropTargetDropEvent ?-> void dtDrop = null,
                            DropTargetDragEvent ?-> void dtDragEnter = null,
                            DropTargetDragEvent ?-> void dtDragOver = null,
                            DropTargetDragEvent ?-> void dtDropActionChanged = null,
                            DropTargetEvent ?-> void dtDragExit = null
                            )
{ 
   // only if one of the according optional parameters really has a value, we will create and add the listener object
   if(dtDrop != null ||
      dtDragEnter != null ||
      dtDragOver != null ||
      dtDropActionChanged != null ||
      dtDragExit != null
      )
   {
      target.addDropTargetListener(new NiceDropTargetListener(dtDrop: dtDrop,
                                                              dtDragEnter: dtDragEnter,
                                                              dtDragOver: dtDragOver,
                                                              dtDropActionChanged: dtDropActionChanged,
                                                              dtDragExit: dtDragExit
                                                              ));
   }
}

  
// --------------------------------------------------------------------------------------------------
// --------------------- ActionDecorators for java.awt.Component -------------------------------------------
// --------------------------------------------------------------------------------------------------

void addComponentListeners(java.awt.Component component, 
                           ?String propertyName = null,
                           ComponentEvent ?-> void componentHidden = null,
                           ComponentEvent ?-> void componentMoved = null,
                           ComponentEvent ?-> void componentResized = null,
                           ComponentEvent ?-> void componentShown = null,
                           FocusEvent ?-> void focusGained = null,
                           FocusEvent ?-> void focusLost = null,
                           HierarchyEvent ?-> void hierarchyAncestorMoved = null,
                           HierarchyEvent ?-> void hierarchyAncestorResized = null,
                           HierarchyEvent ?-> void hierarchyChanged = null,
                           InputMethodEvent ?-> void caretPositionChanged = null,
                           InputMethodEvent ?-> void inputMethodTextChanged = null,
                           KeyEvent ?-> void keyPressed = null,
                           KeyEvent ?-> void keyReleased = null,
                           KeyEvent ?-> void keyTyped = null, 
                           MouseEvent ?-> void mouseClicked = null,
                           MouseEvent ?-> void mouseEntered = null,
                           MouseEvent ?-> void mouseExited = null,
                           MouseEvent ?-> void mousePressed = null,
                           MouseEvent ?-> void mouseReleased = null,   
                           MouseEvent ?-> void mouseDragged = null,
                           MouseEvent ?-> void mouseMoved = null,
                           PropertyChangeEvent ?-> void propertyChange = null
//                         MouseWheelEvent ?-> void mouseWheelMoved = null            
                           ) 
{
	
// component.addMouseWheelListener(new NiceMouseWheelListener(mouseWheelMoved: mouseWheelMoved));   


   // only if one of the according optional parameters really has a value, we will create and add the listener object 

                                                                             
   if(hierarchyChanged != null) component.addHierarchyListener(new NiceHierarchyListener(hierarchyChanged: hierarchyChanged));

   // only if one of the according optional parameters really has a value, we will create and add the listener object
   if(componentHidden != null ||
      componentMoved != null ||
      componentResized != null ||
      componentShown != null
      )
   {   
      component.addComponentListener(new NiceComponentListener(componentHidden: componentHidden, 
                                                               componentMoved: componentMoved, 
                                                               componentResized: componentResized, 
                                                               componentShown: componentShown
                                                               ));
   }

   // only if one of the according optional parameters really has a value, we will create and add the listener object
   if(focusGained != null ||
      focusLost != null
      )
   {                                                                 
      component.addFocusListener(new NiceFocusListener(focusGained: focusGained, 
                                                       focusLost: focusLost
                                                       ));
   }
   

   // only if one of the according optional parameters really has a value, we will create and add the listener object
   if(hierarchyAncestorMoved != null ||
      hierarchyAncestorResized != null
      )
   {                                                         
      component.addHierarchyBoundsListener(new NiceHierarchyBoundsListener(hierarchyAncestorMoved: hierarchyAncestorMoved, 
                                                                           hierarchyAncestorResized: hierarchyAncestorResized
                                                                           ));
   }
   

   // only if one of the according optional parameters really has a value, we will create and add the listener object
   if(caretPositionChanged != null ||
      inputMethodTextChanged != null
      ) 
   {       
      component.addInputMethodListener(new NiceInputMethodListener(caretPositionChanged: caretPositionChanged, 
                                                                   inputMethodTextChanged: inputMethodTextChanged
                                                                   ));
   }
   

   // only if one of the according optional parameters really has a value, we will create and add the listener object
   if(keyPressed != null ||
      keyReleased != null ||
      keyTyped != null
      ) 
   {                                                                 
      component.addKeyListener(new NiceKeyListener(keyPressed: keyPressed, 
                                                   keyReleased: keyReleased, 
                                                   keyTyped: keyTyped
                                                   ));     
   }
   

   // only if one of the according optional parameters really has a value, we will create and add the listener object
   if(mouseClicked != null ||
      mouseEntered != null ||
      mouseExited != null ||
      mousePressed != null ||
      mouseReleased != null
      ) 
   {                                                
      component.addMouseListener(new NiceMouseListener(mouseClicked: mouseClicked, 
                                                       mouseEntered: mouseEntered, 
                                                       mouseExited: mouseExited, 
                                                       mousePressed: mousePressed, 
                                                       mouseReleased: mouseReleased
                                                       ));  
   }
   

   // only if one of the according optional parameters really has a value, we will create and add the listener object
   if(mouseDragged != null ||
      mouseMoved != null
      ) 
   {                                                      
      component.addMouseMotionListener(new NiceMouseMotionListener(mouseDragged: mouseDragged, 
                                                                   mouseMoved: mouseMoved
                                                                   ));    
   }
                                                                     
   if(propertyName != null && propertyChange != null) 
   {
      component.addPropertyChangeListener(propertyName,
                                          new NicePropertyChangeListener(propertyChange: propertyChange
                                          )); 
   } 
   else if(propertyName == null && propertyChange != null)
   {
      component.addPropertyChangeListener(new NicePropertyChangeListener(propertyChange: propertyChange));
   }	                                         
}                                                                                                                                       