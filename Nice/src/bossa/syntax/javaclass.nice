/**************************************************************************/
/*                                N I C E                                 */
/*             A high-level object-oriented research language             */
/*                        (c) Daniel Bonniot 2004                         */
/*                                                                        */
/*  This program is free software; you can redistribute it and/or modify  */
/*  it under the terms of the GNU General Public License as published by  */
/*  the Free Software Foundation; either version 2 of the License, or     */
/*  (at your option) any later version.                                   */
/*                                                                        */
/**************************************************************************/

package bossa.syntax;

import bossa.util.*;

/**
   A class definition which reflects an existing native java class.
   
   This is usefull when you want to add type parameters
   to an existing java class.
   
*/
public class JavaClass extends ClassImplementation
{
  TypeDefinition definition;
  LocatedString javaName;
  boolean ignoredRetyping = false;

  {
    this.lookup();
  }  

  /**
     This must be called in a first pass, before bytecode types are implicitely
     loaded, so that the retyping is taken into account.
  */
  private void lookup()
  {
    let classType = nice.tools.code.TypeImport.lookup(javaName);
    
    if (classType == null)
      {
	if (!definition.inInterfaceFile())
          User.warning(javaName, javaName + " was not found in classpath so this retyping is ignored");

	ignoredRetyping = true;
	return;
      }

    if (! (classType instanceof gnu.bytecode.ClassType))
       throw User.error(definition, javaName + " is a primitive type");

    // Check that we don't give a wrong arity to a generic class.
    int nativeArity = classType.getArity();
    
    if (nativeArity != -1 && nativeArity != definition.getTC().arity())
      User.error(definition, javaName + " has " + nativeArity + " type parameters");
    
    let old = setTypeConstructorForJavaClass
		(definition.getTC(), classType, definition.compilation());

    if (old != null)
      User.error(definition, javaName + " was already associated with the Nice class " + old);
    
    definition.setJavaType(classType);
  }

  resolveClass()
  {
    if (ignoredRetyping)
      return;

    fetchMethods(definition.getTC(), cast(definition.getJavaType()));
  }

  printInterface(s)
  {
    s.print(" = native " + javaName.toString() + ";\n");
  }
}

/**
 * @return null, except if javaName already had an
 * associated TypeConstructor in which case it is returned.
 */
?mlsub.typing.TypeConstructor setTypeConstructorForJavaClass
    (mlsub.typing.TypeConstructor tc, gnu.bytecode.Type type,
     bossa.modules.Compilation compilation) =
    	compilation.javaTypeConstructors.put(type, tc);

let gnu.bytecode.Type[] blackListClass = [
	gnu.bytecode.ClassType.make("java.lang.Object")];

let gnu.bytecode.Type[] blackListInterface = [
	gnu.bytecode.ClassType.make("java.io.Serializable"),
        gnu.bytecode.ClassType.make("java.lang.Cloneable"),
        gnu.bytecode.ClassType.make("java.lang.Comparable")];
  
boolean excludedClass(gnu.bytecode.Type[] blackList, gnu.bytecode.Type classType)
{	
  for (int i=0; i<blackList.length; i++)
    if (classType==blackList[i])
	  return true;
  return false;
}
      
boolean excludedInterface(mlsub.typing.TypeConstructor itf)
{
  ?gnu.bytecode.Type t = nice.tools.code.Types.get(itf);
  if (t == null)
    return false;

  return excludedClass(blackListInterface, t);
}

mlsub.typing.TypeConstructor createJavaType
  (String className,
   gnu.bytecode.Type javaType,
   bossa.modules.Compilation compilation)
{
  if (bossa.util.Debug.javaTypes)
    bossa.util.Debug.println("Registering java class "+className);

  // as the tc is not introduced, it should not be set instantiable
  // (thus used at link test with an error)
  // these late TCs should be avoided
  boolean instantiable = !mlsub.typing.Typing.isInRigidContext() && instantiable(javaType);
      
  let res = new mlsub.typing.TypeConstructor(className, null, instantiable, true);

  let old = compilation.javaTypeConstructors.put(javaType, res);
  if (old != null)
    User.error(old + " was already associated with the Nice class " + old);

  nice.tools.code.Types.set(res, javaType);
    
  if(mlsub.typing.Typing.isInRigidContext())
    // We should not add new classes at this point.
    // It doesn't matter, as this type is not used explicitely.
  {
    Internal.warning(className + " added late");

    setArity(res, 0);
    return res;
  }

  mlsub.typing.Typing.introduce(res);
    
  // Recursive search for java super-classes
  if (javaType instanceof gnu.bytecode.ClassType)
    {
      let classType = javaType;
	
      int arity = classType.getArity();
      if (arity != -1)
        setArity(res, classType.getArity());

      ?gnu.bytecode.ClassType superClass = classType.getSuperclass();
	
      if (superClass!=null && !(excludedClass(blackListClass, superClass)))
	{
	  try {
            let superTC = nice.tools.code.Types.typeConstructor(superClass);
	    mlsub.typing.Typing.initialLeq(res, superTC);
	  }
	  catch(mlsub.typing.TypingEx e) {
	    Internal.warning("Invalid java super-class "+superClass+" for "+className);
	  }
          catch(nice.tools.code.Types.NotIntroducedClassException e) {
            Internal.warning(res + " extends " + superClass + ", which is not usable");
          }
	}

      gnu.bytecode.ClassType[?] itfs = null;
      try {
        itfs = classType.getInterfaces();
      }
      catch(NoClassDefFoundError ex) {
        User.warning("Interface " + ex.getMessage() + 
	       " implemented by " + classType.getName() + 
	       " was not found in classpath");
      }
	
      if (itfs!=null)
	for (gnu.bytecode.ClassType itf : itfs)
	  {
	    if (excludedClass(blackListInterface, itf))
	      continue;
	    
            try {
              let superTC = nice.tools.code.Types.typeConstructor(itf);
              mlsub.typing.Typing.initialLeq(res, superTC);
	    }
	    catch(mlsub.typing.TypingEx e) {
              Internal.warning(res+" cannot implement " + itf /* + ": " + e.toString()*/);
            }
            catch(nice.tools.code.Types.NotIntroducedClassException e) {
              Internal.warning(res + " implements " + itf + ", which is not usable");
            }
	  }

      // The default arity is 0.
      if (res.getKind() == null)
        setArity(res, 0);

      if (classType.isFinal())
	res.setMinimal();
    }

  if (javaType instanceof gnu.bytecode.ClassType)
    fetchMethods(res, javaType);

  return res;
}

void setArity(mlsub.typing.TypeConstructor tc, int arity)
{
  try {
    let variance = arity == 0 ? 
	  mlsub.typing.Variance.empty() : mlsub.typing.Variance.make(new int[arity]);
    mlsub.typing.lowlevel.Engine.setKind(tc, variance.getConstraint());
  }
  catch(mlsub.typing.lowlevel.Unsatisfiable ex) {
    User.error("Java class " + tc + " cannot have arity " + arity);
  }
}

boolean instantiable(gnu.bytecode.Type javaType)
{
  if (!(javaType instanceof gnu.bytecode.ClassType))
    return false;

  return (javaType.getModifiers() 
    & (gnu.bytecode.Access.ABSTRACT|
       gnu.bytecode.Access.INTERFACE)) == 0;
}

?mlsub.typing.TypeConstructor lookupJavaClass(String className, ?Location loc)
{
  let classType = nice.tools.code.TypeImport.lookup(className, loc);

  if (classType == null)
    return null;

  let compilation = Node.compilation;
  
  if (compilation.javaTypeConstructors.containsKey(classType))
    return compilation.javaTypeConstructors.get(classType);

  return createJavaType(classType.getName(), classType, compilation);
}
