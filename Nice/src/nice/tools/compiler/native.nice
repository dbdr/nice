/**************************************************************************/
/*                                N I C E                                 */
/*             A high-level object-oriented research language             */
/*                        (c) Daniel Bonniot 2002                         */
/*                                                                        */
/*  This program is free software; you can redistribute it and/or modify  */
/*  it under the terms of the GNU General Public License as published by  */
/*  the Free Software Foundation; either version 2 of the License, or     */
/*  (at your option) any later version.                                   */
/*                                                                        */
/**************************************************************************/

package nice.tools.compiler;

/**
   Produce native programs if an external native compiler is available.
   Curently interfaces with gcj.

   @version $Date$
   @author Daniel Bonniot (bonniot@users.sourceforge.net)
 */

import java.io.*;

void produceNativeProgram(?String nativeCompiler, String pkg, 
			  String output, String jar)
{
  compileWithGcj(nativeCompiler, pkg, output, jar);
}

void compileWithGcj(?String gcj, String pkg, String output, String jar)
{
  if (gcj == null)
    {
      fail("gcj was not found in the path");
      return;
    }

  try{
    Process p = Runtime.getRuntime().exec
      ([gcj, 
	"--classpath=", // We set the classpath to null to ignore nice.jar
	"--main=" + pkg + ".fun", 
        "-o", output, jar ]);
    let CharArrayWriter out = new CharArrayWriter();
    let exitValue = waitFor(p, out); 
    if (exitValue != 0)
      {
	fail();

	// Print the output of the process
	let in = new BufferedReader(new CharArrayReader(out.toCharArray));
	try {
	  for (?String line = in.readLine(); line != null; 
	       line = in.readLine())
	    println(line);
	}
	catch(IOException ex) {}
      }
  }
  catch(java.io.IOException e) {
    fail(e.getMessage());
  }
  catch(java.lang.SecurityException e) {
    fail(e.getMessage());
  }
}

void fail(?String msg = null)
{
  print("Native compilation with gcj failed");
  if (msg != null)
    println(": " + msg);
  else
    java.lang.System.out.println();
}

int waitFor(Process p, Writer w)
{
  let out = new BufferedReader(new InputStreamReader(p.getInputStream()));
  let err = new BufferedReader(new InputStreamReader(p.getErrorStream()));

  let printer = new PrintWriter(w);

  let consumeOut = thread(()=> {
    for (?String line = out.readLine(); line != null; line = out.readLine())
      printer.println(line);
  });

  let consumeErr = thread(()=> {
    for (?String line = err.readLine(); line != null; line = err.readLine())
      printer.println(line);
  });

  consumeOut.start();
  consumeErr.start();

  consumeOut.join();
  consumeErr.join();

  return p.waitFor();
}
