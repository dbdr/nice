/// FAIL
  /// Toplevel
  class A {
    void m();
  }

/// PASS
  /// Toplevel
abstract class X {}

abstract class A
{
  void m(X);
}

class B extends A 
{
  m(x) {}
}

class C extends A
{
  // It is OK not to implement m(@C,_), since X has no concrete instance.
}

/// FAIL
  /// Toplevel
// This fails since put is not implemented. It should also fail *fast*,
// even though you can imagine many instances for the type.
interface _Map<K, V> {}

<K, V0, V | V <: ?V0> ?V0 put(_Map<K, V>, V, K);

class MapWrapper<K, V> implements _Map<K, V> {}

/// FAIL
  /// TOPLEVEL
  class A { 
    void fA() {} // fA is a function
  }

  // Try to implement a function. This should fail gracefully.
  /*/// FAIL HERE */ fA(x@A) {}

/// PASS
  /// COMMENT: This tests implementation of a method whose implicit 'this'
  /// COMMENT: argument is a parameterized class, and the type parameter
  /// COMMENT: does not occur explicitely in the type.
  /// COMMENT: (This was a really "interesting" bug to find!)
  /// Toplevel

interface A<T>
{
  void doSomething();
}

class B<T> implements A<T> { B<T> bfield; }

doSomething(b@B) { b.bfield; }

/// FAIL
  /// Toplevel
class First {
  void paint(java.awt.Graphics g);
}
paint(p@java.awt.Component, g) {
  (notNull (g)).drawString("I love java", 20, 20);
}

/// FAIL
  /// Toplevel
  interface I{}
 
  void foo(I);
  foo(#I){}

/// FAIL
  /// Toplevel
  abstract class X {}
 
  void foo(X);
  foo(#X){}

/// FAIL
  /// Toplevel
class A {}
class B extends A{}

void foo(B);
foo(@A){}

/// PASS
  /// Toplevel
  abstract class A<T> {} 
  class B<T> extends A<T> { 
  A<T> cons; 
  } 
  class C<T> extends A<T> { 
  A<T> cons; 
  } 
  <Any T> A<T> j(A<A<T>>); 
  j(b@B) = new B(cons: j(b.cons)); 
  j(c@C) = new C(cons: j(c.cons)); 

/// FAIL
  /// Toplevel
  class A<T> {} 
  class B<T> extends A<T> {} 
  <T> void j(A<A<T>>); 

/// FAIL
  /// Toplevel
  void f(List<Array<String>>);

/// PASS
  f(null);
  /// Toplevel
class A { int i; }
int f(?A);
f(x@A) = x.i;
f(null) = 0;

/// PASS
  assert foo(new Object());
  assert !foo("");
  /// Toplevel
boolean foo(Object o);
foo(Object o) = true;
foo(String s) = false;
