/// PASS
  B b = new B();
  assert foo(b);

  A a = b;
  assert foo(a);
  /// Toplevel
class A {}
class B extends A {}

boolean foo(A) = false;
boolean foo(B x); foo(B x) = true;

/// PASS
  B b = new B();
  assert foo(b);

  A a = b;
  assert foo(a);
  /// Toplevel
class A {}
class B extends A {}

boolean foo(A) = false;
boolean foo(B) = true;

/// PASS
  /// package a
  /// Toplevel
class A {}
class B extends A {}

boolean foo(A) = false;
boolean foo(B x); foo(B x) = true;
  /// package b import a
  B b = new B();
  assert foo(b);

  A a = b;
  assert foo(a);

/// PASS
  /// package b import a
  /// Toplevel
class B extends A {}
boolean foo(B); foo(B x) = true;
  /// package a import b
  B b = new B();
  assert foo(b);

  A a = b;
  assert foo(a);
  /// Toplevel
class A {}

boolean foo(A) = false;

/// PASS
  /// package a import b
  B b = new B();
  assert foo(b);

  A a = b;
  assert foo(a);
  /// Toplevel
class A {}

boolean foo(A) = false;
  /// package b import a
  /// Toplevel
class B extends A {}
override boolean foo(B); foo(B x) = true;

/// PASS
  /// package a
  /// Toplevel
class A {}
class B extends A {}

boolean foo(B,B); foo(B x, B y) = true;
  /// package b import a
  B b = new B();
  assert foo(b,b);

  A a = b;
  assert foo(a,a);
  /// TOPLEVEL
boolean foo(A,A) = false;

/// PASS
  /// package a
  /// Toplevel
class A {}
class B extends A {}

boolean foo(A,A) = false;
boolean foo(B,B); foo(B x, B y) = true;
  /// package b import a
  C c = new C();
  B b = c;
  A a = c;
  assert !foo(a,a);
  assert !foo(b,b);
  assert !foo(c,c);
  /// TOPLEVEL
class C extends B {}
foo(C x, C y) = false;

/// PASS
  A a = new C();
  B b = new C();
  assert a.foo();
  assert b.foo();
  /// Toplevel
interface A {}
interface B{}
class C implements A,B {}
boolean foo(A a) = false;
boolean foo(B b) = false;
boolean foo(C c) = true;

/// PASS
  /// Toplevel
class A{}
<T> void foo(A,Object) {}
<A T> void foo(T,String) {}

/// PASS
  /// Toplevel
void foo(Throwable,Object) {}
<Throwable T> void foo(T,String); foo(x, String s) {}
foo(RuntimeException re, String) {}

/// PASS
  /// Toplevel
class A{}
class B extends A {}
class Z {}

void foo(A,?Z) {}
void foo(A,Z) {}
foo(B x,z) {}

/// PASS
  /// Toplevel
class A{}
class B extends A {}

void foo(A,int ?-> int) {}
void foo(A,int->int) {}
foo(B x,z) {}

/// PASS
  /// Toplevel
class A{}
class B extends A {}
void foo(A x,int t) {}
void foo(B x,int t) {}

/// PASS
  assert  foo(new A(), int x => x);
  assert !foo(new A(), int x => 0);
  /// Toplevel
class A{}
class B extends A {}
boolean foo(A x,int->int t) = true;
boolean foo(A x,int->byte t) = false;

/// FAIL
  /// Toplevel
class A{}
class B extends A {}
B foo(A x) = new B();
/*/// FAIL HERE*/ A foo(B x) = new A();

/// PASS
  A a = new B();
  foo(a);
  /// Toplevel
abstract class A {}
class B extends A {}
<A T> T foo(T x) { throw new Error(); }
<B T> T foo(T x) = x;

/// PASS
  /// Toplevel
abstract class A {}
abstract class B {} // B does NOT extend A
<A T> T foo(T x);
<B T> A foo(T x);

/// FAIL
  /// Toplevel
abstract class A {}
abstract class B extends A {}
<A T> T foo(T x);
<B T> /*/// FAIL HERE*/ A foo(T x);

/// FAIL
  /// Toplevel
abstract class A {}
abstract class B extends A {}
<A T1, B U1> U1 foo(A a, T1 t, U1 u);
<A T2, B U2> /*/// FAIL HERE*/ T2 foo(B b, T2 t, U2 u);

/// PASS
  A<String> a = new B();
  foo(a, a);
  /// Toplevel
abstract class A<T> {}
class B<T> extends A<T> {}

<T, T1, T2 | T1 <: T, T2 <: T> A<T> foo(A<T1> a1, A<T2> a2);
<U, U1, U2 | U1 <: U, U2 <: U> B<U> foo(B<U1> a1, B<U2> a2) = new B();

/// FAIL
  /// Toplevel
class A {}
class B {}
void foo(A a) {}
override void foo(B b) {}

/// PASS
  /// Toplevel
<T> void foo(T x) {}
override void foo(String s) {}

/// PASS
  List<String> list = new ArrayList();
  list.add("abc");
  list.foo();
  /// Toplevel
<T> void foo(Collection<T> list) {}
// This is NOT an override
void foo(List<int> list)
{
  int i = list[0]+1;
}

/// FAIL
  /// Toplevel
<T> void foo(Collection<T> list) {}
// This is NOT an override
override void foo(List<int> list) {}

/// FAIL
  /// Toplevel
class A<+T> {}
void foo(A<Object> x) {}
// This is NOT an override
override void foo(A<String> x) {}

/// PASS
  /// package a
  /// Toplevel
  boolean foo(?int x) = false;
  override boolean foo(int x) = true;
  /// package b import a
  assert ! foo(null);
  assert foo(5);

/// PASS bug
  /// Toplevel
  class A {}
  class B extends A {}
  void foo(?A x) {}
  override void foo(?B x) {}
