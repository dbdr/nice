
/**************************************************************************/
/*                                                                        */
/*  This program is free software; you can redistribute it and/or modify  */
/*  it under the terms of the GNU General Public License as published by  */
/*  the Free Software Foundation; either version 2 of the License, or     */
/*  (at your option) any later version.                                   */
/*                                                                        */
/**************************************************************************/


package nice.ui.common.types.swing;

// all imports for this package
// are defined in this file

import java.beans.*;
import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import javax.swing.event.*;
import javax.swing.text.*;
import javax.swing.tree.*;
import javax.swing.border.*;
import javax.swing.plaf.*;


/**
 * EVENT INTERFACES SECTION
 */

// interface AncestorListener
void ancestorAdded(AncestorListener,AncestorEvent)
  = native void AncestorListener.ancestorAdded(AncestorEvent);
void ancestorMoved(AncestorListener,AncestorEvent)
  = native void AncestorListener.ancestorMoved(AncestorEvent);
void ancestorRemoved(AncestorListener,AncestorEvent)
  = native void AncestorListener.ancestorRemoved(AncestorEvent);

// interface CaretListener
void caretUpdate(CaretListener, CaretEvent)
  = native void CaretListener.caretUpdate(CaretEvent);

// interface CellEditorListener
void editingCanceled(CellEditorListener, ChangeEvent)
  = native void CellEditorListener.editingCanceled(ChangeEvent);
void editingStopped(CellEditorListener, ChangeEvent)
  = native void CellEditorListener.editingStopped(ChangeEvent);

// interface ChangeListener
void stateChanged(ChangeListener, ChangeEvent)
  = native void ChangeListener.stateChanged(ChangeEvent);

// interface DocumentListener
void changedUpdate(DocumentListener, DocumentEvent)
  = native void DocumentListener.changedUpdate(DocumentEvent);
void insertUpdate(DocumentListener, DocumentEvent)
  = native void DocumentListener.insertUpdate(DocumentEvent);
void removeUpdate(DocumentListener, DocumentEvent)
  = native void DocumentListener.removeUpdate(DocumentEvent);

// interface HyperlinkListener
void hyperlinkUpdate(HyperlinkListener, HyperlinkEvent)
  = native void HyperlinkListener.hyperlinkUpdate(HyperlinkEvent);

// interface InternalFrameListener
void internalFrameActivated(InternalFrameListener, InternalFrameEvent)
  = native void InternalFrameListener.internalFrameActivated(InternalFrameEvent);
void internalFrameClosed(InternalFrameListener, InternalFrameEvent)
  = native void InternalFrameListener.internalFrameClosed(InternalFrameEvent);
void internalFrameClosing(InternalFrameListener, InternalFrameEvent)
  = native void InternalFrameListener.internalFrameClosing(InternalFrameEvent);
void internalFrameDeactivated(InternalFrameListener, InternalFrameEvent)
  = native void InternalFrameListener.internalFrameDeactivated(InternalFrameEvent);
void internalFrameDeiconified(InternalFrameListener, InternalFrameEvent)
  = native void InternalFrameListener.internalFrameDeiconified(InternalFrameEvent);
void internalFrameIconified(InternalFrameListener, InternalFrameEvent)
  = native void InternalFrameListener.internalFrameIconified(InternalFrameEvent);
void internalFrameOpened(InternalFrameListener, InternalFrameEvent)
  = native void InternalFrameListener.internalFrameOpened(InternalFrameEvent);

// interface ListDataListener
void contentsChanged(ListDataListener, ListDataEvent)
  = native void ListDataListener.contentsChanged(ListDataEvent);
void intervalAdded(ListDataListener, ListDataEvent)
  = native void ListDataListener.intervalAdded(ListDataEvent);
void intervalRemoved(ListDataListener, ListDataEvent)
  = native void ListDataListener.intervalRemoved(ListDataEvent);

// interface ListSelectionListener
void valueChanged(ListSelectionListener, ListSelectionEvent)
  = native void ListSelectionListener.valueChanged(ListSelectionEvent);

// interface MenuDragMouseListener
void menuDragMouseDragged(MenuDragMouseListener, MenuDragMouseEvent)
  = native void MenuDragMouseListener.menuDragMouseDragged(MenuDragMouseEvent);
void menuDragMouseEntered(MenuDragMouseListener, MenuDragMouseEvent)
  = native void MenuDragMouseListener.menuDragMouseEntered(MenuDragMouseEvent);
void menuDragMouseExited(MenuDragMouseListener, MenuDragMouseEvent)
  = native void MenuDragMouseListener.menuDragMouseExited(MenuDragMouseEvent);
void menuDragMouseReleased(MenuDragMouseListener, MenuDragMouseEvent)
  = native void MenuDragMouseListener.menuDragMouseReleased(MenuDragMouseEvent);

// interface MenuKeyListener
void menuKeyPressed(MenuKeyListener, MenuKeyEvent)
  = native void MenuKeyListener.menuKeyPressed(MenuKeyEvent);
void menuKeyReleased(MenuKeyListener, MenuKeyEvent)
  = native void MenuKeyListener.menuKeyReleased(MenuKeyEvent);
void menuKeyTyped(MenuKeyListener, MenuKeyEvent)
  = native void MenuKeyListener.menuKeyTyped(MenuKeyEvent);

// interface MenuListener
void menuCanceled(MenuListener, MenuEvent)
  = native void MenuListener.menuCanceled(MenuEvent);
void menuDeselected(MenuListener, MenuEvent)
  = native void MenuListener.menuDeselected(MenuEvent);
void menuSelected(MenuListener, MenuEvent)
  = native void MenuListener.menuSelected(MenuEvent);

// interface PopupMenuListener
void popupMenuCanceled(PopupMenuListener, PopupMenuEvent)
  = native void PopupMenuListener.popupMenuCanceled(PopupMenuEvent);
void popupMenuWillBecomeInvisible(PopupMenuListener, PopupMenuEvent)
  = native void PopupMenuListener.popupMenuWillBecomeInvisible(PopupMenuEvent);
void popupMenuWillBecomeVisible(PopupMenuListener, PopupMenuEvent)
  = native void PopupMenuListener.popupMenuWillBecomeVisible(PopupMenuEvent);

// interface TableColumnModelListener
void columnAdded(TableColumnModelListener, TableColumnModelEvent)
  = native void TableColumnModelListener.columnAdded(TableColumnModelEvent);
void columnMarginChanged(TableColumnModelListener, ChangeEvent)
  = native void TableColumnModelListener.columnMarginChanged(ChangeEvent);
void columnMoved(TableColumnModelListener, TableColumnModelEvent)
  = native void TableColumnModelListener.columnMoved(TableColumnModelEvent);
void columnRemoved(TableColumnModelListener, TableColumnModelEvent)
  = native void TableColumnModelListener.columnRemoved(TableColumnModelEvent);
void columnSelectionChanged(TableColumnModelListener, ListSelectionEvent)
  = native void TableColumnModelListener.columnSelectionChanged(ListSelectionEvent);

// interface TableModelListener
void tableChanged(TableModelListener, TableModelEvent)
  = native void TableModelListener.tableChanged(TableModelEvent);

// interface TreeExpansionListener
void treeCollapsed(TreeExpansionListener, TreeExpansionEvent)
  = native void TreeExpansionListener.treeCollapsed(TreeExpansionEvent);
void treeExpanded(TreeExpansionListener, TreeExpansionEvent)
  = native void TreeExpansionListener.treeExpanded(TreeExpansionEvent);

// interface TreeModelListener
void treeNodesChanged(TreeModelListener, TreeModelEvent)
  = native void TreeModelListener.treeNodesChanged(TreeModelEvent);
void treeNodesInserted(TreeModelListener, TreeModelEvent)
  = native void TreeModelListener.treeNodesInserted(TreeModelEvent);
void treeNodesRemoved(TreeModelListener, TreeModelEvent)
  = native void TreeModelListener.treeNodesRemoved(TreeModelEvent);
void treeStructureChanged(TreeModelListener, TreeModelEvent)
  = native void TreeModelListener.treeStructureChanged(TreeModelEvent);

// interface TreeSelectionListener
void valueChanged(TreeSelectionListener, TreeSelectionEvent)
  = native void TreeSelectionListener.valueChanged(TreeSelectionEvent);

// interface TreeWillExpandListener
void treeWillCollapse(TreeWillExpandListener, TreeExpansionEvent)
  = native void TreeWillExpandListener.treeWillCollapse(TreeExpansionEvent);
void treeWillExpand(TreeWillExpandListener, TreeExpansionEvent)
  = native void TreeWillExpandListener.treeWillExpand(TreeExpansionEvent);

// interface UndoableEditListener
void undoableEditHappened(UndoableEditListener, UndoableEditEvent)
  = native void UndoableEditListener.undoableEditHappened(UndoableEditEvent);




/**
 * INTERFACES SECTION
 */

// interface Action
Object getValue(Action, String)
  = native Object Action.getValue(String);
void putValue(Action, String, Object)
  = native void Action.putValue(String, Object);


// interface BoundedRangeModel
void addChangeListener(BoundedRangeModel, ChangeListener)
  = native void BoundedRangeModel.addChangeListener(ChangeListener);
void removeChangeListener(BoundedRangeModel, ChangeListener)
  = native void BoundedRangeModel.removeChangeListener(ChangeListener);


// interface ButtonModel 
void addActionListener(ButtonModel, ActionListener)
  = native void ButtonModel.addActionListener(ActionListener);
void addChangeListener(ButtonModel, ChangeListener)
  = native void ButtonModel.addChangeListener(ChangeListener);
void removeActionListener(ButtonModel, ActionListener)
  = native void ButtonModel.removeActionListener(ActionListener);
void removeChangeListener(ButtonModel, ChangeListener)
  = native void ButtonModel.removeChangeListener(ChangeListener);
void setActionCommand(ButtonModel, String)
  = native void ButtonModel.setActionCommand(String);
void setGroup(ButtonModel, ButtonGroup)
  = native void ButtonModel.setGroup(ButtonGroup);


// interface CellEditor 
void addCellEditorListener(CellEditor, CellEditorListener)
  = native void CellEditor.addCellEditorListener(CellEditorListener);
void removeCellEditorListener(CellEditor, CellEditorListener)
  = native void CellEditor.removeCellEditorListener(CellEditorListener);
Object getCellEditorValue(CellEditor)
  = native Object CellEditor.getCellEditorValue();
boolean isCellEditable(CellEditor, EventObject)
  = native boolean CellEditor.isCellEditable(EventObject);
boolean shouldSelectCell(CellEditor, EventObject)
  = native boolean CellEditor.shouldSelectCell(EventObject);


// interface ComboBoxEditor
void addActionListener(ComboBoxEditor, ActionListener)
  = native void ComboBoxEditor.addActionListener(ActionListener);
void removeActionListener(ComboBoxEditor, ActionListener)
  = native void ComboBoxEditor.removeActionListener(ActionListener);
Component getEditorComponent(ComboBoxEditor)
  = native Component ComboBoxEditor.getEditorComponent();
Object getItem(ComboBoxEditor)
  = native Object ComboBoxEditor.getItem();
void setItem(ComboBoxEditor, Object)
  = native void ComboBoxEditor.setItem(Object);


// interface ComboBoxModel 



// interface DesktopManager 
void activateFrame(DesktopManager, JInternalFrame)
  = native void DesktopManager.activateFrame(JInternalFrame);
void beginDraggingFrame(DesktopManager, JComponent)
  = native void DesktopManager.beginDraggingFrame(JComponent);
void beginResizingFrame(DesktopManager, JComponent, int)
  = native void DesktopManager.beginResizingFrame(JComponent, int);
void closeFrame(DesktopManager, JInternalFrame)
  = native void DesktopManager.closeFrame(JInternalFrame);
void deactivateFrame(DesktopManager, JInternalFrame)
  = native void DesktopManager.deactivateFrame(JInternalFrame);
void deiconifyFrame(DesktopManager, JInternalFrame)
  = native void DesktopManager.deiconifyFrame(JInternalFrame);
void dragFrame(DesktopManager, JComponent, int, int)
  = native void DesktopManager.dragFrame(JComponent, int, int);
void endDraggingFrame(DesktopManager, JComponent)
  = native void DesktopManager.endDraggingFrame(JComponent);
void endResizingFrame(DesktopManager, JComponent)
  = native void DesktopManager.endResizingFrame(JComponent);
void iconifyFrame(DesktopManager, JInternalFrame)
  = native void DesktopManager.iconifyFrame(JInternalFrame);
void maximizeFrame(DesktopManager, JInternalFrame)
  = native void DesktopManager.maximizeFrame(JInternalFrame);
void minimizeFrame(DesktopManager, JInternalFrame)
  = native void DesktopManager.minimizeFrame(JInternalFrame);
void openFrame(DesktopManager, JInternalFrame)
  = native void DesktopManager.openFrame(JInternalFrame);
void resizeFrame(DesktopManager, JComponent, int, int, int, int)
  = native void DesktopManager.resizeFrame(JComponent, int, int, int, int);
void setBoundsForFrame(DesktopManager, JComponent, int, int, int, int)
  = native void DesktopManager.setBoundsForFrame(JComponent, int, int, int, int);


// interface Icon 
void paintIcon(Icon, Component, Graphics, int, int)
  = native void Icon.paintIcon(Component, Graphics, int, int);


// interface ListCellRenderer
Component getListCellRendererComponent(ListCellRenderer, JList, Object, int, boolean, boolean)
  = native Component ListCellRenderer.getListCellRendererComponent(JList, Object, int, boolean, boolean);


// interface ListModel 
void addListDataListener(ListModel, ListDataListener)
  = native void ListModel.addListDataListener(ListDataListener);
void removeListDataListener(ListModel, ListDataListener)
  = native void ListModel.removeListDataListener(ListDataListener);
Object getElementAt(ListModel, int)
  = native Object ListModel.getElementAt(int);


// interface ListSelectionModel
void addListSelectionListener(ListSelectionModel, ListSelectionListener)
  = native void ListSelectionModel.addListSelectionListener(ListSelectionListener);
void removeListSelectionListener(ListSelectionModel, ListSelectionListener)
  = native void ListSelectionModel.removeListSelectionListener(ListSelectionListener);


// interface MenuElement 
Component getComponent(MenuElement)
  = native Component MenuElement.getComponent();
MenuElement[] getSubElements(MenuElement)
  = native MenuElement[] MenuElement.getSubElements();
void processKeyEvent(MenuElement, KeyEvent, MenuElement[], MenuSelectionManager)
  = native void MenuElement.processKeyEvent(KeyEvent, MenuElement[], MenuSelectionManager);
void processMouseEvent(MenuElement, MouseEvent, MenuElement[], MenuSelectionManager)
  = native void MenuElement.processMouseEvent(MouseEvent, MenuElement[], MenuSelectionManager);


// interface MutableComboBoxModel
void addElement(MutableComboBoxModel, Object)
  = native void MutableComboBoxModel.addElement(Object);
void insertElementAt(MutableComboBoxModel, Object, int)
  = native void MutableComboBoxModel.insertElementAt(Object, int);
void removeElement(MutableComboBoxModel, Object)
  = native void MutableComboBoxModel.removeElement(Object);


// interface Renderer
Component getComponent(Renderer)
  = native Component Renderer.getComponent();
void setValue(Renderer, Object, boolean)
  = native void Renderer.setValue(Object, boolean);


// interface RootPaneContainer 
Container getContentPane(RootPaneContainer)
  = native Container RootPaneContainer.getContentPane();
Component getGlassPane(RootPaneContainer)
  = native Component RootPaneContainer.getGlassPane();
JLayeredPane getLayeredPane(RootPaneContainer)
  = native JLayeredPane RootPaneContainer.getLayeredPane();
JRootPane getRootPane(RootPaneContainer)
  = native JRootPane RootPaneContainer.getRootPane();
void setContentPane(RootPaneContainer, Container)
  = native void RootPaneContainer.setContentPane(Container);
void setGlassPane(RootPaneContainer, Component)
  = native void RootPaneContainer.setGlassPane(Component);
void setLayeredPane(RootPaneContainer, JLayeredPane)
  = native void RootPaneContainer.setLayeredPane(JLayeredPane);


// interface Scrollable 
Dimension getPreferredScrollableViewportSize(Scrollable)
  = native Dimension Scrollable.getPreferredScrollableViewportSize();
int getScrollableBlockIncrement(Scrollable, Rectangle, int, int)
  = native int Scrollable.getScrollableBlockIncrement(Rectangle, int, int);
int getScrollableUnitIncrement(Scrollable, Rectangle, int, int)
  = native int Scrollable.getScrollableUnitIncrement(Rectangle, int, int);


// interface ScrollPaneConstants 



// interface SingleSelectionModel 
void addChangeListener(SingleSelectionModel, ChangeListener)
  = native void SingleSelectionModel.addChangeListener(ChangeListener);
void removeChangeListener(SingleSelectionModel, ChangeListener)
  = native void SingleSelectionModel.removeChangeListener(ChangeListener);


//JDK1.4  // interface SpinnerModel 
//JDK1.4  void addChangeListener(SpinnerModel, ChangeListener)
//JDK1.4    = native void SpinnerModel.addChangeListener(ChangeListener);
//JDK1.4  void removeChangeListener(SpinnerModel, ChangeListener)
//JDK1.4    = native void SpinnerModel.removeChangeListener(ChangeListener);
//JDK1.4  void setValue(SpinnerModel, Object)
//JDK1.4    = native void SpinnerModel.setValue(Object);



/**
 * CLASSES SECTION
 */

// class JComponent

// static methods
boolean isLightweightComponent(Component)
  = native boolean JComponent.isLightweightComponent(Component);
// non-static methods
void addAncestorListener(JComponent, AncestorListener)
  = native void JComponent.addAncestorListener(AncestorListener);
void removeAncestorListener(JComponent, AncestorListener)
  = native void JComponent.removeAncestorListener(AncestorListener);
void addVetoableChangeListener(JComponent, VetoableChangeListener)
  = native void JComponent.addVetoableChangeListener(VetoableChangeListener);
void removeVetoableChangeListener(JComponent, VetoableChangeListener)
  = native void JComponent.removeVetoableChangeListener(VetoableChangeListener);
void computeVisibleRect(JComponent, Rectangle)
  = native void JComponent.computeVisibleRect(Rectangle);
JToolTip createToolTip(JComponent)
  = native JToolTip JComponent.createToolTip();
void firePropertyChange(JComponent, String, byte, byte)
  = native void JComponent.firePropertyChange(String, byte, byte);
void firePropertyChange(JComponent, String, char, char)
  = native void JComponent.firePropertyChange(String, char, char);
void firePropertyChange(JComponent, String, double, double)
  = native void JComponent.firePropertyChange(String, double, double);
void firePropertyChange(JComponent, String, float, float)
  = native void JComponent.firePropertyChange(String, float, float);
void firePropertyChange(JComponent, String, int, int)
  = native void JComponent.firePropertyChange(String, int, int);
void firePropertyChange(JComponent, String, long, long)
  = native void JComponent.firePropertyChange(String, long, long);
void firePropertyChange(JComponent, String, short, short)
  = native void JComponent.firePropertyChange(String, short, short);
void fireVetoableChange(JComponent, String, Object, Object)
  = native void JComponent.fireVetoableChange(String, Object, Object);
ActionListener getActionForKeyStroke(JComponent, KeyStroke)
  = native ActionListener JComponent.getActionForKeyStroke(KeyStroke);
ActionMap getActionMap(JComponent)
  = native ActionMap JComponent.getActionMap();
?Object getClientProperty(JComponent, Object)
  = native Object JComponent.getClientProperty(Object);
Graphics getComponentGraphics(JComponent, Graphics)
  = native Graphics JComponent.getComponentGraphics(Graphics);
int getConditionForKeyStroke(JComponent, KeyStroke)
  = native int JComponent.getConditionForKeyStroke(KeyStroke);
InputMap getInputMap(JComponent)
  = native InputMap JComponent.getInputMap();
InputMap getInputMap(JComponent, int)
  = native InputMap JComponent.getInputMap(int);
InputVerifier getInputVerifier(JComponent)
  = native InputVerifier JComponent.getInputVerifier();
Insets getInsets(JComponent, Insets)
  = native Insets JComponent.getInsets(Insets);
KeyStroke[] getRegisteredKeyStrokes(JComponent)
  = native KeyStroke[] JComponent.getRegisteredKeyStrokes();
String getToolTipText(JComponent, MouseEvent)
  = native String JComponent.getToolTipText(MouseEvent);
String getUIClassID(JComponent)
  = native String JComponent.getUIClassID();
Rectangle getVisibleRect(JComponent)
  = native Rectangle JComponent.getVisibleRect();
void paintBorder(JComponent, Graphics)
  = native void JComponent.paintBorder(Graphics);
void paintChildren(JComponent, Graphics)
  = native void JComponent.paintChildren(Graphics);
void paintImmediately(JComponent, Rectangle)
  = native void JComponent.paintImmediately(Rectangle);
void paintComponent(JComponent, Graphics)
  = native void JComponent.paintComponent(Graphics);
void printBorder(JComponent, Graphics)
  = native void JComponent.printBorder(Graphics);
void printChildren(JComponent, Graphics)
  = native void JComponent.printChildren(Graphics);
void printComponent(JComponent, Graphics)
  = native void JComponent.printComponent(Graphics);
void processComponentKeyEvent(JComponent, KeyEvent)
  = native void JComponent.processComponentKeyEvent(KeyEvent);
boolean processKeyBinding(JComponent, KeyStroke, KeyEvent, int, boolean)
  = native boolean JComponent.processKeyBinding(KeyStroke, KeyEvent, int, boolean);
void putClientProperty(JComponent, Object, ?Object)
  = native void JComponent.putClientProperty(Object, Object);
void registerKeyboardAction(JComponent, ActionListener, KeyStroke, int)
  = native void JComponent.registerKeyboardAction(ActionListener, KeyStroke, int);
void registerKeyboardAction(JComponent, ActionListener, String, KeyStroke, int)
  = native void JComponent.registerKeyboardAction(ActionListener, String, KeyStroke, int);
void repaint(JComponent, Rectangle)
  = native void JComponent.repaint(Rectangle);
void scrollRectToVisible(JComponent, Rectangle)
  = native void JComponent.scrollRectToVisible(Rectangle);
void setActionMap(JComponent, ActionMap)
  = native void JComponent.setActionMap(ActionMap);
void setBorder(JComponent, Border)
  = native void JComponent.setBorder(Border);
void setInputMap(JComponent, int, InputMap)
  = native void JComponent.setInputMap(int, InputMap);
void setInputVerifier(JComponent, InputVerifier)
  = native void JComponent.setInputVerifier(InputVerifier);
void setMaximumSize(JComponent, Dimension)
  = native void JComponent.setMaximumSize(Dimension);
void setMinimumSize(JComponent, Dimension)
  = native void JComponent.setMinimumSize(Dimension);
void setUI(JComponent, ComponentUI)
  = native void JComponent.setUI(ComponentUI);
void unregisterKeyboardAction(JComponent, KeyStroke)
  = native void JComponent.unregisterKeyboardAction(KeyStroke);
//JDK1.4  Locale getDefaultLocale(JComponent)
//JDK1.4    = native Locale JComponent.getDefaultLocale();
//JDK1.4  void setDefaultLocale(JComponent, Locale)
//JDK1.4    = native void JComponent.setDefaultLocale(Locale);
//JDK1.4  AncestorListener[?] getAncestorListeners(JComponent)
//JDK1.4    = native AncestorListener[] JComponent.getAncestorListeners();
//JDK1.4  VetoableChangeListener[?] getVetoableChangeListeners(JComponent)
//JDK1.4    = native VetoableChangeListener[] JComponent.getVetoableChangeListeners();


// class DefaultButtonModel
EventListener[?] getListeners(DefaultButtonModel, Class)
  = native EventListener[] DefaultButtonModel.getListeners(Class);

// class Timer
EventListener[?] getListeners(javax.swing.Timer, Class)
  = native EventListener[] javax.swing.Timer.getListeners(Class);

// class DefaultBoundedRangeModel
EventListener[?] getListeners(DefaultBoundedRangeModel, Class)
  = native EventListener[] DefaultBoundedRangeModel.getListeners(Class);

// class DefaultSingleSelectionModel
EventListener[?] getListeners(DefaultSingleSelectionModel, Class)
  = native EventListener[] DefaultSingleSelectionModel.getListeners(Class);

// class DefaultCaret
EventListener[?] getListeners(DefaultCaret, Class)
  = native EventListener[] DefaultCaret.getListeners(Class);

// class AbstractListModel
EventListener[?] getListeners(AbstractListModel, Class)
  = native EventListener[] AbstractListModel.getListeners(Class);

// class DefaultTreeSelectionModel
EventListener[?] getListeners(DefaultTreeSelectionModel, Class)
  = native EventListener[] DefaultTreeSelectionModel.getListeners(Class);

// class DefaultTreeModel
EventListener[?] getListeners(DefaultTreeModel, Class)
  = native EventListener[] DefaultTreeModel.getListeners(Class);

// class DefaultListSelectionModel
EventListener[?] getListeners(DefaultListSelectionModel, Class)
  = native EventListener[] DefaultListSelectionModel.getListeners(Class);



// class CellRendererPane
void addImpl(CellRendererPane, Component, Object, int)
  = native void CellRendererPane.addImpl(Component, Object, int);
void paintComponent(CellRendererPane, Graphics, Component, Container, int, int, int, int)
  = native void CellRendererPane.paintComponent(Graphics, Component, Container, int, int, int, int);
void paintComponent(CellRendererPane, Graphics, Component, Container, int, int, int, int, boolean)
  = native void CellRendererPane.paintComponent(Graphics, Component, Container, int, int, int, int, boolean);
void paintComponent(CellRendererPane, Graphics, Component, Container, Rectangle)
  = native void CellRendererPane.paintComponent(Graphics, Component, Container, Rectangle);


// class ScrollPane
void addImpl(ScrollPane, Component, Object, int)
  = native void ScrollPane.addImpl(Component, Object, int);
void setScrollPosition(ScrollPane, Point)
  = native void ScrollPane.setScrollPosition(Point);

// class JOptionPane (not complete).
<T> String showInternalInputDialog(Component parentComponent, T message)
  = native String JOptionPane.showInternalInputDialog(Component, Object);
<T> String showInternalInputDialog(Component parentComponent, T message, String title, int messageType)
  = native String JOptionPane.showInternalInputDialog(Component, Object, String, int);
<T> void showInternalMessageDialog(Component parentComponent, T message)
  = native void JOptionPane.showInternalMessageDialog(Component, Object);
<T> void showInternalMessageDialog(Component parentComponent, T message, String title, int messageType)
  = native void JOptionPane.showInternalMessageDialog(Component, Object, String, int);
<T> void showInternalMessageDialog(Component parentComponent, T message, String title, int messageType, Icon icon)
  = native void JOptionPane.showInternalMessageDialog(Component, Object, String, int, Icon);
<T> void showMessageDialog(Component parentComponent, T message)
  = native void JOptionPane.showMessageDialog(Component, Object);
<T> void showMessageDialog(Component parentComponent, T message, String title, int messageType)
  = native void JOptionPane.showMessageDialog(Component, Object, String, int);
<T> void showMessageDialog(Component parentComponent, T message, String title, int messageType, Icon icon)
  = native void JOptionPane.showMessageDialog(Component, Object, String, int, Icon);

// class JMenu
JMenuItem add(JMenu, JMenuItem)
  = native JMenuItem JMenu.add(JMenuItem);
JMenuItem add(JMenu, String)
  = native JMenuItem JMenu.add(String);
JMenuItem getItem(JMenu, int)
  = native JMenuItem JMenu.getItem(int);
JMenuItem insert(JMenu, JMenuItem, int)
  = native JMenuItem JMenu.insert(JMenuItem, int);
void insert(JMenu, String, int)
  = native void JMenu.insert(String, int);
void remove(JMenu, Component)
  = native void JMenu.remove(Component);
void remove(JMenu, JMenuItem)
  = native void JMenu.remove(JMenuItem);

// class JMenuBar
JMenu add(JMenuBar, JMenu)
  = native JMenu JMenuBar.add(JMenu);
void setHelpMenu(JMenuBar, JMenu)
  = native void JMenuBar.setHelpMenu(JMenu);

