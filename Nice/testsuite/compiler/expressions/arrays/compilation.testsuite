/// PASS
  byte[] b = f(new byte[2]);
  short[] s = f(new short[2]);
  int[] i = f(new int[2]);
  long[] l = f(new long[2]);
  float[] f = f(new float[2]);
  /// Toplevel
  <double T> T[] f(T[] t) = t; 

/// PASS
  ?String[][] s = single(new String[1]);
  /// Toplevel
  <T> T[][] single(T[] t) = [ t ];

/// PASS

  TestClass t = new TestClass();
  
  // We check that the field is indeed of bytecode type Item[], not Object[].
  assert t.a instanceof Item[];

  // Check that the array is not copied to arrange the types, which would 
  // discard the side-effect.
  t.a[0] = new Item();
  assert t.a[0] != null;

  /// Toplevel
class TestClass{
   private ?Item[] a = new Item[1];
}
// This bug originated from the class being declared after its use, and thus
// its bytecode type not yet known.
class Item {}

/// PASS
  double[] d = [ 0, 1 ];
  heapsort(d);
  assert d[1] == 0;
  /// Toplevel
<Any T | T <: double, int <: T >
void heapsort(T[] ra) {
  ra[1] = ra[0];
}

/// PASS
  // Check that Object[] is really compiled as an object array, not just Object
  foo([toObj("1")]);
  /// Toplevel
<!T> Object toObj(T x) = x;

void foo(Object[] oo)
{
  java.lang.Integer i = cast
    (java.lang.Integer.class.getConstructor([String.class]).newInstance(oo));
  assert i.intValue() == 1;
}

/// PASS
  // Check that Object[] is really compiled as an object array, not just Object
  Object o = "1";
  foo([o]);
  /// Toplevel
void foo(Object[] oo)
{
  java.lang.Integer i = cast
    (java.lang.Integer.class.getConstructor([String.class]).newInstance(oo));
  assert i.intValue() == 1;
}

/// PASS
  int[] arr = [1,2,3];
  int x = arr[0] = 5;
  arr[1] = 7;
  assert x == 5 && arr[0] == 5 && arr[1] == 7; 

/// PASS
  long[] arr = [1,2,3];
  long x = arr[0] = 5L;
  arr[1] = 7L;
  assert x == 5L && arr[0] == 5L && arr[1] == 7L; 

/// PASS
  String[] arr = ["abc", "def"];
  String x = arr[0] = "xyz";
  arr[1] = "pqr";
  assert x.equals("xyz") && arr[0].equals("xyz") && arr[1].equals("pqr"); 

/// PASS bug
  List<List<int>> x =  [[1,2,3]];
  int i = x[0][1];

/// PASS bug
  (List<int>, String) x = ([1,2,3], "abc");
  (List<int> arr, String str) = x;

/// PASS bug
  (int[], int[]) t1 = ([1, 2], [3, 4]);
  (List<int>, List<int>) t2 = t1;
  (List<int> la, List<int> lb) = t2;
  assert la[0] == 1;
  assert la[1] == 2;

/// PASS bug
  ((int[], String) , String) t1 = (([1, 2], "abc"), "xyz");
  ((List<int>, String), String) t2 = t1;                   
  ((List<int>, String) t3, String s1) = t2;                
  (List<int> la, String s2) = t3;                          
  assert la[0] == 1;                                       
  assert la[1] == 2;                                       
