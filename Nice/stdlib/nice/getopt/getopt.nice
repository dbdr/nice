
package nice.getopt;

/** Parses the list of strings according to the options,
    and returns the non-options arguments. */
List<String> parse(String, Array<String>, Array<Option>);

String printOptions(Array<Option>);

int optType(Option);
optType(o@NoParamOption) = NO_ARGUMENT;
optType(o@ParamOption) = REQUIRED_ARGUMENT;
optType(o@OptionalParamOption) = OPTIONAL_ARGUMENT;

String optSuffix(Option);
optSuffix(o@NoParamOption) = "";
optSuffix(o@ParamOption) = ":";
optSuffix(o@OptionalParamOption) = "::";

parse(progName@String, args, options)
{
  List<LongOpt> longOptions = new ArrayList(options.length);
  String shortOptions = "";

  options.foreach(Option o =>
    {
      if(o.longName != null)
      {
	LongOpt l;
	if(o.noShortName)
	  {
	    uniqId = uniqId+1;
	    l = new LongOpt(name:o.longName, has_arg:optType(o), val:char(uniqId));
	  }
	else
	  l = new LongOpt(name:o.longName,has_arg:optType(o),val:o.shortName);
        l.initLongOpt();
	o.optval = l.getVal();

	longOptions.add(l);
      }

      if(!o.noShortName)
        shortOptions = shortOptions + toString(o.shortName) + optSuffix(o);
    });

  ?LongOpt[] longOpts = new LongOpt[longOptions.size];
  for (int i = 0; i < longOpts.length; i++)
    longOpts[i] = longOptions.get(i);
  Getopt g = new Getopt(progname: progName, argv: args, optstring: shortOptions,
			long_options: elementsNotNull(longOpts));
  g.initGetopt();
  // Parsing loop
  char c = g.getopt();
  while (c != noOptionsLeft)
    {
      ?Option chosen = options.find(Option o => o.optval == c);
      if (chosen != null)
	chosen.doAction(g);
      
      c = g.getopt();
    }

  int index = getOptind(g);
  List<String> res = new ArrayList(args.length - index);
  for(; index<args.length; index++)
    res.add(args[index]);

  return res;
}

void doAction(Option, Getopt);
doAction(o@NoParamOption,g) = action(o)();
doAction(o@ParamOption,g) = actionParam(o)(notNull(g.getOptarg()));
doAction(o@OptionalParamOption,g)
{

  ?String arg = g.getOptarg();
  if(arg == null)
    actionNoParam(o)();
  else
    actionParam(o)(notNull(arg));

/*  String arg = g.getOptarg();
  if(arg == null)
    actionNoParam(o)();
  else
    actionParam(o)(arg);*/
}

var int uniqId = 256;

/****************************************************************
 * Displaying options
 ****************************************************************/

printOptions(os)
{
  String res = "";
  os.filter(Option o => o.visible).foreach(Option o => res += printOption(o));
  return res;
}

String printOption(Option opt)
{
  int column = 28;
  String tab = "\n" + pad("", column, ' ');

  String res = opt.noShortName ? "    " : ("  -" + opt.shortName);
  if(opt.longName != null)
    res = res + (opt.noShortName ? " " : ",") + " --" + opt.longName;
  
  res += paramString(opt);

  if (res.length() < column-1)
    res = pad(res, column, ' ');
  else
    res = res + tab;

  return res + opt.purpose.replace('\n', tab) + "\n";
}

String paramString(Option);
paramString(@NoParamOption) = "";
paramString(o@ParamOption) = " " + o.optionHint.toUpperCase();
paramString(o@OptionalParamOption) = "[=" + o.optionHint.toUpperCase() + "]";

String pad(String s, int len, char c)
{
  String res = "";
  for(int i = s.length(); i<len; i++)
    res = res + toString(c);
  return s+res;
}

