
/**************************************************************************/
/*                                                                        */
/*  This program is free software; you can redistribute it and/or modify  */
/*  it under the terms of the GNU General Public License as published by  */
/*  the Free Software Foundation; either version 2 of the License, or     */
/*  (at your option) any later version.                                   */
/*                                                                        */
/**************************************************************************/


package nice.ui.common;



/**
 * Methods to safely convert java listeners to their nice pendants.
 * Raise a NoNiceListenerException if this is not possible. The exception
 * has to be initialized with the listener that was found to not be a nice one.
 * so that code calling these methods can work on with the non nice
 * listener, if it wants to do so
 */


NiceAncestorListener toNiceAncestorListener(EventListener);
toNiceAncestorListener(this@NiceAncestorListener) = this;
toNiceAncestorListener(this)
{ 
  throw new NoNiceListenerException("" + this.getClass().getName() + "is no instance of NiceAncestorListener", listener: this);
}

NiceCaretListener toNiceCaretListener(EventListener);
toNiceCaretListener(this@NiceCaretListener) = this;
toNiceCaretListener(this)
{ 
  throw new NoNiceListenerException("" + this.getClass().getName() + "is no instance of NiceCaretListener", listener: this);
}

NiceCellEditorListener toNiceCellEditorListener(EventListener);
toNiceCellEditorListener(this@NiceCellEditorListener) = this;
toNiceCellEditorListener(this)
{ 
  throw new NoNiceListenerException("" + this.getClass().getName() + "is no instance of NiceCellEditorListener", listener: this);
}

NiceChangeListener toNiceChangeListener(EventListener);
toNiceChangeListener(this@NiceChangeListener) = this;
toNiceChangeListener(this)
{ 
  throw new NoNiceListenerException("" + this.getClass().getName() + "is no instance of NiceChangeListener", listener: this);
}

NiceDocumentListener toNiceDocumentListener(EventListener);
toNiceDocumentListener(this@NiceDocumentListener) = this;
toNiceDocumentListener(this)
{ 
  throw new NoNiceListenerException("" + this.getClass().getName() + "is no instance of NiceDocumentListener", listener: this);
}

NiceHyperlinkListener toNiceHyperlinkListener(EventListener);
toNiceHyperlinkListener(this@NiceHyperlinkListener) = this;
toNiceHyperlinkListener(this)
{ 
  throw new NoNiceListenerException("" + this.getClass().getName() + "is no instance of NiceHyperlinkListener", listener: this);
}

NiceInternalFrameListener toNiceInternalFrameListener(EventListener);
toNiceInternalFrameListener(this@NiceInternalFrameListener) = this;
toNiceInternalFrameListener(this)
{ 
  throw new NoNiceListenerException("" + this.getClass().getName() + "is no instance of NiceInternalFrameListener", listener: this);
}

NiceListDataListener toNiceListDataListener(EventListener);
toNiceListDataListener(this@NiceListDataListener) = this;
toNiceListDataListener(this)
{ 
  throw new NoNiceListenerException("" + this.getClass().getName() + "is no instance of NiceListDataListener", listener: this);
}

NiceListSelectionListener toNiceListSelectionListener(EventListener);
toNiceListSelectionListener(this@NiceListSelectionListener) = this;
toNiceListSelectionListener(this)
{ 
  throw new NoNiceListenerException("" + this.getClass().getName() + "is no instance of NiceListSelectionListener", listener: this);
}

NiceMenuDragMouseListener toNiceMenuDragMouseListener(EventListener);
toNiceMenuDragMouseListener(this@NiceMenuDragMouseListener) = this;
toNiceMenuDragMouseListener(this)
{ 
  throw new NoNiceListenerException("" + this.getClass().getName() + "is no instance of NiceMenuDragMouseListener", listener: this);
}

NiceMenuKeyListener toNiceMenuKeyListener(EventListener);
toNiceMenuKeyListener(this@NiceMenuKeyListener) = this;
toNiceMenuKeyListener(this)
{ 
  throw new NoNiceListenerException("" + this.getClass().getName() + "is no instance of NiceMenuKeyListener", listener: this);
}

NiceMenuListener toNiceMenuListener(EventListener);
toNiceMenuListener(this@NiceMenuListener) = this;
toNiceMenuListener(this)
{ 
  throw new NoNiceListenerException("" + this.getClass().getName() + "is no instance of NiceMenuListener", listener: this);
}

NicePopupMenuListener toNicePopupMenuListener(EventListener);
toNicePopupMenuListener(this@NicePopupMenuListener) = this;
toNicePopupMenuListener(this)
{ 
  throw new NoNiceListenerException("" + this.getClass().getName() + "is no instance of NicePopupMenuListener", listener: this);
}

NiceTableColumnModelListener toNiceTableColumnModelListener(EventListener);
toNiceTableColumnModelListener(this@NiceTableColumnModelListener) = this;
toNiceTableColumnModelListener(this)
{ 
  throw new NoNiceListenerException("" + this.getClass().getName() + "is no instance of NiceTableColumnModelListener", listener: this);
}

NiceTableModelListener toNiceTableModelListener(EventListener);
toNiceTableModelListener(this@NiceTableModelListener) = this;
toNiceTableModelListener(this)
{ 
  throw new NoNiceListenerException("" + this.getClass().getName() + "is no instance of NiceTableModelListener", listener: this);
}

NiceTreeExpansionListener toNiceTreeExpansionListener(EventListener);
toNiceTreeExpansionListener(this@NiceTreeExpansionListener) = this;
toNiceTreeExpansionListener(this)
{ 
  throw new NoNiceListenerException("" + this.getClass().getName() + "is no instance of NiceTreeExpansionListener", listener: this);
}

NiceTreeWillExpandListener toNiceTreeWillExpandListener(EventListener);
toNiceTreeWillExpandListener(this@NiceTreeWillExpandListener) = this;
toNiceTreeWillExpandListener(this)
{ 
  throw new NoNiceListenerException("" + this.getClass().getName() + "is no instance of NiceTreeWillExpandListener", listener: this);
}

NiceTreeModelListener toNiceTreeModelListener(EventListener);
toNiceTreeModelListener(this@NiceTreeModelListener) = this;
toNiceTreeModelListener(this)
{ 
  throw new NoNiceListenerException("" + this.getClass().getName() + "is no instance of NiceTreeModelListener", listener: this);
}

NiceTreeSelectionListener toNiceTreeSelectionListener(EventListener);
toNiceTreeSelectionListener(this@NiceTreeSelectionListener) = this;
toNiceTreeSelectionListener(this)
{ 
  throw new NoNiceListenerException("" + this.getClass().getName() + "is no instance of NiceTreeSelectionListener", listener: this);
}

NiceUndoableEditListener toNiceUndoableEditListener(EventListener);
toNiceUndoableEditListener(this@NiceUndoableEditListener) = this;
toNiceUndoableEditListener(this)
{ 
  throw new NoNiceListenerException("" + this.getClass().getName() + "is no instance of NiceUndoableEditListener", listener: this);
}