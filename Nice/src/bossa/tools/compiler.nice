/**************************************************************************/
/*                           B O S S A                                    */
/*        A simple imperative object-oriented research language           */
/*                   (c)  Daniel Bonniot 1999                             */
/*                                                                        */
/*  This program is free software; you can redistribute it and/or modify  */
/*  it under the terms of the GNU General Public License as published by  */
/*  the Free Software Foundation; either version 2 of the License, or     */
/*  (at your option) any later version.                                   */
/*                                                                        */
/**************************************************************************/

// File    : compiler.nice
// Created : Sat Feb 19 16:21:04 2000 by Daniel Bonniot
//$Modified: Wed Jul 26 14:57:35 2000 by Daniel Bonniot $

package bossa.tools;

/**
   Bossa compiler main file.
   
   @author Daniel Bonniot
 */

import mlsub.compilation;
import nice.opt;
import bossa.modules;

main(args)
{
  Throwable uncaughtException = null;

  try{

  boolean recompileCL = false;
  boolean recAll = false;
  boolean doLink = true;
  List<Option> opts = makeVector(10);

  opts.add(option('r',"recompile",
		  "force recompilation of packages given on the command line",
		  "none/command-line/all",
  		  fun()=>{ recompileCL=true; },
  		  fun(String arg)=>{
		    if("all".equals(arg))
		      recAll=true;
		    else if("command-line".equals(arg))
		      recompileCL=true;
		    else if("none".equals(arg))
		      {
		        recompileCL=false;
		        recAll=false;
		      }
		    }));

  opts.add(option('R', "recompileAll",
		  "recompile all packages",
                  fun()=>{ recAll = true; }));

  opts.add(option('c',"compile",
		  "just compile packages, do not link them",
  		  fun()=>{ doLink=false; }));

  opts.add(option('h',"help","print help message and exit",
		  fun()=>
                  {
		    println(printOptions(opts));
		    System.exit(1);
		  }));

  opts.add(option('?',"usage",
		  "print usage information and exit",
		  fun()=>usage()));

  Sequence<String> rest = parse("nicec", args, opts);
  if((rest.size()<1) | (rest.size()>1))
    {
      usage();
    }
  String packageName = rest.get(0);

  bossa.modules.Compilation compilation = 
    make(packageName, doLink, recompileCL, recAll);

  make(compilation);

  }
  catch(ExceptionInInitializerError e){
    uncaughtException = e.getException();
  }
  catch(Exception e){
    uncaughtException = e;
  }

  if(uncaughtException != null)
    {
      System.out.println
      ("\nAn exception has occured in the compiler\n" +
       "please report to d.bonniot@mail.dotcom.fr\n\n" +
       "Exception: " + uncaughtException.toString() +
       "\n\nStack trace:\n");
      uncaughtException.printStackTrace();
      System.exit(1);
    }
}

void usage();
usage()
{
  println("Usage: nicec <package name>");
  println("Type \"nicec --help\" for a list of options");
  exit(-1);
}
