/**************************************************************************/
/*                                N I C E                                 */
/*             A high-level object-oriented research language             */
/*                        (c) Daniel Bonniot 2004                         */
/*                                                                        */
/*  This program is free software; you can redistribute it and/or modify  */
/*  it under the terms of the GNU General Public License as published by  */
/*  the Free Software Foundation; either version 2 of the License, or     */
/*  (at your option) any later version.                                   */
/*                                                                        */
/**************************************************************************/

package bossa.syntax;

import bossa.util.*;

/**
   A syntactic type identifier.
   
   After scoping, it will either reveal to be a 
   TypeConstructor or a MonotypeVar.

*/
public final class TypeIdent extends Monotype implements Located
{
  public LocatedString name;

  containsAlike() = false;
  
  isVoid() = "void".equals(name.toString());

  substitute(map)
  {
    return map.get(name.toString()) || this;
  }

  public mlsub.typing.TypeSymbol resolveToTypeSymbol(TypeMap scope)
  {
    let res = scope.lookup(name);
    if (res == null)
      throw unknownIdent(name);
    
    return res;
  }
  
  rawResolve(tm)
  {
    let res = this.resolveToTypeSymbol(tm);

    if (res instanceof mlsub.typing.Monotype)
      return res;

    if (res instanceof mlsub.typing.TypeConstructor)
      {
	try{
	  return nice.tools.typing.Types.zeroArgMonotype(res);
	}
	catch(mlsub.typing.BadSizeEx e){
          // See if this is a class with default type parameters
          let type = getTypeWithTC(res);
          if (type != null)
            return type;

	  throw User.error(this, name +
			   Util.has(e.expected, "type parameter", e.actual));
	}
      }
    
    if (res instanceof mlsub.typing.Interface)
      User.error(this, "This abstract interface cannot be used as a type");

    throw Internal.error("Invalid type ident: " + res.getClass() + " = " + res);
  }
  
  public mlsub.typing.TypeConstructor resolveToTC(TypeMap scope)
  {
    let res = this.resolveToTypeSymbol(scope);
    if (res instanceof mlsub.typing.TypeConstructor)
      return res;
    
    throw User.error(this, this + " is not a class");
  }

  public mlsub.typing.TypeSymbol resolvePreferablyToItf(TypeMap scope)
  {
    let res = this.resolveToTypeSymbol(scope);

    if (res instanceof mlsub.typing.Interface)
      return res;

    if (res instanceof mlsub.typing.TypeConstructor)
      {
	let def = getTypeDefinition(res);
	if (def != null)
	  {
	    let itf = def.getAssociatedInterface();
	    if (itf != null)
	      return itf;
	  }
      }

    return res;
  }
  
  public mlsub.typing.Interface resolveToItf(TypeMap scope)
  {
    let res = this.resolvePreferablyToItf(scope);
    if (res instanceof mlsub.typing.Interface)
      return res;

    throw User.error(this, res + " should be an interface");
  }

  toString() = this.nullnessString() + name.toString();

  public LocatedString getName() = name;
  
  location() = name.location();
}
