package nice.ui.common;


  
/**
 * functions to remove all listeners specified
 */ 
 
public <AncestorListenerHandler H> void removeNAncestorListener
  (H this,
   AncestorEvent ?-> void ancestorAdded,
   AncestorEvent ?-> void ancestorMoved,
   AncestorEvent ?-> void ancestorRemoved
   )
{
	NAncestorListener[?] listeners = this.getNiceAncestorListeners();
  if(listeners == null) return;
  listeners.foreach
    (NAncestorListener l =>
     {
       if(ancestorAdded != null && l.ancestorAdded == ancestorAdded) l.ancestorAdded = null;
       if(ancestorMoved != null && l.ancestorMoved == ancestorMoved) l.ancestorMoved = null;
       if(ancestorRemoved != null && l.ancestorRemoved == ancestorRemoved) l.ancestorRemoved = null;
     }
     );
}
 
public <CaretListenerHandler H> void removeNCaretListener
  (H this,
   CaretEvent ?-> void caretUpdate
   ) 
{
	NCaretListener[?] listeners = this.getNiceCaretListeners();
  if(listeners == null) return;
  listeners.foreach
    (NCaretListener l =>
     {
       if(caretUpdate != null && l.caretUpdate == caretUpdate) l.caretUpdate = null;
     }
     );
}
 
public <CellEditorListenerHandler H> void removeNCellEditorListener
  (H this,
   ChangeEvent ?-> void editingCanceled,
   ChangeEvent ?-> void editingStopped
   )
{
	NCellEditorListener[?] listeners = this.getNiceCellEditorListeners();
  if(listeners == null) return;
  listeners.foreach
    (NCellEditorListener l =>
     {
       if(editingCanceled != null && l.editingCanceled == editingCanceled) l.editingCanceled = null;
       if(editingStopped != null && l.editingStopped == editingStopped) l.editingStopped = null;
     }
     );
}
 
public <ChangeListenerHandler H> void removeNChangeListener
  (H this,
   ChangeEvent ?-> void stateChanged
   ) 
{
	NChangeListener[?] listeners = this.getNiceChangeListeners();
  if(listeners == null) return;
  listeners.foreach
    (NChangeListener l =>
     {
       if(stateChanged != null && l.stateChanged == stateChanged) l.stateChanged = null;
     }
     );
} 
 
public <DocumentListenerHandler H> void removeNDocumentListener
  (H this,
   DocumentEvent ?-> void changedUpdate,
   DocumentEvent ?-> void insertUpdate,
   DocumentEvent ?-> void removeUpdate
   ) 
{
	NDocumentListener[?] listeners = this.getNiceDocumentListeners();
  if(listeners == null) return;
  listeners.foreach
    (NDocumentListener l =>
     {
       if(changedUpdate != null && l.changedUpdate == changedUpdate) l.changedUpdate = null;
       if(insertUpdate != null && l.insertUpdate == insertUpdate) l.insertUpdate = null;
       if(removeUpdate != null && l.removeUpdate == removeUpdate) l.removeUpdate = null;
     }
     );
} 
 
public <HyperlinkListenerHandler H> void removeNHyperlinkListener
  (H this,
   HyperlinkEvent ?-> void hyperlinkUpdate
   )
{
	NHyperlinkListener[?] listeners = this.getNiceHyperlinkListeners();
  if(listeners == null) return;
  listeners.foreach
    (NHyperlinkListener l =>
     {
       if(hyperlinkUpdate != null && l.hyperlinkUpdate == hyperlinkUpdate) l.hyperlinkUpdate = null;
     }
     );
}  
 
public <InternalFrameListenerHandler H> void removeNInternalFrameListener
  (H this,
   InternalFrameEvent ?-> void internalFrameActivated,
   InternalFrameEvent ?-> void internalFrameClosed,
   InternalFrameEvent ?-> void internalFrameClosing,
   InternalFrameEvent ?-> void internalFrameDeactivated,
   InternalFrameEvent ?-> void internalFrameDeiconified,
   InternalFrameEvent ?-> void internalFrameIconified,
   InternalFrameEvent ?-> void internalFrameOpened
   ) 
{
	NInternalFrameListener[?] listeners = this.getNiceInternalFrameListeners();
  if(listeners == null) return;
  listeners.foreach
    (NInternalFrameListener l =>
     {
       if(internalFrameActivated != null && l.internalFrameActivated == internalFrameActivated) l.internalFrameActivated = null;
       if(internalFrameClosed != null && l.internalFrameClosed == internalFrameClosed) l.internalFrameClosed = null;
       if(internalFrameClosing != null && l.internalFrameClosing == internalFrameClosing) l.internalFrameClosing = null;
       if(internalFrameDeactivated != null && l.internalFrameDeactivated == internalFrameDeactivated) l.internalFrameDeactivated = null;
       if(internalFrameDeiconified != null && l.internalFrameDeiconified == internalFrameDeiconified) l.internalFrameDeiconified = null;
       if(internalFrameIconified != null && l.internalFrameIconified == internalFrameIconified) l.internalFrameIconified = null;
       if(internalFrameOpened != null && l.internalFrameOpened == internalFrameOpened) l.internalFrameOpened = null;
     }
     );
} 
 
public <ListDataListenerHandler H> void removeNListDataListener
  (H this,
   ListDataEvent ?-> void contentsChanged,
   ListDataEvent ?-> void intervalAdded,
   ListDataEvent ?-> void intervalRemoved
   ) 
{
	NListDataListener[?] listeners = this.getNiceListDataListeners();
  if(listeners == null) return;
  listeners.foreach
    (NListDataListener l =>
     {
       if(contentsChanged != null && l.contentsChanged == contentsChanged) l.contentsChanged = null;
       if(intervalAdded != null && l.intervalAdded == intervalAdded) l.intervalAdded = null;
       if(intervalRemoved != null && l.intervalRemoved == intervalRemoved) l.intervalRemoved = null;
     }
     );
} 
 
public <ListSelectionListenerHandler H> void removeNListSelectionListener
  (H this,
   ListSelectionEvent ?-> void listSelectionValueChanged
   )  
{
	NListSelectionListener[?] listeners = this.getNiceListSelectionListeners();
  if(listeners == null) return;
  listeners.foreach
    (NListSelectionListener l =>
     {
       if(listSelectionValueChanged != null && l.listSelectionValueChanged == listSelectionValueChanged) l.listSelectionValueChanged = null;
     }
     );
}  
 
public <MenuDragMouseListenerHandler H> void removeNMenuDragMouseListener
  (H this,
   MenuDragMouseEvent ?-> void menuDragMouseDragged,
   MenuDragMouseEvent ?-> void menuDragMouseEntered,
   MenuDragMouseEvent ?-> void menuDragMouseExited,
   MenuDragMouseEvent ?-> void menuDragMouseReleased
   )
{
	NMenuDragMouseListener[?] listeners = this.getNiceMenuDragMouseListeners();
  if(listeners == null) return;
  listeners.foreach
    (NMenuDragMouseListener l =>
     {
       if(menuDragMouseDragged != null && l.menuDragMouseDragged == menuDragMouseDragged) l.menuDragMouseDragged = null;
       if(menuDragMouseEntered != null && l.menuDragMouseEntered == menuDragMouseEntered) l.menuDragMouseEntered = null;
       if(menuDragMouseExited != null && l.menuDragMouseExited == menuDragMouseExited) l.menuDragMouseExited = null;
       if(menuDragMouseReleased != null && l.menuDragMouseReleased == menuDragMouseReleased) l.menuDragMouseReleased = null;
     }
     );
}    
 
public <MenuKeyListenerHandler H> void removeNMenuKeyListener
  (H this,
   MenuKeyEvent ?-> void menuKeyPressed,
   MenuKeyEvent ?-> void menuKeyReleased,
   MenuKeyEvent ?-> void menuKeyTyped
   )
{
	NMenuKeyListener[?] listeners = this.getNiceMenuKeyListeners();
  if(listeners == null) return;
  listeners.foreach
    (NMenuKeyListener l =>
     {
       if(menuKeyPressed != null && l.menuKeyPressed == menuKeyPressed) l.menuKeyPressed = null;
       if(menuKeyReleased != null && l.menuKeyReleased == menuKeyReleased) l.menuKeyReleased = null;
       if(menuKeyTyped != null && l.menuKeyTyped == menuKeyTyped) l.menuKeyTyped = null;
     }
     );
}
 
public <MenuListenerHandler H> void removeNMenuListener
  (H this,
   MenuEvent ?-> void menuCanceled,
   MenuEvent ?-> void menuDeselected,
   MenuEvent ?-> void menuSelected
   )
{
	NMenuListener[?] listeners = this.getNiceMenuListeners();
  if(listeners == null) return;
  listeners.foreach
    (NMenuListener l =>
     {
       if(menuCanceled != null && l.menuCanceled == menuCanceled) l.menuCanceled = null;
       if(menuDeselected != null && l.menuDeselected == menuDeselected) l.menuDeselected = null;
       if(menuSelected != null && l.menuSelected == menuSelected) l.menuSelected = null;
     }
     );
}    
 
public <PopupMenuListenerHandler H> void removeNPopupMenuListener
  (H this,
   PopupMenuEvent ?-> void popupMenuCanceled,
   PopupMenuEvent ?-> void popupMenuWillBecomeInvisible,
   PopupMenuEvent ?-> void popupMenuWillBecomeVisible
   )
{
	NPopupMenuListener[?] listeners = this.getNicePopupMenuListeners();
  if(listeners == null) return;
  listeners.foreach
    (NPopupMenuListener l =>
     {
       if(popupMenuCanceled != null && l.popupMenuCanceled == popupMenuCanceled) l.popupMenuCanceled = null;
       if(popupMenuWillBecomeInvisible != null && l.popupMenuWillBecomeInvisible == popupMenuWillBecomeInvisible) l.popupMenuWillBecomeInvisible = null;
       if(popupMenuWillBecomeVisible != null && l.popupMenuWillBecomeVisible == popupMenuWillBecomeVisible) l.popupMenuWillBecomeVisible = null;
     }
     );
}
 
public <TableColumnModelListenerHandler H> void removeNTableColumnModelListener
  (H this,
   TableColumnModelEvent ?-> void columnAdded,
   TableColumnModelEvent ?-> void columnMoved,
   TableColumnModelEvent ?-> void columnRemoved,
   ListSelectionEvent ?-> void columnSelectionChanged,
   ChangeEvent ?-> void columnMarginChanged
   ) 
{
	NTableColumnModelListener[?] listeners = this.getNiceTableColumnModelListeners();
  if(listeners == null) return;
  listeners.foreach
    (NTableColumnModelListener l =>
     {
       if(columnAdded != null && l.columnAdded == columnAdded) l.columnAdded = null;
       if(columnMoved != null && l.columnMoved == columnMoved) l.columnMoved = null;
       if(columnRemoved != null && l.columnRemoved == columnRemoved) l.columnRemoved = null;
       if(columnSelectionChanged != null && l.columnSelectionChanged == columnSelectionChanged) l.columnSelectionChanged = null;
       if(columnMarginChanged != null && l.columnMarginChanged == columnMarginChanged) l.columnMarginChanged = null;
     }
     );
}      
 
public <TableModelListenerHandler H> void removeNTableModelListener
  (H this,
   TableModelEvent ?-> void tableChanged
   )  
{
	NTableModelListener[?] listeners = this.getNiceTableModelListeners();
  if(listeners == null) return;
  listeners.foreach
    (NTableModelListener l =>
     {
       if(tableChanged != null && l.tableChanged == tableChanged) l.tableChanged = null;
     }
     );
}    
 
public <TreeExpansionListenerHandler H> void removeNTreeExpansionListener
  (H this,
   TreeExpansionEvent ?-> void treeCollapsed,
   TreeExpansionEvent ?-> void treeExpanded
   ) 
{
	NTreeExpansionListener[?] listeners = this.getNiceTreeExpansionListeners();
  if(listeners == null) return;
  listeners.foreach
    (NTreeExpansionListener l =>
     {
       if(treeCollapsed != null && l.treeCollapsed == treeCollapsed) l.treeCollapsed = null;
       if(treeExpanded != null && l.treeExpanded == treeExpanded) l.treeExpanded = null;
     }
     );
} 
 
public <TreeModelListenerHandler H> void removeNTreeModelListener
  (H this,
   TreeModelEvent ?-> void treeNodesChanged,
   TreeModelEvent ?-> void treeNodesInserted,
   TreeModelEvent ?-> void treeNodesRemoved,
   TreeModelEvent ?-> void treeStructureChanged
   ) 
{
	NTreeModelListener[?] listeners = this.getNiceTreeModelListeners();
  if(listeners == null) return;
  listeners.foreach
    (NTreeModelListener l =>
     {
       if(treeNodesChanged != null && l.treeNodesChanged == treeNodesChanged) l.treeNodesChanged = null;
       if(treeNodesInserted != null && l.treeNodesInserted == treeNodesInserted) l.treeNodesInserted = null;
       if(treeNodesRemoved != null && l.treeNodesRemoved == treeNodesRemoved) l.treeNodesRemoved = null;
       if(treeStructureChanged != null && l.treeStructureChanged == treeStructureChanged) l.treeStructureChanged = null;
     }
     );
}
 
public <TreeSelectionListenerHandler H> void removeNTreeSelectionListener
  (H this,
   TreeSelectionEvent ?-> void treeSelectionValueChanged
   ) 
{
	NTreeSelectionListener[?] listeners = this.getNiceTreeSelectionListeners();
  if(listeners == null) return;
  listeners.foreach
    (NTreeSelectionListener l =>
     {
       if(treeSelectionValueChanged != null && l.treeSelectionValueChanged == treeSelectionValueChanged) l.treeSelectionValueChanged = null;
     }
     );
}  
 
public <TreeWillExpandListenerHandler H> void removeNTreeWillExpandListener
  (H this,
   TreeExpansionEvent ?-> void treeWillCollapse,
   TreeExpansionEvent ?-> void treeWillExpand
   )  
{
	NTreeWillExpandListener[?] listeners = this.getNiceTreeWillExpandListeners();
  if(listeners == null) return;
  listeners.foreach
    (NTreeWillExpandListener l =>
     {
       if(treeWillCollapse != null && l.treeWillCollapse == treeWillCollapse) l.treeWillCollapse = null;
       if(treeWillExpand != null && l.treeWillExpand == treeWillExpand) l.treeWillExpand = null;
     }
     );
} 
 
public <UndoableEditListenerHandler H> void removeNUndoableEditListener
  (H this,
   UndoableEditEvent ?-> void undoableEditHappened
   ) 
{
	NUndoableEditListener[?] listeners = this.getNiceUndoableEditListeners();
  if(listeners == null) return;
  listeners.foreach
    (NUndoableEditListener l =>
     {
       if(undoableEditHappened != null && l.undoableEditHappened == undoableEditHappened) l.undoableEditHappened = null;
     }
     );
}