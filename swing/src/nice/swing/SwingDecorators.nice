package nice.swing;

import nice.awt;
import nice.beans;

import javax.swing.*;
import javax.swing.event.*;
import java.awt.event.*;

// --------------------------------------------------------------------------------------------------
// --------------------- ActionDecorators for javax.swing.JMenu ---------------------------------------
// --------------------------------------------------------------------------------------------------

void addJMenuListeners(javax.swing.JMenu menu,
                       MenuEvent ?-> void menuCanceled = null,
                       MenuEvent ?-> void menuDeselected = null,
                       MenuEvent ?-> void menuSelected = null,
                       
//                     optional anonymous functions from java.awt.JMenuItem                       
                       
                       MenuDragMouseEvent ?-> void menuDragMouseDragged = null,
                       MenuDragMouseEvent ?-> void menuDragMouseEntered = null,
                       MenuDragMouseEvent ?-> void menuDragMouseExited = null,
                       MenuDragMouseEvent ?-> void menuDragMouseReleased = null,
                       MenuKeyEvent ?-> void menuKeyPressed = null,
                       MenuKeyEvent ?-> void menuKeyReleased = null,
                       MenuKeyEvent ?-> void menuKeyTyped = null,

//                     optional anonymous functions from java.awt.AbstractButton

                       ActionEvent ?-> void actionPerformed = null,
                       ChangeEvent ?-> void stateChanged = null,
                       ItemEvent ?-> void itemStateChanged = null,  
                                
//                     optional anonymous functions from java.awt.JComponent

                       AncestorEvent ?-> void ancestorAdded = null,
                       AncestorEvent ?-> void ancestorMoved = null,
                       AncestorEvent ?-> void ancestorRemoved = null,
                       PropertyChangeEvent ?-> void vetoableChange = null,
                         
//                     optional anonymous functions from java.awt.Container

                       ContainerEvent ?-> void componentAdded = null, 
                       ContainerEvent ?-> void componentRemoved = null,
                         
//                     optional anonymous functions from java.awt.Component

                       ?String propertyName = null,
                       ComponentEvent ?-> void componentHidden = null,
                       ComponentEvent ?-> void componentMoved = null,
                       ComponentEvent ?-> void componentResized = null,
                       ComponentEvent ?-> void componentShown = null,
                       FocusEvent ?-> void focusGained = null,
                       FocusEvent ?-> void focusLost = null,
                       HierarchyEvent ?-> void hierarchyAncestorMoved = null,
                       HierarchyEvent ?-> void hierarchyAncestorResized = null,
                       HierarchyEvent ?-> void hierarchyChanged = null,
                       InputMethodEvent ?-> void caretPositionChanged = null,
                       InputMethodEvent ?-> void inputMethodTextChanged = null,
                       KeyEvent ?-> void keyPressed = null,
                       KeyEvent ?-> void keyReleased = null,
                       KeyEvent ?-> void keyTyped = null, 
                       MouseEvent ?-> void mouseClicked = null,
                       MouseEvent ?-> void mouseEntered = null,
                       MouseEvent ?-> void mouseExited = null,
                       MouseEvent ?-> void mousePressed = null,
                       MouseEvent ?-> void mouseReleased = null,   
                       MouseEvent ?-> void mouseDragged = null,
                       MouseEvent ?-> void mouseMoved = null,
                       PropertyChangeEvent ?-> void propertyChange = null
//                     MouseWheelEvent ?-> void mouseWheelMoved = null            
                       )
{

   // only if one of the according optional parameters really has a value, we will create and add the listener object
   if(menuCanceled != null ||
      menuDeselected != null ||
      menuSelected != null
      )
   { 
      menu.addMenuListener(new NiceMenuListener(menuCanceled: menuCanceled,
                                                menuDeselected: menuDeselected,
                                                menuSelected: menuSelected
                                                ));                                                    
   }
   
   menu.addJMenuItemListeners(menuDragMouseDragged: menuDragMouseDragged, 
                              menuDragMouseEntered: menuDragMouseEntered, 
                              menuDragMouseExited: menuDragMouseExited, 
                              menuDragMouseReleased: menuDragMouseReleased, 
                              menuKeyPressed: menuKeyPressed,
                              menuKeyReleased: menuKeyReleased,
                              menuKeyTyped: menuKeyTyped,
                              actionPerformed: actionPerformed, 
                              stateChanged: stateChanged, 
                              itemStateChanged: itemStateChanged, 
                              ancestorAdded: ancestorAdded,
                              ancestorMoved: ancestorMoved,
                              ancestorRemoved: ancestorRemoved,
                              vetoableChange: vetoableChange,
                              componentAdded: componentAdded,
                              componentRemoved: componentRemoved,
                              propertyName: propertyName,
                              componentHidden: componentHidden,
                              componentMoved: componentMoved,
                              componentResized: componentResized,
                              componentShown: componentShown,
                              focusGained: focusGained,
                              focusLost: focusLost,
                              hierarchyAncestorMoved: hierarchyAncestorMoved,
                              hierarchyAncestorResized: hierarchyAncestorResized,
                              hierarchyChanged: hierarchyChanged,
                              caretPositionChanged: caretPositionChanged,
                              inputMethodTextChanged: inputMethodTextChanged,
                              keyPressed: keyPressed,
                              keyReleased: keyReleased,
                              keyTyped: keyTyped, 
                              mouseEntered: mouseEntered,
                              mouseExited: mouseExited,
                              mousePressed: mousePressed,
                              mouseReleased: mouseReleased,   
                              mouseDragged: mouseDragged,
                              mouseMoved: mouseMoved,
                              propertyChange: propertyChange
//                            mouseWheelMoved: mouseWheelMoved 
                              );
}



// --------------------------------------------------------------------------------------------------
// --------------------- ActionDecorators for javax.swing.JMenuItem ---------------------------------------
// --------------------------------------------------------------------------------------------------

void addJMenuItemListeners(javax.swing.JMenuItem menuItem,
                           MenuDragMouseEvent ?-> void menuDragMouseDragged = null,
                           MenuDragMouseEvent ?-> void menuDragMouseEntered = null,
                           MenuDragMouseEvent ?-> void menuDragMouseExited = null,
                           MenuDragMouseEvent ?-> void menuDragMouseReleased = null,
                           MenuKeyEvent ?-> void menuKeyPressed = null,
                           MenuKeyEvent ?-> void menuKeyReleased = null,
                           MenuKeyEvent ?-> void menuKeyTyped = null,
 
//                         optional anonymous functions from java.awt.AbstractButton
 
                           ActionEvent ?-> void actionPerformed = null,
                           ChangeEvent ?-> void stateChanged = null,
                           ItemEvent ?-> void itemStateChanged = null,  
                                 
//                         optional anonymous functions from java.awt.JComponent
 
                           AncestorEvent ?-> void ancestorAdded = null,
                           AncestorEvent ?-> void ancestorMoved = null,
                           AncestorEvent ?-> void ancestorRemoved = null,
                           PropertyChangeEvent ?-> void vetoableChange = null,
                          
//                         optional anonymous functions from java.awt.Container
 
                           ContainerEvent ?-> void componentAdded = null, 
                           ContainerEvent ?-> void componentRemoved = null,
                          
//                         optional anonymous functions from java.awt.Component

                           ?String propertyName = null,
                           ComponentEvent ?-> void componentHidden = null,
                           ComponentEvent ?-> void componentMoved = null,
                           ComponentEvent ?-> void componentResized = null,
                           ComponentEvent ?-> void componentShown = null,
                           FocusEvent ?-> void focusGained = null,
                           FocusEvent ?-> void focusLost = null,
                           HierarchyEvent ?-> void hierarchyAncestorMoved = null,
                           HierarchyEvent ?-> void hierarchyAncestorResized = null,
                           HierarchyEvent ?-> void hierarchyChanged = null,
                           InputMethodEvent ?-> void caretPositionChanged = null,
                           InputMethodEvent ?-> void inputMethodTextChanged = null,
                           KeyEvent ?-> void keyPressed = null,
                           KeyEvent ?-> void keyReleased = null,
                           KeyEvent ?-> void keyTyped = null, 
                           MouseEvent ?-> void mouseClicked = null,
                           MouseEvent ?-> void mouseEntered = null,
                           MouseEvent ?-> void mouseExited = null,
                           MouseEvent ?-> void mousePressed = null,
                           MouseEvent ?-> void mouseReleased = null,   
                           MouseEvent ?-> void mouseDragged = null,
                           MouseEvent ?-> void mouseMoved = null,
                           PropertyChangeEvent ?-> void propertyChange = null
//                         MouseWheelEvent ?-> void mouseWheelMoved = null            
                           )
{

   // only if one of the according optional parameters really has a value, we will create and add the listener object
   if(menuDragMouseDragged != null ||
      menuDragMouseEntered != null ||
      menuDragMouseExited != null ||
      menuDragMouseReleased != null
      )
   {
      menuItem.addMenuDragMouseListener(new NiceMenuDragMouseListener(menuDragMouseDragged: menuDragMouseDragged,
                                                                      menuDragMouseEntered: menuDragMouseEntered,
                                                                      menuDragMouseExited: menuDragMouseExited,
                                                                      menuDragMouseReleased: menuDragMouseReleased
                                                                      ));
   }
   

   // only if one of the according optional parameters really has a value, we will create and add the listener object
   if(menuKeyPressed != null ||
      menuKeyReleased != null ||
      menuKeyTyped != null
      )
   {
      menuItem.addMenuKeyListener(new NiceMenuKeyListener(menuKeyPressed: menuKeyPressed,
                                                          menuKeyReleased: menuKeyReleased,
                                                          menuKeyTyped: menuKeyTyped
                                                          ));                                                    
   }
   
   
   menuItem.addAbstractButtonListeners(actionPerformed: actionPerformed, 
                                       stateChanged: stateChanged, 
                                       itemStateChanged: itemStateChanged, 
                                       ancestorAdded: ancestorAdded,
                                       ancestorMoved: ancestorMoved,
                                       ancestorRemoved: ancestorRemoved,
                                       vetoableChange: vetoableChange,
                                       componentAdded: componentAdded,
                                       componentRemoved: componentRemoved,
                                       propertyName: propertyName,
                                       componentHidden: componentHidden,
                                       componentMoved: componentMoved,
                                       componentResized: componentResized,
                                       componentShown: componentShown,
                                       focusGained: focusGained,
                                       focusLost: focusLost,
                                       hierarchyAncestorMoved: hierarchyAncestorMoved,
                                       hierarchyAncestorResized: hierarchyAncestorResized,
                                       hierarchyChanged: hierarchyChanged,
                                       caretPositionChanged: caretPositionChanged,
                                       inputMethodTextChanged: inputMethodTextChanged,
                                       keyPressed: keyPressed,
                                       keyReleased: keyReleased,
                                       keyTyped: keyTyped, 
                                       mouseEntered: mouseEntered,
                                       mouseExited: mouseExited,
                                       mousePressed: mousePressed,
                                       mouseReleased: mouseReleased,   
                                       mouseDragged: mouseDragged,
                                       mouseMoved: mouseMoved,
                                       propertyChange: propertyChange
//                                     mouseWheelMoved: mouseWheelMoved 
                                       );
}



// --------------------------------------------------------------------------------------------------
// --------------------- ActionDecorators for javax.swing.AbstractButton ---------------------------------------
// --------------------------------------------------------------------------------------------------

void addAbstractButtonListeners(javax.swing.AbstractButton button,
                                ActionEvent ?-> void actionPerformed = null,
                                ChangeEvent ?-> void stateChanged = null,
                                ItemEvent ?-> void itemStateChanged = null,  
                                
//                              optional anonymous functions from java.awt.JComponent

                                AncestorEvent ?-> void ancestorAdded = null,
                                AncestorEvent ?-> void ancestorMoved = null,
                                AncestorEvent ?-> void ancestorRemoved = null,
                                PropertyChangeEvent ?-> void vetoableChange = null,
                         
//                              optional anonymous functions from java.awt.Container

                                ContainerEvent ?-> void componentAdded = null, 
                                ContainerEvent ?-> void componentRemoved = null,
                         
//                              optional anonymous functions from java.awt.Component

                                ?String propertyName = null,
                                ComponentEvent ?-> void componentHidden = null,
                                ComponentEvent ?-> void componentMoved = null,
                                ComponentEvent ?-> void componentResized = null,
                                ComponentEvent ?-> void componentShown = null,
                                FocusEvent ?-> void focusGained = null,
                                FocusEvent ?-> void focusLost = null,
                                HierarchyEvent ?-> void hierarchyAncestorMoved = null,
                                HierarchyEvent ?-> void hierarchyAncestorResized = null,
                                HierarchyEvent ?-> void hierarchyChanged = null,
                                InputMethodEvent ?-> void caretPositionChanged = null,
                                InputMethodEvent ?-> void inputMethodTextChanged = null,
                                KeyEvent ?-> void keyPressed = null,
                                KeyEvent ?-> void keyReleased = null,
                                KeyEvent ?-> void keyTyped = null, 
                                MouseEvent ?-> void mouseClicked = null,
                                MouseEvent ?-> void mouseEntered = null,
                                MouseEvent ?-> void mouseExited = null,
                                MouseEvent ?-> void mousePressed = null,
                                MouseEvent ?-> void mouseReleased = null,   
                                MouseEvent ?-> void mouseDragged = null,
                                MouseEvent ?-> void mouseMoved = null,
                                PropertyChangeEvent ?-> void propertyChange = null
//                              MouseWheelEvent ?-> void mouseWheelMoved = null            
                                )
{
   // only if one of the according optional parameters really has a value, we will create and add the listener object
   if(actionPerformed != null) button.addActionListener(new NiceActionListener(actionPerformed: actionPerformed));
    
   if(stateChanged != null) button.addChangeListener(new NiceChangeListener(stateChanged: stateChanged));    
   
   if(itemStateChanged != null) button.addItemListener(new NiceItemListener(itemStateChanged: itemStateChanged));                                                   

   button.addJComponentListeners(ancestorAdded: ancestorAdded,
                                 ancestorMoved: ancestorMoved,
                                 ancestorRemoved: ancestorRemoved,
                                 vetoableChange: vetoableChange,
                                 componentAdded: componentAdded,
                                 componentRemoved: componentRemoved,
                                 propertyName: propertyName,
                                 componentHidden: componentHidden,
                                 componentMoved: componentMoved,
                                 componentResized: componentResized,
                                 componentShown: componentShown,
                                 focusGained: focusGained,
                                 focusLost: focusLost,
                                 hierarchyAncestorMoved: hierarchyAncestorMoved,
                                 hierarchyAncestorResized: hierarchyAncestorResized,
                                 hierarchyChanged: hierarchyChanged,
                                 caretPositionChanged: caretPositionChanged,
                                 inputMethodTextChanged: inputMethodTextChanged,
                                 keyPressed: keyPressed,
                                 keyReleased: keyReleased,
                                 keyTyped: keyTyped, 
                                 mouseEntered: mouseEntered,
                                 mouseExited: mouseExited,
                                 mousePressed: mousePressed,
                                 mouseReleased: mouseReleased,   
                                 mouseDragged: mouseDragged,
                                 mouseMoved: mouseMoved,
                                 propertyChange: propertyChange
//                               mouseWheelMoved: mouseWheelMoved 
                                 );
}




// --------------------------------------------------------------------------------------------------
// --------------------- ActionDecorators for javax.swing.JFileChooser ---------------------------------------
// --------------------------------------------------------------------------------------------------

void addJFileChooserListeners(javax.swing.JFileChooser chooser,
                              ActionEvent ?-> void actionPerformed = null,  
                                
//                            optional anonymous functions from java.awt.JComponent

                              AncestorEvent ?-> void ancestorAdded = null,
                              AncestorEvent ?-> void ancestorMoved = null,
                              AncestorEvent ?-> void ancestorRemoved = null,
                              PropertyChangeEvent ?-> void vetoableChange = null,
                         
//                            optional anonymous functions from java.awt.Container

                              ContainerEvent ?-> void componentAdded = null, 
                              ContainerEvent ?-> void componentRemoved = null,
                         
//                            optional anonymous functions from java.awt.Component

                              ?String propertyName = null,
                              ComponentEvent ?-> void componentHidden = null,
                              ComponentEvent ?-> void componentMoved = null,
                              ComponentEvent ?-> void componentResized = null,
                              ComponentEvent ?-> void componentShown = null,
                              FocusEvent ?-> void focusGained = null,
                              FocusEvent ?-> void focusLost = null,
                              HierarchyEvent ?-> void hierarchyAncestorMoved = null,
                              HierarchyEvent ?-> void hierarchyAncestorResized = null,
                              HierarchyEvent ?-> void hierarchyChanged = null,
                              InputMethodEvent ?-> void caretPositionChanged = null,
                              InputMethodEvent ?-> void inputMethodTextChanged = null,
                              KeyEvent ?-> void keyPressed = null,
                              KeyEvent ?-> void keyReleased = null,
                              KeyEvent ?-> void keyTyped = null, 
                              MouseEvent ?-> void mouseClicked = null,
                              MouseEvent ?-> void mouseEntered = null,
                              MouseEvent ?-> void mouseExited = null,
                              MouseEvent ?-> void mousePressed = null,
                              MouseEvent ?-> void mouseReleased = null,   
                              MouseEvent ?-> void mouseDragged = null,
                              MouseEvent ?-> void mouseMoved = null,
                              PropertyChangeEvent ?-> void propertyChange = null
//                            MouseWheelEvent ?-> void mouseWheelMoved = null            
                              )
{
   // only if one of the according optional parameters really has a value, we will create and add the listener object
   if(actionPerformed != null) chooser.addActionListener(new NiceActionListener(actionPerformed: actionPerformed));                                                 

   chooser.addJComponentListeners(ancestorAdded: ancestorAdded,
                                  ancestorMoved: ancestorMoved,
                                  ancestorRemoved: ancestorRemoved,
                                  vetoableChange: vetoableChange,
                                  componentAdded: componentAdded,
                                  componentRemoved: componentRemoved,
                                  propertyName: propertyName,
                                  componentHidden: componentHidden,
                                  componentMoved: componentMoved,
                                  componentResized: componentResized,
                                  componentShown: componentShown,
                                  focusGained: focusGained,
                                  focusLost: focusLost,
                                  hierarchyAncestorMoved: hierarchyAncestorMoved,
                                  hierarchyAncestorResized: hierarchyAncestorResized,
                                  hierarchyChanged: hierarchyChanged,
                                  caretPositionChanged: caretPositionChanged,
                                  inputMethodTextChanged: inputMethodTextChanged,
                                  keyPressed: keyPressed,
                                  keyReleased: keyReleased,
                                  keyTyped: keyTyped, 
                                  mouseEntered: mouseEntered,
                                  mouseExited: mouseExited,
                                  mousePressed: mousePressed,
                                  mouseReleased: mouseReleased,   
                                  mouseDragged: mouseDragged,
                                  mouseMoved: mouseMoved,
                                  propertyChange: propertyChange
//                                mouseWheelMoved: mouseWheelMoved 
                                  );
}



// --------------------------------------------------------------------------------------------------
// --------------------- ActionDecorators for javax.swing.JScrollBar ------------------------------
// --------------------------------------------------------------------------------------------------

void addJScrollBarListeners(javax.swing.JScrollBar bar,
                            AdjustmentEvent ?-> void adjustmentValueChanged = null,  
                                
//                          optional anonymous functions from java.awt.JComponent

                            AncestorEvent ?-> void ancestorAdded = null,
                            AncestorEvent ?-> void ancestorMoved = null,
                            AncestorEvent ?-> void ancestorRemoved = null,
                            PropertyChangeEvent ?-> void vetoableChange = null,
                         
//                          optional anonymous functions from java.awt.Container

                            ContainerEvent ?-> void componentAdded = null, 
                            ContainerEvent ?-> void componentRemoved = null,
                         
//                          optional anonymous functions from java.awt.Component

                            ?String propertyName = null,
                            ComponentEvent ?-> void componentHidden = null,
                            ComponentEvent ?-> void componentMoved = null,
                            ComponentEvent ?-> void componentResized = null,
                            ComponentEvent ?-> void componentShown = null,
                            FocusEvent ?-> void focusGained = null,
                            FocusEvent ?-> void focusLost = null,
                            HierarchyEvent ?-> void hierarchyAncestorMoved = null,
                            HierarchyEvent ?-> void hierarchyAncestorResized = null,
                            HierarchyEvent ?-> void hierarchyChanged = null,
                            InputMethodEvent ?-> void caretPositionChanged = null,
                            InputMethodEvent ?-> void inputMethodTextChanged = null,
                            KeyEvent ?-> void keyPressed = null,
                            KeyEvent ?-> void keyReleased = null,
                            KeyEvent ?-> void keyTyped = null, 
                            MouseEvent ?-> void mouseClicked = null,
                            MouseEvent ?-> void mouseEntered = null,
                            MouseEvent ?-> void mouseExited = null,
                            MouseEvent ?-> void mousePressed = null,
                            MouseEvent ?-> void mouseReleased = null,   
                            MouseEvent ?-> void mouseDragged = null,
                            MouseEvent ?-> void mouseMoved = null,
                            PropertyChangeEvent ?-> void propertyChange = null
//                          MouseWheelEvent ?-> void mouseWheelMoved = null            
                            )
{
   // only if one of the according optional parameters really has a value, we will create and add the listener object
   if(adjustmentValueChanged != null) bar.addAdjustmentListener(new NiceAdjustmentListener(adjustmentValueChanged: adjustmentValueChanged));                                                 

   bar.addJComponentListeners(ancestorAdded: ancestorAdded,
                              ancestorMoved: ancestorMoved,
                              ancestorRemoved: ancestorRemoved,
                              vetoableChange: vetoableChange,
                              componentAdded: componentAdded,
                              componentRemoved: componentRemoved,
                              propertyName: propertyName,
                              componentHidden: componentHidden,
                              componentMoved: componentMoved,
                              componentResized: componentResized,
                              componentShown: componentShown,
                              focusGained: focusGained,
                              focusLost: focusLost,
                              hierarchyAncestorMoved: hierarchyAncestorMoved,
                              hierarchyAncestorResized: hierarchyAncestorResized,
                              hierarchyChanged: hierarchyChanged,
                              caretPositionChanged: caretPositionChanged,
                              inputMethodTextChanged: inputMethodTextChanged,
                              keyPressed: keyPressed,
                              keyReleased: keyReleased,
                              keyTyped: keyTyped, 
                              mouseEntered: mouseEntered,
                              mouseExited: mouseExited,
                              mousePressed: mousePressed,
                              mouseReleased: mouseReleased,   
                              mouseDragged: mouseDragged,
                              mouseMoved: mouseMoved,
                              propertyChange: propertyChange
//                            mouseWheelMoved: mouseWheelMoved 
                              );
}



// --------------------------------------------------------------------------------------------------
// --------------------- ActionDecorators for javax.swing.JSlider ------------------------------
// --------------------------------------------------------------------------------------------------

void addJSliderListeners(javax.swing.JSlider slider,
                         ChangeEvent ?-> void stateChanged = null,  
                                
//                       optional anonymous functions from java.awt.JComponent

                         AncestorEvent ?-> void ancestorAdded = null,
                         AncestorEvent ?-> void ancestorMoved = null,
                         AncestorEvent ?-> void ancestorRemoved = null,
                         PropertyChangeEvent ?-> void vetoableChange = null,
                         
//                       optional anonymous functions from java.awt.Container

                         ContainerEvent ?-> void componentAdded = null, 
                         ContainerEvent ?-> void componentRemoved = null,
                         
//                       optional anonymous functions from java.awt.Component

                         ?String propertyName = null,
                         ComponentEvent ?-> void componentHidden = null,
                         ComponentEvent ?-> void componentMoved = null,
                         ComponentEvent ?-> void componentResized = null,
                         ComponentEvent ?-> void componentShown = null,
                         FocusEvent ?-> void focusGained = null,
                         FocusEvent ?-> void focusLost = null,
                         HierarchyEvent ?-> void hierarchyAncestorMoved = null,
                         HierarchyEvent ?-> void hierarchyAncestorResized = null,
                         HierarchyEvent ?-> void hierarchyChanged = null,
                         InputMethodEvent ?-> void caretPositionChanged = null,
                         InputMethodEvent ?-> void inputMethodTextChanged = null,
                         KeyEvent ?-> void keyPressed = null,
                         KeyEvent ?-> void keyReleased = null,
                         KeyEvent ?-> void keyTyped = null, 
                         MouseEvent ?-> void mouseClicked = null,
                         MouseEvent ?-> void mouseEntered = null,
                         MouseEvent ?-> void mouseExited = null,
                         MouseEvent ?-> void mousePressed = null,
                         MouseEvent ?-> void mouseReleased = null,   
                         MouseEvent ?-> void mouseDragged = null,
                         MouseEvent ?-> void mouseMoved = null,
                         PropertyChangeEvent ?-> void propertyChange = null
//                       MouseWheelEvent ?-> void mouseWheelMoved = null            
                         )
{
   // only if one of the according optional parameters really has a value, we will create and add the listener object
   if(stateChanged != null) slider.addChangeListener(new NiceChangeListener(stateChanged: stateChanged));                                                 

   slider.addJComponentListeners(ancestorAdded: ancestorAdded,
                                 ancestorMoved: ancestorMoved,
                                 ancestorRemoved: ancestorRemoved,
                                 vetoableChange: vetoableChange,
                                 componentAdded: componentAdded,
                                 componentRemoved: componentRemoved,
                                 propertyName: propertyName,
                                 componentHidden: componentHidden,
                                 componentMoved: componentMoved,
                                 componentResized: componentResized,
                                 componentShown: componentShown,
                                 focusGained: focusGained,
                                 focusLost: focusLost,
                                 hierarchyAncestorMoved: hierarchyAncestorMoved,
                                 hierarchyAncestorResized: hierarchyAncestorResized,
                                 hierarchyChanged: hierarchyChanged,
                                 caretPositionChanged: caretPositionChanged,
                                 inputMethodTextChanged: inputMethodTextChanged,
                                 keyPressed: keyPressed,
                                 keyReleased: keyReleased,
                                 keyTyped: keyTyped, 
                                 mouseEntered: mouseEntered,
                                 mouseExited: mouseExited,
                                 mousePressed: mousePressed,
                                 mouseReleased: mouseReleased,   
                                 mouseDragged: mouseDragged,
                                 mouseMoved: mouseMoved,
                                 propertyChange: propertyChange
//                               mouseWheelMoved: mouseWheelMoved 
                                 );
}



//// --------------------------------------------------------------------------------------------------
//// --------------------- ActionDecorators for javax.swing.JSpinner ------------------------------
//// --------------------------------------------------------------------------------------------------
//
//void addJSpinnerListeners(javax.swing.JSpinner spinner,
//                          ChangeEvent ?-> void stateChanged = null,  
//                                
////                        optional anonymous functions from java.awt.JComponent
//
//                          AncestorEvent ?-> void ancestorAdded = null,
//                          AncestorEvent ?-> void ancestorMoved = null,
//                          AncestorEvent ?-> void ancestorRemoved = null,
//                          PropertyChangeEvent ?-> void vetoableChange = null,
//                        
////                        optional anonymous functions from java.awt.Container
//
//                          ContainerEvent ?-> void componentAdded = null, 
//                          ContainerEvent ?-> void componentRemoved = null,
//                         
////                        optional anonymous functions from java.awt.Component
//
//                          ?String propertyName = null,
//                          ComponentEvent ?-> void componentHidden = null,
//                          ComponentEvent ?-> void componentMoved = null,
//                          ComponentEvent ?-> void componentResized = null,
//                          ComponentEvent ?-> void componentShown = null,
//                          FocusEvent ?-> void focusGained = null,
//                          FocusEvent ?-> void focusLost = null,
//                          HierarchyEvent ?-> void hierarchyAncestorMoved = null,
//                          HierarchyEvent ?-> void hierarchyAncestorResized = null,
//                          HierarchyEvent ?-> void hierarchyChanged = null,
//                          InputMethodEvent ?-> void caretPositionChanged = null,
//                          InputMethodEvent ?-> void inputMethodTextChanged = null,
//                          KeyEvent ?-> void keyPressed = null,
//                          KeyEvent ?-> void keyReleased = null,
//                          KeyEvent ?-> void keyTyped = null, 
//                          MouseEvent ?-> void mouseClicked = null,
//                          MouseEvent ?-> void mouseEntered = null,
//                          MouseEvent ?-> void mouseExited = null,
//                          MouseEvent ?-> void mousePressed = null,
//                          MouseEvent ?-> void mouseReleased = null,   
//                          MouseEvent ?-> void mouseDragged = null,
//                          MouseEvent ?-> void mouseMoved = null,
//                          PropertyChangeEvent ?-> void propertyChange = null
////                        MouseWheelEvent ?-> void mouseWheelMoved = null            
//                          )
//{
//   // only if one of the according optional parameters really has a value, we will create and add the listener object
//   if(stateChanged != null) spinner.addChangeListener(new NiceChangeListener(stateChanged: stateChanged));                                                 
//
//   spinner.addJComponentListeners(ancestorAdded: ancestorAdded,
//                                  ancestorMoved: ancestorMoved,
//                                  ancestorRemoved: ancestorRemoved,
//                                  vetoableChange: vetoableChange,
//                                  componentAdded: componentAdded,
//                                  componentRemoved: componentRemoved,
//                                  propertyName: propertyName,
//                                  componentHidden: componentHidden,
//                                  componentMoved: componentMoved,
//                                  componentResized: componentResized,
//                                  componentShown: componentShown,
//                                  focusGained: focusGained,
//                                  focusLost: focusLost,
//                                  hierarchyAncestorMoved: hierarchyAncestorMoved,
//                                  hierarchyAncestorResized: hierarchyAncestorResized,
//                                  hierarchyChanged: hierarchyChanged,
//                                  caretPositionChanged: caretPositionChanged,
//                                  inputMethodTextChanged: inputMethodTextChanged,
//                                  keyPressed: keyPressed,
//                                  keyReleased: keyReleased,
//                                  keyTyped: keyTyped, 
//                                  mouseEntered: mouseEntered,
//                                  mouseExited: mouseExited,
//                                  mousePressed: mousePressed,
//                                  mouseReleased: mouseReleased,   
//                                  mouseDragged: mouseDragged,
//                                  mouseMoved: mouseMoved,
//                                  propertyChange: propertyChange
////                                mouseWheelMoved: mouseWheelMoved 
//                                  );
//}




// --------------------------------------------------------------------------------------------------
// --------------------- ActionDecorators for javax.swing.JProgressBar ------------------------------
// --------------------------------------------------------------------------------------------------

void addJProgressBarListeners(javax.swing.JProgressBar bar,
                              ChangeEvent ?-> void stateChanged = null,  
                                
//                            optional anonymous functions from java.awt.JComponent

                              AncestorEvent ?-> void ancestorAdded = null,
                              AncestorEvent ?-> void ancestorMoved = null,
                              AncestorEvent ?-> void ancestorRemoved = null,
                              PropertyChangeEvent ?-> void vetoableChange = null,
                         
//                            optional anonymous functions from java.awt.Container

                              ContainerEvent ?-> void componentAdded = null, 
                              ContainerEvent ?-> void componentRemoved = null,
                         
//                            optional anonymous functions from java.awt.Component

                              ?String propertyName = null,
                              ComponentEvent ?-> void componentHidden = null,
                              ComponentEvent ?-> void componentMoved = null,
                              ComponentEvent ?-> void componentResized = null,
                              ComponentEvent ?-> void componentShown = null,
                              FocusEvent ?-> void focusGained = null,
                              FocusEvent ?-> void focusLost = null,
                              HierarchyEvent ?-> void hierarchyAncestorMoved = null,
                              HierarchyEvent ?-> void hierarchyAncestorResized = null,
                              HierarchyEvent ?-> void hierarchyChanged = null,
                              InputMethodEvent ?-> void caretPositionChanged = null,
                              InputMethodEvent ?-> void inputMethodTextChanged = null,
                              KeyEvent ?-> void keyPressed = null,
                              KeyEvent ?-> void keyReleased = null,
                              KeyEvent ?-> void keyTyped = null, 
                              MouseEvent ?-> void mouseClicked = null,
                              MouseEvent ?-> void mouseEntered = null,
                              MouseEvent ?-> void mouseExited = null,
                              MouseEvent ?-> void mousePressed = null,
                              MouseEvent ?-> void mouseReleased = null,   
                              MouseEvent ?-> void mouseDragged = null,
                              MouseEvent ?-> void mouseMoved = null,
                              PropertyChangeEvent ?-> void propertyChange = null
//                            MouseWheelEvent ?-> void mouseWheelMoved = null            
                              )
{
   // only if one of the according optional parameters really has a value, we will create and add the listener object
   if(stateChanged != null) bar.addChangeListener(new NiceChangeListener(stateChanged: stateChanged));                                                 

   bar.addJComponentListeners(ancestorAdded: ancestorAdded,
                              ancestorMoved: ancestorMoved,
                              ancestorRemoved: ancestorRemoved,
                              vetoableChange: vetoableChange,
                              componentAdded: componentAdded,
                              componentRemoved: componentRemoved,
                              propertyName: propertyName,
                              componentHidden: componentHidden,
                              componentMoved: componentMoved,
                              componentResized: componentResized,
                              componentShown: componentShown,
                              focusGained: focusGained,
                              focusLost: focusLost,
                              hierarchyAncestorMoved: hierarchyAncestorMoved,
                              hierarchyAncestorResized: hierarchyAncestorResized,
                              hierarchyChanged: hierarchyChanged,
                              caretPositionChanged: caretPositionChanged,
                              inputMethodTextChanged: inputMethodTextChanged,
                              keyPressed: keyPressed,
                              keyReleased: keyReleased,
                              keyTyped: keyTyped, 
                              mouseEntered: mouseEntered,
                              mouseExited: mouseExited,
                              mousePressed: mousePressed,
                              mouseReleased: mouseReleased,   
                              mouseDragged: mouseDragged,
                              mouseMoved: mouseMoved,
                              propertyChange: propertyChange
//                            mouseWheelMoved: mouseWheelMoved 
                              );
}


// --------------------------------------------------------------------------------------------------
// --------------------- ActionDecorators for javax.swing.UIDefaults --------------------------------
// --------------------------------------------------------------------------------------------------
//Compiling package nice.lang
//Compiling package stuff
//.\stuff\NiceSwingActionDecorators.nice: line 745, column 29:
//javax.swing.UIDefaults has 2 type parameters
//
// comment: javax.swing.UIDefaults inherits from java.util.Hashtable
// --------------------------------------------------------------------------------------------------
//
//void addUIDefaultsListeners(javax.swing.UIDefaults defaults,
//                            PropertyChangeEvent ?-> void propertyChange = null       
//                            )
//{
//   defaults.addPropertyChangeListener(new NicePropertyChangeListener(propertyChange: propertyChange));                                                 
//}

// --------------------------------------------------------------------------------------------------
// --------------------- ActionDecorators for javax.swing.UIManager ---------------------------------
// --------------------------------------------------------------------------------------------------
//Compiling package nice.lang
//Compiling package stuff
//.\stuff\NiceSwingActionDecorators.nice: line 762, column 12:
//No possible call for addPropertyChangeListener.
//Arguments: (javax.swing.UIManager, stuff.NicePropertyChangeListener)
//Possibilities:
//nice.lang.void addPropertyChangeListener(javax.swing.table.TableColumn, ?java.beans.PropertyChangeListener)
//nice.lang.void addPropertyChangeListener(javax.swing.Action, ?java.beans.PropertyChangeListener)
//nice.lang.void addPropertyChangeListener(java.awt.Component, ?java.beans.PropertyChangeListener)
//nice.lang.void addPropertyChangeListener(java.beans.PropertyChangeSupport, ?java.beans.PropertyChangeListener)
//nice.lang.void addPropertyChangeListener(javax.accessibility.AccessibleContext, ?java.beans.PropertyChangeListener)
//
// comment: UIManager.addPropertyChangeListener is declared static in UIManager
//          general question: how can I handle this ?
// --------------------------------------------------------------------------------------------------
//
void addUIManagerListeners(PropertyChangeEvent ?-> void propertyChange = null)
{
   // only if one of the according optional parameters really has a value, we will create and add the listener object
   if(propertyChange != null) UIManager.addPropertyChangeListener(new NicePropertyChangeListener(propertyChange: propertyChange));                                                 
}


// --------------------------------------------------------------------------------------------------
// --------------------- ActionDecorators for javax.swing.Timer --------------------------
// --------------------------------------------------------------------------------------------------

void addTimerListeners(javax.swing.Timer timer,
                       ActionEvent ?-> void actionPerformed = null       
                       )
{
   // only if one of the according optional parameters really has a value, we will create and add the listener object
   if(actionPerformed != null) timer.addActionListener(new NiceActionListener(actionPerformed: actionPerformed));                                                 
}


// --------------------------------------------------------------------------------------------------
// --------------------- ActionDecorators for javax.swing.undo.UndoableEditSupport --------------------------
// --------------------------------------------------------------------------------------------------

void addUndoableEditSupportListeners(javax.swing.undo.UndoableEditSupport support,
                                  UndoableEditEvent ?-> void undoableEditHappened = null       
                                  )
{
   // only if one of the according optional parameters really has a value, we will create and add the listener object
   if(undoableEditHappened != null) support.addUndoableEditListener(new NiceUndoableEditListener(undoableEditHappened: undoableEditHappened));                                                 
}


// --------------------------------------------------------------------------------------------------
// --------------------- ActionDecorators for javax.swing.table.TableColumn --------------------------
// --------------------------------------------------------------------------------------------------

void addTableColumnListeners(javax.swing.table.TableColumn tableColumn,
                                  PropertyChangeEvent ?-> void propertyChange = null       
                                  )
{
   // only if one of the according optional parameters really has a value, we will create and add the listener object
   if(propertyChange != null) tableColumn.addPropertyChangeListener(new NicePropertyChangeListener(propertyChange: propertyChange));                                                 
}


// --------------------------------------------------------------------------------------------------
// --------------------- ActionDecorators for javax.swing.table.TableColumnModel --------------------------
// --------------------------------------------------------------------------------------------------

void addTableColumnModelListeners(javax.swing.table.TableColumnModel tableColumnModel,
                                  TableColumnModelEvent ?-> void columnAdded = null,
                                  TableColumnModelEvent ?-> void columnMoved = null,
                                  TableColumnModelEvent ?-> void columnRemoved = null,
                                  ListSelectionEvent ?-> void columnSelectionChanged = null,
                                  ChangeEvent ?-> void columnMarginChanged = null         
                                  )
{

   // only if one of the according optional parameters really has a value, we will create and add the listener object
   if(columnAdded != null ||
      columnMoved != null ||
      columnRemoved != null ||
      columnSelectionChanged != null ||
      columnMarginChanged != null
      )
   {
      tableColumnModel.addColumnModelListener(new NiceTableColumnModelListener(columnAdded: columnAdded,
                                                                               columnMoved: columnMoved,
                                                                               columnRemoved: columnRemoved,
                                                                               columnSelectionChanged: columnSelectionChanged,
                                                                               columnMarginChanged: columnMarginChanged
                                                                               ));                                                 
   }
}

// --------------------------------------------------------------------------------------------------
// --------------------- ActionDecorators for javax.swing.table.TableModel --------------------------
// --------------------------------------------------------------------------------------------------

void addTableModelListeners(javax.swing.table.TableModel tableModel,
                            TableModelEvent ?-> void tableChanged = null            
                            )
{
   // only if one of the according optional parameters really has a value, we will create and add the listener object
   if(tableChanged != null) tableModel.addTableModelListener(new NiceTableModelListener(tableChanged: tableChanged));                                                 
}


// --------------------------------------------------------------------------------------------------
// --------------------- ActionDecorators for javax.swing.AbstractCellEditor ----------------
// --------------------------------------------------------------------------------------------------

void addAbstractCellEditorListeners(javax.swing.AbstractCellEditor editor,
                            ChangeEvent ?-> void editingCanceled = null,
                            ChangeEvent ?-> void editingStopped = null          
                            )
{

   // only if one of the according optional parameters really has a value, we will create and add the listener object
   if(editingCanceled != null ||
      editingStopped != null
      )
   {
      editor.addCellEditorListener(new NiceCellEditorListener(editingCanceled: editingCanceled,
                                                              editingStopped: editingStopped
                                                              ));                                                 
   }
}


// --------------------------------------------------------------------------------------------------
// --------------------- ActionDecorators for javax.swing.DefaultSingleSelectionModel -----------------
// --------------------------------------------------------------------------------------------------

void addDefaultSingleSelectionModelListeners(javax.swing.DefaultSingleSelectionModel model,
                                             ChangeEvent ?-> void stateChanged = null      
                                             )
{
   // only if one of the according optional parameters really has a value, we will create and add the listener object
   if(stateChanged != null) model.addChangeListener(new NiceChangeListener(stateChanged: stateChanged));                                                 
}



// --------------------------------------------------------------------------------------------------
// --------------------- ActionDecorators for javax.swing.colorchooser.DefaultColorSelectionModel ---
// --------------------------------------------------------------------------------------------------

void addDefaultColorSelectionModelListeners(javax.swing.colorchooser.DefaultColorSelectionModel model,
                                            ChangeEvent ?-> void stateChanged = null      
                                            )
{
   // only if one of the according optional parameters really has a value, we will create and add the listener object
   if(stateChanged != null) model.addChangeListener(new NiceChangeListener(stateChanged: stateChanged));                                                 
}


// --------------------------------------------------------------------------------------------------
// --------------------- ActionDecorators for javax.swing.colorchooser.DefaultBoundedRangeModel -----
// --------------------------------------------------------------------------------------------------

void addDefaultBoundedRangeModelListeners(javax.swing.DefaultBoundedRangeModel model,
                                            ChangeEvent ?-> void stateChanged = null      
                                            )
{
   // only if one of the according optional parameters really has a value, we will create and add the listener object
   if(stateChanged != null) model.addChangeListener(new NiceChangeListener(stateChanged: stateChanged));                                                 
}

// --------------------------------------------------------------------------------------------------
// --------------------- ActionDecorators for javax.swing.DefaultListSelectionModel -----------------
// --------------------------------------------------------------------------------------------------

void addDefaultListSelectionModelListeners(javax.swing.DefaultListSelectionModel model,
                                           ListSelectionEvent ?-> void listSelectionValueChanged = null      
                                           )
{
   // only if one of the according optional parameters really has a value, we will create and add the listener object
   if(listSelectionValueChanged != null) model.addListSelectionListener(new NiceListSelectionListener(listSelectionValueChanged: listSelectionValueChanged));                                                 
}


// --------------------------------------------------------------------------------------------------
// --------------------- ActionDecorators for javax.swing.AbstractListModel -------------------------
// --------------------------------------------------------------------------------------------------

void addAbstractListModelListeners(javax.swing.AbstractListModel model,
                                   ListDataEvent ?-> void contentsChanged = null,
                                   ListDataEvent ?-> void intervalAdded = null,
                                   ListDataEvent ?-> void intervalRemoved = null        
                                   )
{

   // only if one of the according optional parameters really has a value, we will create and add the listener object
   if(contentsChanged != null ||
      intervalAdded != null ||
      intervalRemoved != null
      ) 
   {
      model.addListDataListener(new NiceListDataListener(contentsChanged: contentsChanged,
                                                         intervalAdded: intervalAdded,
                                                         intervalRemoved: intervalRemoved
                                                         ));                                                 
   }
}


// --------------------------------------------------------------------------------------------------
// --------------------- ActionDecorators for javax.swing.DefaultButtonModel ----------------
// --------------------------------------------------------------------------------------------------

void addDefaultButtonModelListeners(javax.swing.DefaultButtonModel model,
                                    ActionEvent ?-> void actionPerformed = null,
                                    ChangeEvent ?-> void stateChanged = null,
                                    ItemEvent ?-> void itemStateChanged = null        
                                    )
{
   // only if one of the according optional parameters really has a value, we will create and add the listener object
   if(actionPerformed != null) model.addActionListener(new NiceActionListener(actionPerformed: actionPerformed));  
   
   // only if one of the according optional parameters really has a value, we will create and add the listener object
   if(stateChanged != null) model.addChangeListener(new NiceChangeListener(stateChanged: stateChanged)); 
   
   // only if one of the according optional parameters really has a value, we will create and add the listener object
   if(itemStateChanged != null) model.addItemListener(new NiceItemListener(itemStateChanged: itemStateChanged));                                                
}


//// --------------------------------------------------------------------------------------------------
//// --------------------- ActionDecorators for javax.swing.AbstractSpinnerModel ----------------
//// --------------------------------------------------------------------------------------------------
//
//void addAbstractSpinnerModelListeners(javax.swing.AbstractSpinnerModel model,
//                                      ChangeEvent ?-> void stateChanged = null      
//                                      )
//{
//  // only if one of the according optional parameters really has a value, we will create and add the listener object
//  if(stateChanged != null) model.addChangeListener(new NiceListDataListener(stateChanged: stateChanged));                                                 
//}


// --------------------------------------------------------------------------------------------------
// --------------------- ActionDecorators for javax.swing.text.DefaultCaret -------------------------
// --------------------------------------------------------------------------------------------------

void addDefaultCaretListeners(javax.swing.text.DefaultCaret caret,
                            ChangeEvent ?-> void stateChanged = null         
                            )
{
   // only if one of the according optional parameters really has a value, we will create and add the listener object
   if(stateChanged != null) caret.addChangeListener(new NiceChangeListener(stateChanged: stateChanged));                                                 
}


// --------------------------------------------------------------------------------------------------
// --------------------- ActionDecorators for javax.swing.tree.DefaultTreeModel ---------------------
// --------------------------------------------------------------------------------------------------

void addTreeModelListeners(javax.swing.tree.DefaultTreeModel model,
                           TreeModelEvent ?-> void treeNodesChanged = null,
                           TreeModelEvent ?-> void treeNodesInserted = null,
                           TreeModelEvent ?-> void treeNodesRemoved = null,
                           TreeModelEvent ?-> void treeStructureChanged = null        
                           )
{

   // only if one of the according optional parameters really has a value, we will create and add the listener object
   if(treeNodesChanged != null ||
      treeNodesInserted != null ||
      treeNodesRemoved != null ||
      treeStructureChanged != null
      )
   {
      model.addTreeModelListener(new NiceTreeModelListener(treeNodesChanged: treeNodesChanged,
                                                           treeNodesInserted: treeNodesInserted,
                                                           treeNodesRemoved: treeNodesRemoved,
                                                           treeStructureChanged: treeStructureChanged
                                                           ));                                                 
   }
}


// --------------------------------------------------------------------------------------------------
// --------------------- ActionDecorators for javax.swing.tree.DefaultTreeSelectionModel ------------
// --------------------------------------------------------------------------------------------------

void addDefaultTreeSelectionModelListeners(javax.swing.tree.DefaultTreeSelectionModel model,
                                    PropertyChangeEvent ?-> void propertyChange = null,
                                    TreeSelectionEvent ?-> void treeSelectionValueChanged = null       
                                    )
{
   // only if one of the according optional parameters really has a value, we will create and add the listener object
   if(propertyChange != null) model.addPropertyChangeListener(new NicePropertyChangeListener(propertyChange: propertyChange));    
   
   // only if one of the according optional parameters really has a value, we will create and add the listener object
   if(treeSelectionValueChanged != null) model.addTreeSelectionListener(new NiceTreeSelectionListener(treeSelectionValueChanged: treeSelectionValueChanged));                                             
}


// --------------------------------------------------------------------------------------------------
// --------------------- ActionDecorators for javax.swing.text.AbstractDocument ------------
// --------------------------------------------------------------------------------------------------

void addAbstractDocumentListeners(javax.swing.text.AbstractDocument document,
                                  DocumentEvent ?-> void changedUpdate = null,
                                  DocumentEvent ?-> void insertUpdate = null,
                                  DocumentEvent ?-> void removeUpdate = null,                                   
                                  UndoableEditEvent ?-> void undoableEditHappened = null       
                                  )
{

   // only if one of the according optional parameters really has a value, we will create and add the listener object
   if(changedUpdate != null ||
      insertUpdate != null ||
      removeUpdate != null
      ) 
   {
      document.addDocumentListener(new NiceDocumentListener(changedUpdate: changedUpdate,
                                                            insertUpdate: insertUpdate,
                                                            removeUpdate: removeUpdate
                                                            ));    
   }
   
   
   // only if one of the according optional parameters really has a value, we will create and add the listener object
   if(undoableEditHappened != null) document.addUndoableEditListener(new NiceUndoableEditListener(undoableEditHappened: undoableEditHappened));                                             
}


// --------------------------------------------------------------------------------------------------
// --------------------- ActionDecorators for javax.swing.JViewport ---------------------------------
// --------------------------------------------------------------------------------------------------

void addJViewportListeners(javax.swing.JViewport jViewport,
                           ChangeEvent ?-> void stateChanged = null,  
                                
//                         optional anonymous functions from java.awt.JComponent

                           AncestorEvent ?-> void ancestorAdded = null,
                           AncestorEvent ?-> void ancestorMoved = null,
                           AncestorEvent ?-> void ancestorRemoved = null,
                           PropertyChangeEvent ?-> void vetoableChange = null,
                         
//                         optional anonymous functions from java.awt.Container

                           ContainerEvent ?-> void componentAdded = null, 
                           ContainerEvent ?-> void componentRemoved = null,
                         
//                         optional anonymous functions from java.awt.Component

                           ?String propertyName = null,
                           ComponentEvent ?-> void componentHidden = null,
                           ComponentEvent ?-> void componentMoved = null,
                           ComponentEvent ?-> void componentResized = null,
                           ComponentEvent ?-> void componentShown = null,
                           FocusEvent ?-> void focusGained = null,
                           FocusEvent ?-> void focusLost = null,
                           HierarchyEvent ?-> void hierarchyAncestorMoved = null,
                           HierarchyEvent ?-> void hierarchyAncestorResized = null,
                           HierarchyEvent ?-> void hierarchyChanged = null,
                           InputMethodEvent ?-> void caretPositionChanged = null,
                           InputMethodEvent ?-> void inputMethodTextChanged = null,
                           KeyEvent ?-> void keyPressed = null,
                           KeyEvent ?-> void keyReleased = null,
                           KeyEvent ?-> void keyTyped = null, 
                           MouseEvent ?-> void mouseClicked = null,
                           MouseEvent ?-> void mouseEntered = null,
                           MouseEvent ?-> void mouseExited = null,
                           MouseEvent ?-> void mousePressed = null,
                           MouseEvent ?-> void mouseReleased = null,   
                           MouseEvent ?-> void mouseDragged = null,
                           MouseEvent ?-> void mouseMoved = null,
                           PropertyChangeEvent ?-> void propertyChange = null
//                         MouseWheelEvent ?-> void mouseWheelMoved = null            
                           )
{

   // only if one of the according optional parameters really has a value, we will create and add the listener object
   if(stateChanged != null) jViewport.addChangeListener(new NiceChangeListener(stateChanged: stateChanged));                                                 

   jViewport.addJComponentListeners(ancestorAdded: ancestorAdded,
                                    ancestorMoved: ancestorMoved,
                                    ancestorRemoved: ancestorRemoved,
                                    vetoableChange: vetoableChange,
                                    componentAdded: componentAdded,
                                    componentRemoved: componentRemoved,
                                    propertyName: propertyName,
                                    componentHidden: componentHidden,
                                    componentMoved: componentMoved,
                                    componentResized: componentResized,
                                    componentShown: componentShown,
                                    focusGained: focusGained,
                                    focusLost: focusLost,
                                    hierarchyAncestorMoved: hierarchyAncestorMoved,
                                    hierarchyAncestorResized: hierarchyAncestorResized,
                                    hierarchyChanged: hierarchyChanged,
                                    caretPositionChanged: caretPositionChanged,
                                    inputMethodTextChanged: inputMethodTextChanged,
                                    keyPressed: keyPressed,
                                    keyReleased: keyReleased,
                                    keyTyped: keyTyped, 
                                    mouseEntered: mouseEntered,
                                    mouseExited: mouseExited,
                                    mousePressed: mousePressed,
                                    mouseReleased: mouseReleased,   
                                    mouseDragged: mouseDragged,
                                    mouseMoved: mouseMoved,
                                    propertyChange: propertyChange
//                                  mouseWheelMoved: mouseWheelMoved 
                                    );
}



// --------------------------------------------------------------------------------------------------
// --------------------- ActionDecorators for javax.swing.JTree -------------------------------
// --------------------------------------------------------------------------------------------------

void addJTreeListeners(javax.swing.JTree jTree,
                       TreeExpansionEvent ?-> void treeCollapsed = null,
                       TreeExpansionEvent ?-> void treeExpanded = null, 
                       TreeExpansionEvent ?-> void treeWillExpand = null,
                       TreeExpansionEvent ?-> void treeWillCollapse = null,
                       TreeModelEvent ?-> void treeStructureChanged = null, 
                       TreeSelectionEvent ?-> void treeSelectionValueChanged = null,
                                                      
//                     optional anonymous functions from java.awt.JComponent

                       AncestorEvent ?-> void ancestorAdded = null,
                       AncestorEvent ?-> void ancestorMoved = null,
                       AncestorEvent ?-> void ancestorRemoved = null,
                       PropertyChangeEvent ?-> void vetoableChange = null,
                         
//                     optional anonymous functions from java.awt.Container

                       ContainerEvent ?-> void componentAdded = null, 
                       ContainerEvent ?-> void componentRemoved = null,
                         
//                     optional anonymous functions from java.awt.Component

                       ?String propertyName = null,
                       ComponentEvent ?-> void componentHidden = null,
                       ComponentEvent ?-> void componentMoved = null,
                       ComponentEvent ?-> void componentResized = null,
                       ComponentEvent ?-> void componentShown = null,
                       FocusEvent ?-> void focusGained = null,
                       FocusEvent ?-> void focusLost = null,
                       HierarchyEvent ?-> void hierarchyAncestorMoved = null,
                       HierarchyEvent ?-> void hierarchyAncestorResized = null,
                       HierarchyEvent ?-> void hierarchyChanged = null,
                       InputMethodEvent ?-> void caretPositionChanged = null,
                       InputMethodEvent ?-> void inputMethodTextChanged = null,
                       KeyEvent ?-> void keyPressed = null,
                       KeyEvent ?-> void keyReleased = null,
                       KeyEvent ?-> void keyTyped = null, 
                       MouseEvent ?-> void mouseClicked = null,
                       MouseEvent ?-> void mouseEntered = null,
                       MouseEvent ?-> void mouseExited = null,
                       MouseEvent ?-> void mousePressed = null,
                       MouseEvent ?-> void mouseReleased = null,   
                       MouseEvent ?-> void mouseDragged = null,
                       MouseEvent ?-> void mouseMoved = null,
                       PropertyChangeEvent ?-> void propertyChange = null
//                     MouseWheelEvent ?-> void mouseWheelMoved = null            
                       )
{

   // only if one of the according optional parameters really has a value, we will create and add the listener object
   if(treeCollapsed != null ||
      treeExpanded != null
      ) 
   {   
      jTree.addTreeExpansionListener(new NiceTreeExpansionListener(treeCollapsed: treeCollapsed,
                                                                   treeExpanded: treeExpanded
                                                                   ));       
   }
                                                                                                 
   // only if one of the according optional parameters really has a value, we will create and add the listener object
   if(treeSelectionValueChanged != null) jTree.addTreeSelectionListener(new NiceTreeSelectionListener(treeSelectionValueChanged: treeSelectionValueChanged)); 


   // only if one of the according optional parameters really has a value, we will create and add the listener object
   if(treeWillCollapse != null ||
      treeWillExpand != null
      )  
   {  
      jTree.addTreeWillExpandListener(new NiceTreeWillExpandListener(treeWillCollapse: treeWillCollapse,
                                                                     treeWillExpand: treeWillExpand
                                                                     ));  
   }
                                                                
   jTree.addJComponentListeners(ancestorAdded: ancestorAdded,
                                ancestorMoved: ancestorMoved,
                                ancestorRemoved: ancestorRemoved,
                                vetoableChange: vetoableChange,
                                componentAdded: componentAdded,
                                componentRemoved: componentRemoved,
                                propertyName: propertyName,
                                componentHidden: componentHidden,
                                componentMoved: componentMoved,
                                componentResized: componentResized,
                                componentShown: componentShown,
                                focusGained: focusGained,
                                focusLost: focusLost,
                                hierarchyAncestorMoved: hierarchyAncestorMoved,
                                hierarchyAncestorResized: hierarchyAncestorResized,
                                hierarchyChanged: hierarchyChanged,
                                caretPositionChanged: caretPositionChanged,
                                inputMethodTextChanged: inputMethodTextChanged,
                                keyPressed: keyPressed,
                                keyReleased: keyReleased,
                                keyTyped: keyTyped, 
                                mouseEntered: mouseEntered,
                                mouseExited: mouseExited,
                                mousePressed: mousePressed,
                                mouseReleased: mouseReleased,   
                                mouseDragged: mouseDragged,
                                mouseMoved: mouseMoved,
                                propertyChange: propertyChange
//                              mouseWheelMoved: mouseWheelMoved 
                                );
}



// --------------------------------------------------------------------------------------------------
// --------------------- ActionDecorators for javax.swing.JTabbedPane -------------------------------
// --------------------------------------------------------------------------------------------------

void addJTabbedPaneListeners(javax.swing.JTabbedPane pane,
                             ChangeEvent ?-> void stateChanged = null,  
                                
//                           optional anonymous functions from java.awt.JComponent

                             AncestorEvent ?-> void ancestorAdded = null,
                             AncestorEvent ?-> void ancestorMoved = null,
                             AncestorEvent ?-> void ancestorRemoved = null,
                             PropertyChangeEvent ?-> void vetoableChange = null,
                         
//                           optional anonymous functions from java.awt.Container

                             ContainerEvent ?-> void componentAdded = null, 
                             ContainerEvent ?-> void componentRemoved = null,
                         
//                           optional anonymous functions from java.awt.Component

                             ?String propertyName = null,
                             ComponentEvent ?-> void componentHidden = null,
                             ComponentEvent ?-> void componentMoved = null,
                             ComponentEvent ?-> void componentResized = null,
                             ComponentEvent ?-> void componentShown = null,
                             FocusEvent ?-> void focusGained = null,
                             FocusEvent ?-> void focusLost = null,
                             HierarchyEvent ?-> void hierarchyAncestorMoved = null,
                             HierarchyEvent ?-> void hierarchyAncestorResized = null,
                             HierarchyEvent ?-> void hierarchyChanged = null,
                             InputMethodEvent ?-> void caretPositionChanged = null,
                             InputMethodEvent ?-> void inputMethodTextChanged = null,
                             KeyEvent ?-> void keyPressed = null,
                             KeyEvent ?-> void keyReleased = null,
                             KeyEvent ?-> void keyTyped = null, 
                             MouseEvent ?-> void mouseClicked = null,
                             MouseEvent ?-> void mouseEntered = null,
                             MouseEvent ?-> void mouseExited = null,
                             MouseEvent ?-> void mousePressed = null,
                             MouseEvent ?-> void mouseReleased = null,   
                             MouseEvent ?-> void mouseDragged = null,
                             MouseEvent ?-> void mouseMoved = null,
                             PropertyChangeEvent ?-> void propertyChange = null
//                           MouseWheelEvent ?-> void mouseWheelMoved = null            
                             )
{

   // only if one of the according optional parameters really has a value, we will create and add the listener object
   if(stateChanged != null) pane.addChangeListener(new NiceChangeListener(stateChanged: stateChanged));                                                 

   pane.addJComponentListeners(ancestorAdded: ancestorAdded,
                               ancestorMoved: ancestorMoved,
                               ancestorRemoved: ancestorRemoved,
                               vetoableChange: vetoableChange,
                               componentAdded: componentAdded,
                               componentRemoved: componentRemoved,
                               propertyName: propertyName,
                               componentHidden: componentHidden,
                               componentMoved: componentMoved,
                               componentResized: componentResized,
                               componentShown: componentShown,
                               focusGained: focusGained,
                               focusLost: focusLost,
                               hierarchyAncestorMoved: hierarchyAncestorMoved,
                               hierarchyAncestorResized: hierarchyAncestorResized,
                               hierarchyChanged: hierarchyChanged,
                               caretPositionChanged: caretPositionChanged,
                               inputMethodTextChanged: inputMethodTextChanged,
                               keyPressed: keyPressed,
                               keyReleased: keyReleased,
                               keyTyped: keyTyped, 
                               mouseEntered: mouseEntered,
                               mouseExited: mouseExited,
                               mousePressed: mousePressed,
                               mouseReleased: mouseReleased,   
                               mouseDragged: mouseDragged,
                               mouseMoved: mouseMoved,
                               propertyChange: propertyChange
//                             mouseWheelMoved: mouseWheelMoved 
                               );
}



// --------------------------------------------------------------------------------------------------
// --------------------- ActionDecorators for javax.swing.JInternalFrame ---------------------------------------
// --------------------------------------------------------------------------------------------------

void addInternalFrameListeners(javax.swing.JInternalFrame frame,
                               InternalFrameEvent ?-> void internalFrameActivated = null,
                               InternalFrameEvent ?-> void internalFrameClosed = null,
                               InternalFrameEvent ?-> void internalFrameClosing = null,
                               InternalFrameEvent ?-> void internalFrameDeactivated = null,
                               InternalFrameEvent ?-> void internalFrameDeiconified = null,
                               InternalFrameEvent ?-> void internalFrameIconified = null,
                               InternalFrameEvent ?-> void internalFrameOpened = null, 
                               
//                             optional anonymous functions from java.awt.JComponent

                               AncestorEvent ?-> void ancestorAdded = null,
                               AncestorEvent ?-> void ancestorMoved = null,
                               AncestorEvent ?-> void ancestorRemoved = null,
                               PropertyChangeEvent ?-> void vetoableChange = null,
                        
//                             optional anonymous functions from java.awt.Container
        
                               ContainerEvent ?-> void componentAdded = null, 
                               ContainerEvent ?-> void componentRemoved = null,
                         
//                             optional anonymous functions from java.awt.Component

                               ?String propertyName = null,
                               ComponentEvent ?-> void componentHidden = null,
                               ComponentEvent ?-> void componentMoved = null,
                               ComponentEvent ?-> void componentResized = null,
                               ComponentEvent ?-> void componentShown = null,
                               FocusEvent ?-> void focusGained = null,
                               FocusEvent ?-> void focusLost = null,
                               HierarchyEvent ?-> void hierarchyAncestorMoved = null,
                               HierarchyEvent ?-> void hierarchyAncestorResized = null,
                               HierarchyEvent ?-> void hierarchyChanged = null,
                               InputMethodEvent ?-> void caretPositionChanged = null,
                               InputMethodEvent ?-> void inputMethodTextChanged = null,
                               KeyEvent ?-> void keyPressed = null,
                               KeyEvent ?-> void keyReleased = null,
                               KeyEvent ?-> void keyTyped = null, 
                               MouseEvent ?-> void mouseClicked = null,
                               MouseEvent ?-> void mouseEntered = null,
                               MouseEvent ?-> void mouseExited = null,
                               MouseEvent ?-> void mousePressed = null,
                               MouseEvent ?-> void mouseReleased = null,   
                               MouseEvent ?-> void mouseDragged = null,
                               MouseEvent ?-> void mouseMoved = null,
                               PropertyChangeEvent ?-> void propertyChange = null
//                             MouseWheelEvent ?-> void mouseWheelMoved = null            
                               )
{
   // only if one of the according optional parameters really has a value, we will create and add the listener object
   if(internalFrameActivated != null || 
      internalFrameClosed != null ||
      internalFrameClosing != null ||
      internalFrameDeactivated != null ||
      internalFrameDeiconified != null ||
      internalFrameIconified != null ||
      internalFrameOpened != null
      )
   {
      frame.addInternalFrameListener(new NiceInternalFrameListener(internalFrameActivated: internalFrameActivated,
                                                                   internalFrameClosed: internalFrameClosed,
                                                                   internalFrameClosing: internalFrameClosing,
                                                                   internalFrameDeactivated: internalFrameDeactivated,
                                                                   internalFrameDeiconified: internalFrameDeiconified,
                                                                   internalFrameIconified: internalFrameIconified,
                                                                   internalFrameOpened: internalFrameOpened
                                                                   ));                                                 
   }
   
   frame.addJComponentListeners(ancestorAdded: ancestorAdded,
                                ancestorMoved: ancestorMoved,
                                ancestorRemoved: ancestorRemoved,
                                vetoableChange: vetoableChange,
                                componentAdded: componentAdded,
                                componentRemoved: componentRemoved,
                                propertyName: propertyName,
                                componentHidden: componentHidden,
                                componentMoved: componentMoved,
                                componentResized: componentResized,
                                componentShown: componentShown,
                                focusGained: focusGained,
                                focusLost: focusLost,
                                hierarchyAncestorMoved: hierarchyAncestorMoved,
                                hierarchyAncestorResized: hierarchyAncestorResized,
                                hierarchyChanged: hierarchyChanged,
                                caretPositionChanged: caretPositionChanged,
                                inputMethodTextChanged: inputMethodTextChanged,
                                keyPressed: keyPressed,
                                keyReleased: keyReleased,
                                keyTyped: keyTyped, 
                                mouseEntered: mouseEntered,
                                mouseExited: mouseExited,
                                mousePressed: mousePressed,
                                mouseReleased: mouseReleased,   
                                mouseDragged: mouseDragged,
                                mouseMoved: mouseMoved,
                                propertyChange: propertyChange
//                              mouseWheelMoved: mouseWheelMoved 
                                );
}



// --------------------------------------------------------------------------------------------------
// --------------------- ActionDecorators for javax.swing.JPopupMenu ---------------------------------------
// --------------------------------------------------------------------------------------------------

void addJPopupMenuListeners(javax.swing.JPopupMenu jPopupMenu,
                            PopupMenuEvent ?-> void popupMenuCanceled = null,
                            PopupMenuEvent ?-> void popupMenuWillBecomeInvisible = null,
                            PopupMenuEvent ?-> void popupMenuWillBecomeVisible = null,
                               
//                          optional anonymous functions from java.awt.JComponent

                            AncestorEvent ?-> void ancestorAdded = null,
                            AncestorEvent ?-> void ancestorMoved = null,
                            AncestorEvent ?-> void ancestorRemoved = null,
                            PropertyChangeEvent ?-> void vetoableChange = null,
                        
//                          optional anonymous functions from java.awt.Container
        
                            ContainerEvent ?-> void componentAdded = null, 
                            ContainerEvent ?-> void componentRemoved = null,
                         
//                          optional anonymous functions from java.awt.Component

                            ?String propertyName = null,
                            ComponentEvent ?-> void componentHidden = null,
                            ComponentEvent ?-> void componentMoved = null,
                            ComponentEvent ?-> void componentResized = null,
                            ComponentEvent ?-> void componentShown = null,
                            FocusEvent ?-> void focusGained = null,
                            FocusEvent ?-> void focusLost = null,
                            HierarchyEvent ?-> void hierarchyAncestorMoved = null,
                            HierarchyEvent ?-> void hierarchyAncestorResized = null,
                            HierarchyEvent ?-> void hierarchyChanged = null,
                            InputMethodEvent ?-> void caretPositionChanged = null,
                            InputMethodEvent ?-> void inputMethodTextChanged = null,
                            KeyEvent ?-> void keyPressed = null,
                            KeyEvent ?-> void keyReleased = null,
                            KeyEvent ?-> void keyTyped = null, 
                            MouseEvent ?-> void mouseClicked = null,
                            MouseEvent ?-> void mouseEntered = null,
                            MouseEvent ?-> void mouseExited = null,
                            MouseEvent ?-> void mousePressed = null,
                            MouseEvent ?-> void mouseReleased = null,   
                            MouseEvent ?-> void mouseDragged = null,
                            MouseEvent ?-> void mouseMoved = null,
                            PropertyChangeEvent ?-> void propertyChange = null
//                          MouseWheelEvent ?-> void mouseWheelMoved = null            
                            )
{

   // only if one of the according optional parameters really has a value, we will create and add the listener object
   if(popupMenuCanceled != null ||
      popupMenuWillBecomeInvisible != null ||
      popupMenuWillBecomeVisible != null
      ) 
   {
      jPopupMenu.addPopupMenuListener(new NicePopupMenuListener(popupMenuCanceled: popupMenuCanceled,
                                                                popupMenuWillBecomeInvisible: popupMenuWillBecomeInvisible,
                                                                popupMenuWillBecomeVisible: popupMenuWillBecomeVisible
                                                                ));                                                 
   }
   
   jPopupMenu.addJComponentListeners(ancestorAdded: ancestorAdded,
                                     ancestorMoved: ancestorMoved,
                                     ancestorRemoved: ancestorRemoved,
                                     vetoableChange: vetoableChange,
                                     componentAdded: componentAdded,
                                     componentRemoved: componentRemoved,
                                     propertyName: propertyName,
                                     componentHidden: componentHidden,
                                     componentMoved: componentMoved,
                                     componentResized: componentResized,
                                     componentShown: componentShown,
                                     focusGained: focusGained,
                                     focusLost: focusLost,
                                     hierarchyAncestorMoved: hierarchyAncestorMoved,
                                     hierarchyAncestorResized: hierarchyAncestorResized,
                                     hierarchyChanged: hierarchyChanged,
                                     caretPositionChanged: caretPositionChanged,
                                     inputMethodTextChanged: inputMethodTextChanged,
                                     keyPressed: keyPressed,
                                     keyReleased: keyReleased,
                                     keyTyped: keyTyped, 
                                     mouseEntered: mouseEntered,
                                     mouseExited: mouseExited,
                                     mousePressed: mousePressed,
                                     mouseReleased: mouseReleased,   
                                     mouseDragged: mouseDragged,
                                     mouseMoved: mouseMoved,
                                     propertyChange: propertyChange
//                                   mouseWheelMoved: mouseWheelMoved 
                                     );
}



// --------------------------------------------------------------------------------------------------
// --------------------- ActionDecorators for javax.swing.JList ---------------------------------------
// --------------------------------------------------------------------------------------------------

void addJListListeners(javax.swing.JList jList,
                       ListSelectionEvent ?-> void listSelectionValueChanged = null,
                               
//                     optional anonymous functions from javax.swing.JComponent

                       AncestorEvent ?-> void ancestorAdded = null,
                       AncestorEvent ?-> void ancestorMoved = null,
                       AncestorEvent ?-> void ancestorRemoved = null,
                       PropertyChangeEvent ?-> void vetoableChange = null,
                        
//                     optional anonymous functions from java.awt.Container
        
                       ContainerEvent ?-> void componentAdded = null, 
                       ContainerEvent ?-> void componentRemoved = null,
                         
//                     optional anonymous functions from java.awt.Component

                       ?String propertyName = null,
                       ComponentEvent ?-> void componentHidden = null,
                       ComponentEvent ?-> void componentMoved = null,
                       ComponentEvent ?-> void componentResized = null,
                       ComponentEvent ?-> void componentShown = null,
                       FocusEvent ?-> void focusGained = null,
                       FocusEvent ?-> void focusLost = null,
                       HierarchyEvent ?-> void hierarchyAncestorMoved = null,
                       HierarchyEvent ?-> void hierarchyAncestorResized = null,
                       HierarchyEvent ?-> void hierarchyChanged = null,
                       InputMethodEvent ?-> void caretPositionChanged = null,
                       InputMethodEvent ?-> void inputMethodTextChanged = null,
                       KeyEvent ?-> void keyPressed = null,
                       KeyEvent ?-> void keyReleased = null,
                       KeyEvent ?-> void keyTyped = null, 
                       MouseEvent ?-> void mouseClicked = null,
                       MouseEvent ?-> void mouseEntered = null,
                       MouseEvent ?-> void mouseExited = null,
                       MouseEvent ?-> void mousePressed = null,
                       MouseEvent ?-> void mouseReleased = null,   
                       MouseEvent ?-> void mouseDragged = null,
                       MouseEvent ?-> void mouseMoved = null,
                       PropertyChangeEvent ?-> void propertyChange = null
//                     MouseWheelEvent ?-> void mouseWheelMoved = null            
                       )
{

   // only if one of the according optional parameters really has a value, we will create and add the listener object
   if(listSelectionValueChanged != null) jList.addListSelectionListener(new NiceListSelectionListener(listSelectionValueChanged: listSelectionValueChanged));                                                 

   jList.addJComponentListeners(ancestorAdded: ancestorAdded,
                                ancestorMoved: ancestorMoved,
                                ancestorRemoved: ancestorRemoved,
                                vetoableChange: vetoableChange,
                                componentAdded: componentAdded,
                                componentRemoved: componentRemoved,
                                propertyName: propertyName,
                                componentHidden: componentHidden,
                                componentMoved: componentMoved,
                                componentResized: componentResized,
                                componentShown: componentShown,
                                focusGained: focusGained,
                                focusLost: focusLost,
                                hierarchyAncestorMoved: hierarchyAncestorMoved,
                                hierarchyAncestorResized: hierarchyAncestorResized,
                                hierarchyChanged: hierarchyChanged,
                                caretPositionChanged: caretPositionChanged,
                                inputMethodTextChanged: inputMethodTextChanged,
                                keyPressed: keyPressed,
                                keyReleased: keyReleased,
                                keyTyped: keyTyped, 
                                mouseEntered: mouseEntered,
                                mouseExited: mouseExited,
                                mousePressed: mousePressed,
                                mouseReleased: mouseReleased,   
                                mouseDragged: mouseDragged,
                                mouseMoved: mouseMoved,
                                propertyChange: propertyChange
//                              mouseWheelMoved: mouseWheelMoved 
                                );
}


// --------------------------------------------------------------------------------------------------
// --------------------- ActionDecorators for javax.swing.JComboBox ---------------------------------------
// --------------------------------------------------------------------------------------------------

void addJComboBoxListeners(javax.swing.JComboBox combo,
                           ActionEvent ?-> void actionPerformed = null,
                               
//                         optional anonymous functions from javax.swing.JComponent
    
                           AncestorEvent ?-> void ancestorAdded = null,
                           AncestorEvent ?-> void ancestorMoved = null,
                           AncestorEvent ?-> void ancestorRemoved = null,
                           PropertyChangeEvent ?-> void vetoableChange = null,
                            
//                         optional anonymous functions from java.awt.Container
            
                           ContainerEvent ?-> void componentAdded = null, 
                           ContainerEvent ?-> void componentRemoved = null,
                             
//                         optional anonymous functions from java.awt.Component
    
                           ?String propertyName = null,
                           ComponentEvent ?-> void componentHidden = null,
                           ComponentEvent ?-> void componentMoved = null,
                           ComponentEvent ?-> void componentResized = null,
                           ComponentEvent ?-> void componentShown = null,
                           FocusEvent ?-> void focusGained = null,
                           FocusEvent ?-> void focusLost = null,
                           HierarchyEvent ?-> void hierarchyAncestorMoved = null,
                           HierarchyEvent ?-> void hierarchyAncestorResized = null,
                           HierarchyEvent ?-> void hierarchyChanged = null,
                           InputMethodEvent ?-> void caretPositionChanged = null,
                           InputMethodEvent ?-> void inputMethodTextChanged = null,
                           KeyEvent ?-> void keyPressed = null,
                           KeyEvent ?-> void keyReleased = null,
                           KeyEvent ?-> void keyTyped = null, 
                           MouseEvent ?-> void mouseClicked = null,
                           MouseEvent ?-> void mouseEntered = null,
                           MouseEvent ?-> void mouseExited = null,
                           MouseEvent ?-> void mousePressed = null,
                           MouseEvent ?-> void mouseReleased = null,   
                           MouseEvent ?-> void mouseDragged = null,
                           MouseEvent ?-> void mouseMoved = null,
                           PropertyChangeEvent ?-> void propertyChange = null
//                         MouseWheelEvent ?-> void mouseWheelMoved = null            
                           )
{

   // only if one of the according optional parameters really has a value, we will create and add the listener object
   if(actionPerformed != null) combo.addActionListener(new NiceActionListener(actionPerformed: actionPerformed));                                                 

   combo.addJComponentListeners(ancestorAdded: ancestorAdded,
                                ancestorMoved: ancestorMoved,
                                ancestorRemoved: ancestorRemoved,
                                vetoableChange: vetoableChange,
                                componentAdded: componentAdded,
                                componentRemoved: componentRemoved,
                                propertyName: propertyName,
                                componentHidden: componentHidden,
                                componentMoved: componentMoved,
                                componentResized: componentResized,
                                componentShown: componentShown,
                                focusGained: focusGained,
                                focusLost: focusLost,
                                hierarchyAncestorMoved: hierarchyAncestorMoved,
                                hierarchyAncestorResized: hierarchyAncestorResized,
                                hierarchyChanged: hierarchyChanged,
                                caretPositionChanged: caretPositionChanged,
                                inputMethodTextChanged: inputMethodTextChanged,
                                keyPressed: keyPressed,
                                keyReleased: keyReleased,
                                keyTyped: keyTyped, 
                                mouseEntered: mouseEntered,
                                mouseExited: mouseExited,
                                mousePressed: mousePressed,
                                mouseReleased: mouseReleased,   
                                mouseDragged: mouseDragged,
                                mouseMoved: mouseMoved,
                                propertyChange: propertyChange
//                              mouseWheelMoved: mouseWheelMoved 
                                );
}



// --------------------------------------------------------------------------------------------------
// --------------------- ActionDecorators for javax.swing.JTextField -------------------------
// --------------------------------------------------------------------------------------------------

void addJTextFieldListeners(javax.swing.JTextField jTextField,
                            ActionEvent ?-> void actionPerformed = null,
                       
//                          optional anonymous functions from javax.swing.JTextComponent

                            CaretEvent ?-> void caretUpdate = null,
                                                      
//                          optional anonymous functions from javax.swing.JComponent

                            AncestorEvent ?-> void ancestorAdded = null,
                            AncestorEvent ?-> void ancestorMoved = null,
                            AncestorEvent ?-> void ancestorRemoved = null,
                            PropertyChangeEvent ?-> void vetoableChange = null,
                        
//                          optional anonymous functions from java.awt.Container
        
                            ContainerEvent ?-> void componentAdded = null, 
                            ContainerEvent ?-> void componentRemoved = null,
                         
//                          optional anonymous functions from java.awt.Component

                            ?String propertyName = null,
                            ComponentEvent ?-> void componentHidden = null,
                            ComponentEvent ?-> void componentMoved = null,
                            ComponentEvent ?-> void componentResized = null,
                            ComponentEvent ?-> void componentShown = null,
                            FocusEvent ?-> void focusGained = null,
                            FocusEvent ?-> void focusLost = null,
                            HierarchyEvent ?-> void hierarchyAncestorMoved = null,
                            HierarchyEvent ?-> void hierarchyAncestorResized = null,
                            HierarchyEvent ?-> void hierarchyChanged = null,
                            InputMethodEvent ?-> void caretPositionChanged = null,
                            InputMethodEvent ?-> void inputMethodTextChanged = null,
                            KeyEvent ?-> void keyPressed = null,
                            KeyEvent ?-> void keyReleased = null,
                            KeyEvent ?-> void keyTyped = null, 
                            MouseEvent ?-> void mouseClicked = null,
                            MouseEvent ?-> void mouseEntered = null,
                            MouseEvent ?-> void mouseExited = null,
                            MouseEvent ?-> void mousePressed = null,
                            MouseEvent ?-> void mouseReleased = null,   
                            MouseEvent ?-> void mouseDragged = null,
                            MouseEvent ?-> void mouseMoved = null,
                            PropertyChangeEvent ?-> void propertyChange = null
//                          MouseWheelEvent ?-> void mouseWheelMoved = null            
                            )
{

   // only if one of the according optional parameters really has a value, we will create and add the listener object
   if(actionPerformed != null) jTextField.addActionListener(new NiceActionListener(actionPerformed: actionPerformed));                                                 

   jTextField.addJTextComponentListeners(caretUpdate: caretUpdate,
                                         ancestorAdded: ancestorAdded,
                                         ancestorMoved: ancestorMoved,
                                         ancestorRemoved: ancestorRemoved,
                                         vetoableChange: vetoableChange,
                                         componentAdded: componentAdded,
                                         componentRemoved: componentRemoved,
                                         propertyName: propertyName,
                                         componentHidden: componentHidden,
                                         componentMoved: componentMoved,
                                         componentResized: componentResized,
                                         componentShown: componentShown,
                                         focusGained: focusGained,
                                         focusLost: focusLost,
                                         hierarchyAncestorMoved: hierarchyAncestorMoved,
                                         hierarchyAncestorResized: hierarchyAncestorResized,
                                         hierarchyChanged: hierarchyChanged,
                                         caretPositionChanged: caretPositionChanged,
                                         inputMethodTextChanged: inputMethodTextChanged,
                                         keyPressed: keyPressed,
                                         keyReleased: keyReleased,
                                         keyTyped: keyTyped, 
                                         mouseEntered: mouseEntered,
                                         mouseExited: mouseExited,
                                         mousePressed: mousePressed,
                                         mouseReleased: mouseReleased,   
                                         mouseDragged: mouseDragged,
                                         mouseMoved: mouseMoved,
                                         propertyChange: propertyChange
//                                       mouseWheelMoved: mouseWheelMoved 
                                         );
}



// --------------------------------------------------------------------------------------------------
// --------------------- ActionDecorators for javax.swing.JEditorPane -------------------------
// --------------------------------------------------------------------------------------------------

void addJEditorPaneListeners(javax.swing.JEditorPane jEditorPane,
                             HyperlinkEvent ?-> void hyperlinkUpdate = null,
                       
//                           optional anonymous functions from javax.swing.JTextComponent

                             CaretEvent ?-> void caretUpdate = null,
                                                      
//                           optional anonymous functions from javax.swing.JComponent
      
                             AncestorEvent ?-> void ancestorAdded = null,
                             AncestorEvent ?-> void ancestorMoved = null,
                             AncestorEvent ?-> void ancestorRemoved = null,
                             PropertyChangeEvent ?-> void vetoableChange = null,
                        
//                           optional anonymous functions from java.awt.Container
        
                             ContainerEvent ?-> void componentAdded = null, 
                             ContainerEvent ?-> void componentRemoved = null,
                         
//                           optional anonymous functions from java.awt.Component

                             ?String propertyName = null,
                             ComponentEvent ?-> void componentHidden = null,
                             ComponentEvent ?-> void componentMoved = null,
                             ComponentEvent ?-> void componentResized = null,
                             ComponentEvent ?-> void componentShown = null,
                             FocusEvent ?-> void focusGained = null,
                             FocusEvent ?-> void focusLost = null,
                             HierarchyEvent ?-> void hierarchyAncestorMoved = null,
                             HierarchyEvent ?-> void hierarchyAncestorResized = null,
                             HierarchyEvent ?-> void hierarchyChanged = null,
                             InputMethodEvent ?-> void caretPositionChanged = null,    
                             InputMethodEvent ?-> void inputMethodTextChanged = null,  
                             KeyEvent ?-> void keyPressed = null,                      
                             KeyEvent ?-> void keyReleased = null,                     
                             KeyEvent ?-> void keyTyped = null,                        
                             MouseEvent ?-> void mouseClicked = null,                  
                             MouseEvent ?-> void mouseEntered = null,                  
                             MouseEvent ?-> void mouseExited = null,                   
                             MouseEvent ?-> void mousePressed = null,                  
                             MouseEvent ?-> void mouseReleased = null,                 
                             MouseEvent ?-> void mouseDragged = null,                  
                             MouseEvent ?-> void mouseMoved = null,                    
                             PropertyChangeEvent ?-> void propertyChange = null        
//                           MouseWheelEvent ?-> void mouseWheelMoved = null            
                             )
{

   // only if one of the according optional parameters really has a value, we will create and add the listener object
   if(hyperlinkUpdate != null) jEditorPane.addHyperlinkListener(new NiceHyperlinkListener(hyperlinkUpdate: hyperlinkUpdate));                                                 

   jEditorPane.addJTextComponentListeners(caretUpdate: caretUpdate,
                                          ancestorAdded: ancestorAdded,
                                          ancestorMoved: ancestorMoved,
                                          ancestorRemoved: ancestorRemoved,
                                          vetoableChange: vetoableChange,
                                          componentAdded: componentAdded,
                                          componentRemoved: componentRemoved,
                                          propertyName: propertyName,
                                          componentHidden: componentHidden,
                                          componentMoved: componentMoved,
                                          componentResized: componentResized,
                                          componentShown: componentShown,
                                          focusGained: focusGained,
                                          focusLost: focusLost,
                                          hierarchyAncestorMoved: hierarchyAncestorMoved,
                                          hierarchyAncestorResized: hierarchyAncestorResized,
                                          hierarchyChanged: hierarchyChanged,
                                          caretPositionChanged: caretPositionChanged,
                                          inputMethodTextChanged: inputMethodTextChanged,
                                          keyPressed: keyPressed,
                                          keyReleased: keyReleased,
                                          keyTyped: keyTyped, 
                                          mouseEntered: mouseEntered,
                                          mouseExited: mouseExited,
                                          mousePressed: mousePressed,
                                          mouseReleased: mouseReleased,   
                                          mouseDragged: mouseDragged,
                                          mouseMoved: mouseMoved,
                                          propertyChange: propertyChange
//                                        mouseWheelMoved: mouseWheelMoved 
                                          );
}



// --------------------------------------------------------------------------------------------------
// --------------------- ActionDecorators for javax.swing.text.JTextComponent -----------------------
// --------------------------------------------------------------------------------------------------

void addJTextComponentListeners(javax.swing.text.JTextComponent jTextComponent,
                                CaretEvent ?-> void caretUpdate = null,
                               
//                              optional anonymous functions from java.awt.JComponent

                                AncestorEvent ?-> void ancestorAdded = null,
                                AncestorEvent ?-> void ancestorMoved = null,
                                AncestorEvent ?-> void ancestorRemoved = null,
                                PropertyChangeEvent ?-> void vetoableChange = null,
                        
//                              optional anonymous functions from java.awt.Container
        
                                ContainerEvent ?-> void componentAdded = null, 
                                ContainerEvent ?-> void componentRemoved = null,
                         
//                              optional anonymous functions from java.awt.Component
         
                                ?String propertyName = null,
                                ComponentEvent ?-> void componentHidden = null,
                                ComponentEvent ?-> void componentMoved = null,
                                ComponentEvent ?-> void componentResized = null,
                                ComponentEvent ?-> void componentShown = null,
                                FocusEvent ?-> void focusGained = null,
                                FocusEvent ?-> void focusLost = null,
                                HierarchyEvent ?-> void hierarchyAncestorMoved = null,
                                HierarchyEvent ?-> void hierarchyAncestorResized = null,
                                HierarchyEvent ?-> void hierarchyChanged = null,
                                InputMethodEvent ?-> void caretPositionChanged = null,
                                InputMethodEvent ?-> void inputMethodTextChanged = null,
                                KeyEvent ?-> void keyPressed = null,
                                KeyEvent ?-> void keyReleased = null,
                                KeyEvent ?-> void keyTyped = null, 
                                MouseEvent ?-> void mouseClicked = null,
                                MouseEvent ?-> void mouseEntered = null,
                                MouseEvent ?-> void mouseExited = null,
                                MouseEvent ?-> void mousePressed = null,
                                MouseEvent ?-> void mouseReleased = null,   
                                MouseEvent ?-> void mouseDragged = null,
                                MouseEvent ?-> void mouseMoved = null,
                                PropertyChangeEvent ?-> void propertyChange = null
//                              MouseWheelEvent ?-> void mouseWheelMoved = null            
                                )
{

   // only if one of the according optional parameters really has a value, we will create and add the listener object
   if(caretUpdate != null) jTextComponent.addCaretListener(new NiceCaretListener(caretUpdate: caretUpdate));                                               

   jTextComponent.addJComponentListeners(ancestorAdded: ancestorAdded,
                                         ancestorMoved: ancestorMoved,
                                         ancestorRemoved: ancestorRemoved,
                                         vetoableChange: vetoableChange,
                                         componentAdded: componentAdded,
                                         componentRemoved: componentRemoved,
                                         propertyName: propertyName,
                                         componentHidden: componentHidden,
                                         componentMoved: componentMoved,
                                         componentResized: componentResized,
                                         componentShown: componentShown,
                                         focusGained: focusGained,
                                         focusLost: focusLost,
                                         hierarchyAncestorMoved: hierarchyAncestorMoved,
                                         hierarchyAncestorResized: hierarchyAncestorResized,
                                         hierarchyChanged: hierarchyChanged,
                                         caretPositionChanged: caretPositionChanged,
                                         inputMethodTextChanged: inputMethodTextChanged,
                                         keyPressed: keyPressed,
                                         keyReleased: keyReleased,
                                         keyTyped: keyTyped, 
                                         mouseEntered: mouseEntered,
                                         mouseExited: mouseExited,
                                         mousePressed: mousePressed,
                                         mouseReleased: mouseReleased,   
                                         mouseDragged: mouseDragged,
                                         mouseMoved: mouseMoved,
                                         propertyChange: propertyChange
//                                       mouseWheelMoved: mouseWheelMoved 
                                         );
}




// --------------------------------------------------------------------------------------------------
// --------------------- ActionDecorators for javax.swing.JComponent ---------------------------------------
// --------------------------------------------------------------------------------------------------

void addJComponentListeners(javax.swing.JComponent jComponent,
                            AncestorEvent ?-> void ancestorAdded = null,
                            AncestorEvent ?-> void ancestorMoved = null,
                            AncestorEvent ?-> void ancestorRemoved = null,
                            PropertyChangeEvent ?-> void vetoableChange = null,
                         
//                          optional anonymous functions from java.awt.Container

                            ContainerEvent ?-> void componentAdded = null, 
                            ContainerEvent ?-> void componentRemoved = null,
                           
//                          optional anonymous functions from java.awt.Component
                          
                            ?String propertyName = null,
                            ComponentEvent ?-> void componentHidden = null,
                            ComponentEvent ?-> void componentMoved = null,
                            ComponentEvent ?-> void componentResized = null,
                            ComponentEvent ?-> void componentShown = null,
                            FocusEvent ?-> void focusGained = null,
                            FocusEvent ?-> void focusLost = null,
                            HierarchyEvent ?-> void hierarchyAncestorMoved = null,
                            HierarchyEvent ?-> void hierarchyAncestorResized = null,
                            HierarchyEvent ?-> void hierarchyChanged = null,
                            InputMethodEvent ?-> void caretPositionChanged = null,
                            InputMethodEvent ?-> void inputMethodTextChanged = null,
                            KeyEvent ?-> void keyPressed = null,
                            KeyEvent ?-> void keyReleased = null,
                            KeyEvent ?-> void keyTyped = null, 
                            MouseEvent ?-> void mouseClicked = null,
                            MouseEvent ?-> void mouseEntered = null,
                            MouseEvent ?-> void mouseExited = null,
                            MouseEvent ?-> void mousePressed = null,
                            MouseEvent ?-> void mouseReleased = null,   
                            MouseEvent ?-> void mouseDragged = null,
                            MouseEvent ?-> void mouseMoved = null,
                            PropertyChangeEvent ?-> void propertyChange = null
//                          MouseWheelEvent ?-> void mouseWheelMoved = null           
                         )
{

   // only if one of the according optional parameters really has a value, we will create and add the listener object
   if(ancestorAdded != null ||
      ancestorMoved != null ||
      ancestorRemoved != null
      ) 
   {
      jComponent.addAncestorListener(new NiceAncestorListener(ancestorAdded: ancestorAdded,
                                                              ancestorMoved: ancestorMoved,
                                                              ancestorRemoved: ancestorRemoved
                                                              ));
   }
   
   // only if one of the according optional parameters really has a value, we will create and add the listener object
   if(vetoableChange != null) jComponent.addVetoableChangeListener(new NiceVetoableChangeListener(vetoableChange: vetoableChange));                                                       

   jComponent.addContainerListeners(componentAdded: componentAdded,
                                    componentRemoved: componentRemoved,                                                    
                                    propertyName: propertyName,
                                    componentHidden: componentHidden,
                                    componentMoved: componentMoved,
                                    componentResized: componentResized,
                                    componentShown: componentShown,
                                    focusGained: focusGained,
                                    focusLost: focusLost,
                                    hierarchyAncestorMoved: hierarchyAncestorMoved,
                                    hierarchyAncestorResized: hierarchyAncestorResized,
                                    hierarchyChanged: hierarchyChanged,
                                    caretPositionChanged: caretPositionChanged,
                                    inputMethodTextChanged: inputMethodTextChanged,
                                    keyPressed: keyPressed,
                                    keyReleased: keyReleased,
                                    keyTyped: keyTyped, 
                                    mouseClicked: mouseClicked,
                                    mouseEntered: mouseEntered,
                                    mouseExited: mouseExited,
                                    mousePressed: mousePressed,
                                    mouseReleased: mouseReleased,   
                                    mouseDragged: mouseDragged,
                                    mouseMoved: mouseMoved,
                                    propertyChange: propertyChange
//                                  mouseWheelMoved: mouseWheelMoved 
                                    ); 
}

void addMenuSelectionManagerListeners(javax.swing.MenuSelectionManager manager,
                                      ChangeEvent ?-> void stateChanged = null
                                      )
{
   // only if one of the according optional parameters really has a value, we will create and add the listener object
   if(stateChanged != null) manager.addChangeListener(new NiceChangeListener(stateChanged: stateChanged));
}