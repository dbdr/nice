/**************************************************************************/
/*                                N I C E                                 */
/*             A high-level object-oriented research language             */
/*                        (c) Daniel Bonniot 2004                         */
/*                                                                        */
/*  This program is free software; you can redistribute it and/or modify  */
/*  it under the terms of the GNU General Public License as published by  */
/*  the Free Software Foundation; either version 2 of the License, or     */
/*  (at your option) any later version.                                   */
/*                                                                        */
/**************************************************************************/

package bossa.syntax;

import bossa.util.*;

/**
   Constant expressions (values) of basic types.

 */
public abstract class ConstantExp extends Expression
{
  public final ?Object value;
  private String representation;
  public ?mlsub.typing.TypeConstructor tc = null;

  ?LocatedString className = null;

  computeType()
  {
    // The type is known at creation.
  }

  toString() = representation;

  equals(ConstantExp other) = this.value.equals(other.value);

}

public abstract class NumberConstantExp extends ConstantExp
{
  override Number value;

  public ConstantExp makeNegative()
  {
    LocatedString newRepres = new LocatedString("-"+representation, this.location());

    if (value instanceof Float || value instanceof Double)
      return createFloatConstantExp(newRepres);

    return createIntegerConstantExp(newRepres);
  }

  compile()
  {
    return new gnu.expr.QuoteExp(value, nice.tools.code.Types.javaType(type));
  }
}

public class IntegerConstantExp extends NumberConstantExp
{
  public long longValue()
  {
    return value.longValue();
  }

  isZero()
  {
    return value.intValue() == 0;
  }
 
}

public class FloatConstantExp extends NumberConstantExp
{

}

public class SymbolConstantExp extends ConstantExp
{
  override VarSymbol value;

  compile()
  {
    return value.compile();
  }
}

ConstantExp createSymbolConstantExp(?mlsub.typing.TypeConstructor tc, VarSymbol sym, String repres, Location loc)
{
  let res = new SymbolConstantExp(tc: tc, value: sym, representation: repres);
  res.setLocation(loc);
  return res;
}

public ConstantExp createIntegerConstantExp(LocatedString representation)
{
  String rep = representation.toString();

  int lastCharIndex = rep.length() - 1;
  char last = rep.charAt(lastCharIndex);
  boolean isLong = last == 'l' || last == 'L';
  if (isLong)
    rep = rep.substring(0, lastCharIndex);

  try {
    (long value, boolean isDecimal) = parseInteger(removeUnderscores(rep));

    mlsub.typing.Polytype type;
    mlsub.typing.TypeConstructor tc;
    Number object;
    
    if (Byte.MIN_VALUE <= value <= Byte.MAX_VALUE && !isLong)
      {
	type = nice.tools.typing.PrimitiveType.bytePolytype;
        tc = nice.tools.typing.PrimitiveType.byteTC;
	object = new Byte(byte(value));
      }
    else if (Short.MIN_VALUE <= value <= Short.MAX_VALUE && !isLong)
      {
	type = nice.tools.typing.PrimitiveType.shortPolytype;
        tc = nice.tools.typing.PrimitiveType.shortTC;
	object = new Short(short(value));
      }
    else if (Integer.MIN_VALUE <= value <= Integer.MAX_VALUE && !isLong)
      {
	type = nice.tools.typing.PrimitiveType.intPolytype;
        tc = nice.tools.typing.PrimitiveType.intTC;
	object = value;
      }
    else if (!isLong && !isDecimal && (-(1L << 32) ) < value < (1L << 32))
      { // handle 32 bit bin/hex literals which don't fit in a int
        if (value > 0)
          value = (1L << 32) - value;
        else
          value = (1L << 32) + value;

	type = nice.tools.typing.PrimitiveType.intPolytype;
        tc = nice.tools.typing.PrimitiveType.intTC;
	object = value;
      }
    else if (!isLong && !isDecimal)
      { // a non decimal long must be explicit
        throw User.error(representation, rep + " is too large for an int literal");
      }
    else
      {
	type = nice.tools.typing.PrimitiveType.longPolytype;
        tc = nice.tools.typing.PrimitiveType.longTC;
	object = value;
      }
    
    let res = new IntegerConstantExp(tc: tc, value: object,
	representation: ""+value+(isLong ? "L" : ""));
    res.type = type;
    res.setLocation(representation.location());
    return res;
  }
  catch(NumberFormatException e) {
    e.printStackTrace();
    throw User.error(representation, rep + " is not a valid number");
  }
}

ConstantExp createIntConstantExp(int value, Location loc)
{
  let res = new IntegerConstantExp(tc: nice.tools.typing.PrimitiveType.intTC,
	value: value, representation: value.toString());
  res.type = nice.tools.typing.PrimitiveType.intPolytype;
  res.setLocation(loc);
  return res;
}

ConstantExp createLongConstantExp(long value)
{
  return new IntegerConstantExp(tc: nice.tools.typing.PrimitiveType.longTC,
	value: value, representation: value.toString());
}


private (long, boolean) parseInteger(String rep)
{
  int radix = 10;
  int index = 0;
  boolean negative = false;

  // Leading minus
  if (rep.startsWith("-")) {
    negative = true;
    index++;
  }

  // Radix specifier
  if (rep.startsWith("0x", index) || rep.startsWith("0X", index)) 
    {
      index += 2;
      radix = 16;
    }
  else if (rep.startsWith("0b", index) || rep.startsWith("0B", index)) 
    {
      index += 2;
      radix = 2;
    }
  else if (rep.startsWith("#", index)) 
    {
      index++;
      radix = 16;
    }
  else if (rep.startsWith("0", index) && rep.length() > 1 + index) 
    {
      index++;
      radix = 8;
    }

  if (rep.startsWith("-", index))
    throw new NumberFormatException("Negative sign in wrong position");

  long result = new java.math.BigInteger(rep.substring(index), radix).longValue();

  if (negative) 
    result = -result;

  return (result, radix == 10);
}

private String removeUnderscores(String s)
{
  StringBuffer sb = new StringBuffer();
  for (int i = 0; i<s.length(); i++)
    if (s.charAt(i) != '_')
      sb.append(s.charAt(i));
    
  return sb.toString();
}

public ConstantExp createFloatConstantExp(LocatedString representation)
{
  String repres = removeUnderscores(representation.toString());
  if (repres.endsWith("F") || repres.endsWith("f"))
    {
      float value = Float.parseFloat(repres);
      let res = new FloatConstantExp(tc: nice.tools.typing.PrimitiveType.floatTC, value: value, representation:value+"f");
      res.type = nice.tools.typing.PrimitiveType.floatPolytype;
      res.setLocation(representation.location());
      return res;
    }	

  double value = Double.parseDouble(repres);
  let res = new FloatConstantExp(tc: nice.tools.typing.PrimitiveType.doubleTC, value: value, representation: value+"");
  res.type = nice.tools.typing.PrimitiveType.doublePolytype;
  res.setLocation(representation.location());
  return res;
}

/**
   The 'null' expression.   

*/
public class NullExp extends ConstantExp
{
  isNull() = true;

  computeType()
  {
    // The type needs to be generated each time, since it is polymorphic.
  }
  
  getType()
  {
    let alpha = new mlsub.typing.MonotypeVar("any");
    return new mlsub.typing.Polytype(new mlsub.typing.Constraint([alpha], null), 
			maybeMonotype(alpha));
  }

  compile() = gnu.expr.QuoteExp.nullExp;
 
  toString() = "null";
}


ConstantExp createNullExp(bossa.util.Location loc)
{
  let res = new NullExp(value: null, representation: "null");
  res.setLocation(loc);
  return res;
}

class BooleanConstantExp extends ConstantExp
{
  private gnu.expr.QuoteExp compiledValue;

  isFalse() = compiledValue == gnu.expr.QuoteExp.falseExp;
  isTrue() = compiledValue == gnu.expr.QuoteExp.trueExp;

  compile() = compiledValue;
}

public ConstantExp createBooleanConstant(boolean value, Location location)
{
  let res = new BooleanConstantExp(tc: nice.tools.typing.PrimitiveType.boolTC,
	value: value, representation: value ? "true" : "false",
	compiledValue: value ? gnu.expr.QuoteExp.trueExp : gnu.expr.QuoteExp.falseExp);
  res.type = nice.tools.typing.PrimitiveType.boolPolytype;
  res.setLocation(location);
  return res;
}

class CharConstantExp extends ConstantExp
{
  override char value;

  public long longValue()
  {
    return int(value);
  } 

  compile()
  {
    return new gnu.expr.QuoteExp(value, nice.tools.code.Types.javaType(type));
  }
}

public ConstantExp createCharConstant(LocatedString value)
{
  let s = unescapeLiteral(value.toString());
  if (s.length() != 1)
    User.error(value, "Invalid character constant: " + value);

  return createCharConstant(s[0], value.location());
}

public ConstantExp createCharConstant(char value, Location loc)
{
  let res = new CharConstantExp(tc: nice.tools.typing.PrimitiveType.charTC,
	value: value, representation: "'" + value + "'");
  res.type = nice.tools.typing.PrimitiveType.charPolytype;
  res.setLocation(loc);
  return res;
}

/**
   The void constant.

*/
public class VoidConstantExp extends ConstantExp
{
  override value = gnu.mapping.Values.empty;
  override representation = "{}";
  {
    this.className = voidName;
  }

  compile()
  {
    return new gnu.expr.QuoteExp(value, nice.tools.code.Types.javaType(type));
  }
}

let LocatedString voidName = new LocatedString("void");

/**
   A String constant.

*/
public class StringConstantExp extends ConstantExp
{
  compile()
  {
    return new gnu.expr.QuoteExp(value, nice.tools.code.Types.javaType(type));
  }
}

public ConstantExp createStringConstantExp(String value)
{
  return createStringConstantExp(value, false);
}

public StringConstantExp createStringConstantExp(String value, boolean multiline)
{
  if (multiline)
    value = escapeEOL(value);

  let res = new StringConstantExp(value: unescapeLiteral(value), representation: "\""+value+"\"" , className: stringClassName);
  return res;
}

let LocatedString stringClassName =  new LocatedString("java.lang.String");

// cf. JLS 3.10.6
public String unescapeLiteral(String s)
{
  let sb = new StringBuffer();
  int n = s.length();
  for (int i = 0; i < n; i++) {
    char c = s[i];
    if (c == '\\') {
      i++;
      char c2 = s[i];

      if (c2 == 'b') sb.append('\b');
      else if (c2 =='t') sb.append('\t');
      else if (c2 =='n') sb.append('\n');
      else if (c2 =='f') sb.append('\f');
      else if (c2 =='r') sb.append('\r');
      else if (c2 =='\"') sb.append('\"');
      else if (c2 =='\'') sb.append('\'');
      else if (c2 =='\\') sb.append('\\');
      else {
        // octal escape
        int code = int(c2) - int('0');
        if (i+1 < n) {
          int ic3 = int(s[i+1]);
          if (int('0') <= ic3 <= int('7')) {
            code = 8*code + (ic3 - int('0'));
            i++;
            if (int('0') <= int(c2) <= int('3') && i+1 < n) {
              // try a last number...
              int ic4 = int(s[i+1]);
              if (int('0') <= ic4 <= int('7')) {
                code = 8*code + (ic4 - int('0'));
		i++;
              }
            }
          }
        }
        sb.append(char(code));
      }
    } else {
      sb.append(c);
    }
  }
  return sb.toString();
}

String escapeEOL(String s)
{
  let sb = new StringBuffer();
  int n = s.length();
  for (int i = 0; i < n; i++) {
    char c = s[i];
    if (c == '\n')
      sb.append("\\n");
    else if (c == '\r')
      {
	sb.append("\\n");
        if (s[i+1] == '\n')
	  i++;
      }
    else
      sb.append(c);
  }
  return sb.toString();
}

/**
   A type used as an expression.

 */
public class TypeConstantExp extends ConstantExp
{

  staticClass()
  {
    // If this is a '<name>.class' expression, do not consider it as a
    // qualified prefix.
    if (isExpression)
      return null;

    return cast(value);
  }

  TypeConstantExp setRepresentedType(mlsub.typing.Polytype type, ?gnu.bytecode.Type bytecodeType)
  {
    let res = new TypeConstantExp(value: bytecodeType, representation: this.representation);

    res.isExpression = this.isExpression;
    res.isLiteral = this.isLiteral;
    res.representedType = type.getMonotype();

    res.type = new mlsub.typing.Polytype
      (type.getConstraint(),
       sureMonotype(new mlsub.typing.MonotypeConstructor
        (nice.tools.typing.PrimitiveType.classTC, [type.getMonotype()])));
    return res;
  }

  compile()
  {
    if (isLiteral)
      return new gnu.expr.QuoteExp(value, nice.tools.code.Types.javaType(type));

    gnu.bytecode.Type type = cast(value);
    String representation = type instanceof gnu.bytecode.ArrayType ?
      type.getSignature().replace('/', '.') :
      type.getName();

    return new gnu.expr.ApplyExp(class_forName, [new gnu.expr.QuoteExp(representation)]);
  }

  ?mlsub.typing.TypeConstructor getTC()
  {
    return notNull(nice.tools.typing.Types.rawType(representedType)).head();
  }

  ?mlsub.typing.Monotype representedType = null;

  public boolean isExpression = false;
  public boolean isLiteral = false;

}

public TypeConstantExp createTypeConstantExp(LocatedString name)
{
  let res = new TypeConstantExp(value: name, representation: name.toString());
  res.setLocation(name.location());
  return res;
}

/**
   @return an Expression representing [root].[name] or a type or package literal if root == null
*/
Expression createTypeConstantExp(?PackageExp root, LocatedString name)
{
  String fullName = name.toString();
  if (root != null)
    fullName =notNull(root.name).append(".").append(fullName).toString();

  ?mlsub.typing.TypeConstructor tc =
      Node.getGlobalTypeScope().globalLookup(fullName, name.location());

  if(tc != null)
    {
      gnu.bytecode.Type type = nice.tools.code.Types.javaType(tc);

      // type might not be a class
      // for instance if the ident was "int"
      if (type instanceof gnu.bytecode.ClassType)
	{
	  TypeConstantExp res = new TypeConstantExp(value: name, representation: name.toString()).setRepresentedType(universalPolytype(tc, true), type);
	  res.setLocation(root == null ? name.location() : root.location());
	  return res;
	}
    }

  if (root != null)
    // name has been appended to root's name
    return root;

  let res = createPackageExp(fullName);
  res.setLocation(name.location());
  return res;
}

mlsub.typing.Polytype universalPolytype(mlsub.typing.TypeConstructor tc, boolean sure)
{
  mlsub.typing.MonotypeVar[?] vars = mlsub.typing.MonotypeVar.news(tc.arity());
  mlsub.typing.Monotype type = new mlsub.typing.MonotypeConstructor(tc, cast(vars));
  return new mlsub.typing.Polytype
    (vars == null ? null : new mlsub.typing.Constraint(cast(vars), null),
     sure ? sureMonotype(type) : maybeMonotype(type));
}

let gnu.bytecode.Method class_forName =   gnu.bytecode.ClassType.make("java.lang.Class").getDeclaredMethod("forName", 1);
