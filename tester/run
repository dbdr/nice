#! /bin/sh

# Automatic Tester

# Stop on errors
set -e

if [ "$1" != "updated" ]; then
    # We first update the tester code, then start a new copy of this file
    # (since it might have been updated).
    if cvs -q update; then
	exec "$0" updated
    else
	echo "Update of the tester code failed. Exiting."
	exit 1
    fi
fi

# Set up variables, that can be overriden in the setup file.
machine="`hostname`"
system="`uname -a`"
user="`whoami`"

export CVS_SOURCEFORGE="cvs.sourceforge.net"

if [ -r setup ]; then
    . setup
fi

if [ "$GCC_HOME" -a ! "$GCJ" ]; then
  export GCJ=$GCC_HOME/bin/gcj
  [ -x $GCJ ] || export GCJ=
fi

if ! ls config.* >/dev/null 2>&1; then
    echo "You must create at least one config.* file."
    exit 1
fi

rm -rf builds
mkdir -p builds
cd builds

export NICEC=${PWD}/Nice/bin/nicec
export NICE_JAR=${PWD}/Nice/share/java/nice.jar

ORIGINAL_PATH="$PATH"

# We run the whole set of tests once per configuration.
# This means that the test scripts must first clean up the tree, 
# to really rebuild the application.

for conffile in ../config.*; do
    name="`expr $conffile : '../config\.\(.*\)'`"

    # Blank the variable, so it does not keep the previous value if it
    # is not reset to a new value.
    JDK_VERSION=
    experimental_jvm=false

    . $conffile

    PATH="$JAVA_HOME/bin:$ORIGINAL_PATH"

    config=$machine:$name

    # Redirect output
    exec > $config.log.html
    exec 2>&1

    echo '<html><body><pre>'

    if ../Project; then
	echo "Bootstrap OK"  > $config.res
	failed=false
    else
	echo "Bootstrap FAILURE"  > $config.res
	failed=true
    fi


    for test in ../*.test; do
	testname="`expr $test : '../\(.*\)\.test'`"
	echo "<a name='$testname'>"
	echo ""
	echo "======================"
	echo "Running $testname"
	echo "======================"
	echo ""

	rm -f METRICS

	set +e
	$test
	code=$?
	set -e

	if [ -r METRICS ]; then
	  echo -n "`date +'%F %R'` " >> ../$testname.metrics
	  cat METRICS >> ../$testname.metrics
	fi

        {
	    echo -n "$testname "
	    case "$code" in
		0) echo "OK"         ;;
# make exits with 2 on errors
		1|2) echo "FAILURE"  ; [ "$experimental_jvm" != true ] && failed=true ;;
		3) echo "IMPOSSIBLE" ;;
#		4) echo "WARN"       ;;
		8) echo "SKIP"       ;;
		*) echo "$((code-10))"      ;;
	    esac
	} >> $config.res
    done

    echo '</pre></body></html>'

done

echo "Admin: $user@users.sourceforge.net" > $machine.id
echo "System: $system"  >> $machine.id
if [ "$GCJ" ]; then
  "$GCJ" --version | head -1 >> $machine.id
fi
if [ "$KAFFE_HOME" ]; then
  echo kaffe CVS `"$KAFFE_HOME"/bin/kaffe -fullversion 2>&1|tail -1|cut -c 22-31` >> $machine.id
fi

# Send the results to the Test Central
results_dir=/home/groups/n/ni/nice/test-central/results
if [ -r $results_dir ]; then
  # We are on sourceforge!
  cp ./*.id ./*.res ./*.html $results_dir
else
  scp -p ./*.id ./*.res ./*.html $user@shell.sourceforge.net:$results_dir
  # update the results page
  ssh $user@shell.sourceforge.net "sh -c 'cd $results_dir/.. && ./run'"

  # If everything went OK, upload the new development version.
  if [ "$failed" = false -a "$NICE_MASTER" ]; then
    scp Nice/share/java/nice.jar bonniot@shell.sourceforge.net:/home/groups/n/ni/nice/htdocs
fi

fi

echo ""
echo "======================"
echo "End of testing"
echo "======================"
echo ""
