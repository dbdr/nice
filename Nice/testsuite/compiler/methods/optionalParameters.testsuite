/// PASS
  assert test(1) == 1;
  /// Toplevel
int test(int x, int y = x) = y;

/// FAIL
  /// Toplevel
int test(int x = x) = x;

/// FAIL
  /// Toplevel
int test(int x = y, int y = x) = y;

/// PASS
  assert test(0,0) == 2;
  /// Toplevel
int test(int x, int y = x)
{
  if (x == 0) return test(2);
  else return y;
}

/// PASS
  assert test(0,0) == 4;
  /// Toplevel
int test(int x, int y = x * 2)
{
  if (x == 0) return test(2);
  else return y;
}

/// PASS
  assert test(0,0) == 0;
  /// Toplevel
int test(int x, int y = x)
{
  if (x == 0) return test(2,x);
  else return y;
}

/// PASS
  assert test0(99) == 99;
  /// Toplevel
int test0(int z) {
  int test(int x, int y = z) = y;
  return test(0);
}

/// PASS
  /// Toplevel
// Forward reference to a function with a default value copying a previous argument.
void foo() { f(0); }
void f(int x, int y = x) {}

/// PASS
  foo([1]);
  /// Toplevel
// Bytecode has to be emited to convert the copied argument to what Java expects.
void foo(int[] x, int y = x.size()) {}

/// PASS
  /// Toplevel
  class A {
  int aint;
  alike f() {
    return this.adjust();
  }
}

<A T> T adjust(T this, int aint = this.aint)  = this;

/// PASS
  /// Toplevel
  class A {
  int aint;
  alike f() {
    return this.adjust();
  }
}

<A T> T adjust(T this, int aint = this.aint);
adjust(this, aint) = this;

/// PASS
  /// Toplevel
<A T> T adjust(T this, int aint = this.aint);
adjust(this, aint) = this;

  class A {
  int aint;
  alike f() {
    return this.adjust();
  }
}

/// PASS
  /// package a import b
  /// Toplevel
  class A {
  int aint;
  alike f() {
    return this.adjust();
  }
}

  /// package b import a
  /// Toplevel
<A T> T adjust(T this, int aint = this.aint)  = this;

/// PASS
  /// package b import a
  /// Toplevel
<A T> T adjust(T this, int aint = this.aint)  = this;

  /// package a import b
  /// Toplevel
  class A {
  int aint;
  alike f() {
    return this.adjust();
  }
}

/// PASS
  /// Toplevel
class A {
  int aint;
  alike f() {
    return this.adjust();
  }
  alike adjust(int aint = this.aint)  = this;
}

/// PASS
  assert new A(x: 13).getValue() == 13;

  /// Toplevel
  class A 
  {
    int x;
    int getValue(int v = this.x) = v;
  }

/// PASS
  /// Toplevel
// Overloading in default values.
class B {
  List<String> args;
  String str;
} 

class A {
  String str;
  AA args;
  alike f(int i = this.args.i,
          String s = this.str,
          String a = this.args.str) = this;
}

class AA {
  String str;
  int i;
}
