
/**************************************************************************/
/*                                                                        */
/*  This program is free software; you can redistribute it and/or modify  */
/*  it under the terms of the GNU General Public License as published by  */
/*  the Free Software Foundation; either version 2 of the License, or     */
/*  (at your option) any later version.                                   */
/*                                                                        */
/**************************************************************************/


package nice.ui.common;



/**
 * DECLARATION of methods to make sure that listeners defined in javax.swing.event 
 * can only be requested from classes that are able to handle them
 */

public <AncestorListenerHandler H> NiceAncestorListener[?] getNiceAncestorListeners(H);
public <CaretListenerHandler H> NiceCaretListener[?] getNiceCaretListeners(H);
public <CellEditorListenerHandler H> NiceCellEditorListener[?] getNiceCellEditorListeners(H);
public <ChangeListenerHandler H> NiceChangeListener[?] getNiceChangeListeners(H);
public <DocumentListenerHandler H> NiceDocumentListener[?] getNiceDocumentListeners(H);
public <HyperlinkListenerHandler H> NiceHyperlinkListener[?] getNiceHyperlinkListeners(H);
public <InternalFrameListenerHandler H> NiceInternalFrameListener[?] getNiceInternalFrameListeners(H);
public <ListDataListenerHandler H> NiceListDataListener[?] getNiceListDataListeners(H);
public <ListSelectionListenerHandler H> NiceListSelectionListener[?] getNiceListSelectionListeners(H);
public <MenuDragMouseListenerHandler H> NiceMenuDragMouseListener[?] getNiceMenuDragMouseListeners(H);
public <MenuKeyListenerHandler H> NiceMenuKeyListener[?] getNiceMenuKeyListeners(H);
public <MenuListenerHandler H> NiceMenuListener[?] getNiceMenuListeners(H);
public <PopupMenuListenerHandler H> NicePopupMenuListener[?] getNicePopupMenuListeners(H);
public <TableColumnModelListenerHandler H> NiceTableColumnModelListener[?] getNiceTableColumnModelListeners(H);
public <TableModelListenerHandler H> NiceTableModelListener[?] getNiceTableModelListeners(H);
public <TreeExpansionListenerHandler H> NiceTreeExpansionListener[?] getNiceTreeExpansionListeners(H);
public <TreeWillExpandListenerHandler H> NiceTreeWillExpandListener[?] getNiceTreeWillExpandListeners(H);
public <TreeModelListenerHandler H> NiceTreeModelListener[?] getNiceTreeModelListeners(H);
public <TreeSelectionListenerHandler H> NiceTreeSelectionListener[?] getNiceTreeSelectionListeners(H);
public <UndoableEditListenerHandler H> NiceUndoableEditListener[?] getNiceUndoableEditListeners(H);


/**
 * DEFINITION of methods to make sure that listeners defined in javax.swing.event 
 * can only be requested from classes that are able to handle them
 */

getNiceTableModelListeners(this@javax.swing.table.TableModel)
{
	?java.util.List<NiceTableModelListener> result = tableModelListeners.get(this.object());
	return (result == null) ? null : result.toArray();
}

getNiceTableColumnModelListeners(this@javax.swing.table.TableColumnModel)
{
	?java.util.List<NiceTableColumnModelListener> result = tableColumnModelListeners.get(this.object());
	return (result == null) ? null : result.toArray();
}

getNiceCellEditorListeners(this@javax.swing.AbstractCellEditor)
{
	?java.util.List<NiceCellEditorListener> result = cellEditorListeners.get(this.object());
	return (result == null) ? null : result.toArray();
}

getNiceChangeListeners(this@javax.swing.colorchooser.DefaultColorSelectionModel)
{
	?java.util.List<NiceChangeListener> result = changeListeners.get(this.object());
	return (result == null) ? null : result.toArray();
}

getNiceChangeListeners(this@javax.swing.MenuSelectionManager)
{
	?java.util.List<NiceChangeListener> result = changeListeners.get(this.object());
	return (result == null) ? null : result.toArray();
}

getNiceUndoableEditListeners(this@javax.swing.undo.UndoableEditSupport)
{
	?java.util.List<NiceUndoableEditListener> result = undoableEditListeners.get(this.object());
	return (result == null) ? null : result.toArray();
}

getNiceActionListeners(this@javax.swing.AbstractButton)
{
  EventListener[?] listeners = this.getListeners(ActionListener.class);
  return (listeners == null) ? null : fill(new NiceActionListener[listeners.length], int i => listeners[i].toNiceActionListener());
}

getNiceActionListeners(this@javax.swing.DefaultButtonModel)
{
  EventListener[?] listeners = this.getListeners(ActionListener.class);
  return (listeners == null) ? null : fill(new NiceActionListener[listeners.length], int i => listeners[i].toNiceActionListener());
}

getNiceActionListeners(this@javax.swing.JComboBox)
{
  EventListener[?] listeners = this.getListeners(ActionListener.class);
  return (listeners == null) ? null : fill(new NiceActionListener[listeners.length], int i => listeners[i].toNiceActionListener());
}

getNiceActionListeners(this@javax.swing.JFileChooser)
{
  EventListener[?] listeners = this.getListeners(ActionListener.class);
  return (listeners == null) ? null : fill(new NiceActionListener[listeners.length], int i => listeners[i].toNiceActionListener());
}

getNiceActionListeners(this@javax.swing.JTextField)
{
  EventListener[?] listeners = this.getListeners(ActionListener.class);
  return (listeners == null) ? null : fill(new NiceActionListener[listeners.length], int i => listeners[i].toNiceActionListener());
}

getNiceActionListeners(this@javax.swing.Timer)
{
  EventListener[?] listeners = this.getListeners(ActionListener.class);
  return (listeners == null) ? null : fill(new NiceActionListener[listeners.length], int i => listeners[i].toNiceActionListener());
}

getNiceItemListeners(this@javax.swing.DefaultButtonModel)
{
  EventListener[?] listeners = this.getListeners(ItemListener.class);
  return (listeners == null) ? null : fill(new NiceItemListener[listeners.length], int i => listeners[i].toNiceItemListener());
}

getNiceItemListeners(this@javax.swing.AbstractButton)
{
  EventListener[?] listeners = this.getListeners(ItemListener.class);
  return (listeners == null) ? null : fill(new NiceItemListener[listeners.length], int i => listeners[i].toNiceItemListener());
}

getNiceItemListeners(this@javax.swing.JComboBox)
{
  EventListener[?] listeners = this.getListeners(ItemListener.class);
  return (listeners == null) ? null : fill(new NiceItemListener[listeners.length], int i => listeners[i].toNiceItemListener());
}

getNiceAdjustmentListeners(this@javax.swing.JScrollBar)
{
  EventListener[?] listeners = this.getListeners(AdjustmentListener.class);
  return (listeners == null) ? null : fill(new NiceAdjustmentListener[listeners.length], int i => listeners[i].toNiceAdjustmentListener());
}

getNiceCaretListeners(this@javax.swing.text.JTextComponent)
{
  EventListener[?] listeners = this.getListeners(CaretListener.class);
  return (listeners == null) ? null : fill(new NiceCaretListener[listeners.length], int i => listeners[i].toNiceCaretListener());
}

getNiceChangeListeners(this@javax.swing.AbstractButton)
{
  EventListener[?] listeners = this.getListeners(ChangeListener.class);
  return (listeners == null) ? null : fill(new NiceChangeListener[listeners.length], int i => listeners[i].toNiceChangeListener());
}

getNiceChangeListeners(this@javax.swing.DefaultBoundedRangeModel)
{
  EventListener[?] listeners = this.getListeners(ChangeListener.class);
  return (listeners == null) ? null : fill(new NiceChangeListener[listeners.length], int i => listeners[i].toNiceChangeListener());
}

getNiceChangeListeners(this@javax.swing.DefaultSingleSelectionModel)
{
  EventListener[?] listeners = this.getListeners(ChangeListener.class);
  return (listeners == null) ? null : fill(new NiceChangeListener[listeners.length], int i => listeners[i].toNiceChangeListener());
}

getNiceChangeListeners(this@javax.swing.text.DefaultCaret)
{
  EventListener[?] listeners = this.getListeners(ChangeListener.class);
  return (listeners == null) ? null : fill(new NiceChangeListener[listeners.length], int i => listeners[i].toNiceChangeListener());
}

getNiceChangeListeners(this@javax.swing.JProgressBar)
{
  EventListener[?] listeners = this.getListeners(ChangeListener.class);
  return (listeners == null) ? null : fill(new NiceChangeListener[listeners.length], int i => listeners[i].toNiceChangeListener());
}

getNiceChangeListeners(this@javax.swing.JSlider)
{
  EventListener[?] listeners = this.getListeners(ChangeListener.class);
  return (listeners == null) ? null : fill(new NiceChangeListener[listeners.length], int i => listeners[i].toNiceChangeListener());
}

getNiceChangeListeners(this@javax.swing.JTabbedPane)
{
  EventListener[?] listeners = this.getListeners(ChangeListener.class);
  return (listeners == null) ? null : fill(new NiceChangeListener[listeners.length], int i => listeners[i].toNiceChangeListener());
}

getNiceChangeListeners(this@javax.swing.JViewport)
{
  EventListener[?] listeners = this.getListeners(ChangeListener.class);
  return (listeners == null) ? null : fill(new NiceChangeListener[listeners.length], int i => listeners[i].toNiceChangeListener());
}

getNiceChangeListeners(this@javax.swing.DefaultButtonModel)
{
  EventListener[?] listeners = this.getListeners(ChangeListener.class);
  return (listeners == null) ? null : fill(new NiceChangeListener[listeners.length], int i => listeners[i].toNiceChangeListener());
}

getNiceListDataListeners(this@javax.swing.AbstractListModel)
{
  EventListener[?] listeners = this.getListeners(ListDataListener.class);
  return (listeners == null) ? null : fill(new NiceListDataListener[listeners.length], int i => listeners[i].toNiceListDataListener());
}

getNiceListSelectionListeners(this@javax.swing.DefaultListSelectionModel)
{
  EventListener[?] listeners = this.getListeners(ListSelectionListener.class);
  return (listeners == null) ? null : fill(new NiceListSelectionListener[listeners.length], int i => listeners[i].toNiceListSelectionListener());
}

getNiceListSelectionListeners(this@javax.swing.JList)
{
  EventListener[?] listeners = this.getListeners(ListSelectionListener.class);
  return (listeners == null) ? null : fill(new NiceListSelectionListener[listeners.length], int i => listeners[i].toNiceListSelectionListener());
}

getNiceAncestorListeners(this@javax.swing.JComponent)
{
  EventListener[?] listeners = this.getListeners(AncestorListener.class);
  return (listeners == null) ? null : fill(new NiceAncestorListener[listeners.length], int i => listeners[i].toNiceAncestorListener());
}

getNiceHyperlinkListeners(this@javax.swing.JEditorPane)
{
  EventListener[?] listeners = this.getListeners(HyperlinkListener.class);
  return (listeners == null) ? null : fill(new NiceHyperlinkListener[listeners.length], int i => listeners[i].toNiceHyperlinkListener());
}

getNiceInternalFrameListeners(this@javax.swing.JInternalFrame)
{
  EventListener[?] listeners = this.getListeners(InternalFrameListener.class);
  return (listeners == null) ? null : fill(new NiceInternalFrameListener[listeners.length], int i => listeners[i].toNiceInternalFrameListener());
}

getNiceMenuListeners(this@javax.swing.JMenu)
{
  EventListener[?] listeners = this.getListeners(MenuListener.class);
  return (listeners == null) ? null : fill(new NiceMenuListener[listeners.length], int i => listeners[i].toNiceMenuListener());
}

getNiceMenuDragMouseListeners(this@javax.swing.JMenuItem)
{
  EventListener[?] listeners = this.getListeners(MenuDragMouseListener.class);
  return (listeners == null) ? null : fill(new NiceMenuDragMouseListener[listeners.length], int i => listeners[i].toNiceMenuDragMouseListener());
}

getNiceMenuKeyListeners(this@javax.swing.JMenuItem)
{
  EventListener[?] listeners = this.getListeners(MenuKeyListener.class);
  return (listeners == null) ? null : fill(new NiceMenuKeyListener[listeners.length], int i => listeners[i].toNiceMenuKeyListener());
}

getNicePopupMenuListeners(this@javax.swing.JPopupMenu)
{
  EventListener[?] listeners = this.getListeners(PopupMenuListener.class);
  return (listeners == null) ? null : fill(new NicePopupMenuListener[listeners.length], int i => listeners[i].toNicePopupMenuListener());
}

getNiceTreeExpansionListeners(this@javax.swing.JTree)
{
  EventListener[?] listeners = this.getListeners(TreeExpansionListener.class);
  return (listeners == null) ? null : fill(new NiceTreeExpansionListener[listeners.length], int i => listeners[i].toNiceTreeExpansionListener());
}

getNiceTreeWillExpandListeners(this@javax.swing.JTree)
{
  EventListener[?] listeners = this.getListeners(TreeWillExpandListener.class);
  return (listeners == null) ? null : fill(new NiceTreeWillExpandListener[listeners.length], int i => listeners[i].toNiceTreeWillExpandListener());
}

getNiceTreeSelectionListeners(this@javax.swing.JTree)
{
  EventListener[?] listeners = this.getListeners(TreeSelectionListener.class);
  return (listeners == null) ? null : fill(new NiceTreeSelectionListener[listeners.length], int i => listeners[i].toNiceTreeSelectionListener());
}

getNiceTreeSelectionListeners(this@javax.swing.tree.DefaultTreeSelectionModel)
{
  EventListener[?] listeners = this.getListeners(TreeSelectionListener.class);
  return (listeners == null) ? null : fill(new NiceTreeSelectionListener[listeners.length], int i => listeners[i].toNiceTreeSelectionListener());
}

getNiceTreeModelListeners(this@javax.swing.tree.DefaultTreeModel)
{
  EventListener[?] listeners = this.getListeners(TreeModelListener.class);
  return (listeners == null) ? null : fill(new NiceTreeModelListener[listeners.length], int i => listeners[i].toNiceTreeModelListener());
}


//JDK1.4  getNicePopupMenuListeners(this@javax.swing.JComboBox)
//JDK1.4  {
//JDK1.4    EventListener[?] listeners = this.getListeners(PopupMenuListener.class);
//JDK1.4    return (listeners == null) ? null : fill(new NicePopupMenuListener[listeners.length], int i => listeners[i].toNicePopupMenuListener());
//JDK1.4  }

//JDK1.4  getNiceChangeListeners(this@javax.swing.MenuSelectionManager)
//JDK1.4  {
//JDK1.4    EventListener[?] listeners = this.getListeners(ChangeListener.class);
//JDK1.4    return (listeners == null) ? null : fill(new NiceChangeListener[listeners.length], int i => listeners[i].toNiceChangeListener());
//JDK1.4  }

//JDK1.4  getNiceChangeListeners(this@javax.swing.JSpinner)
//JDK1.4  {
//JDK1.4    EventListener[?] listeners = this.getListeners(ChangeListener.class);
//JDK1.4    return (listeners == null) ? null : fill(new NiceChangeListener[listeners.length], int i => listeners[i].toNiceChangeListener());
//JDK1.4  }

//JDK1.4  getNiceChangeListeners(this@javax.swing.AbstractSpinnerModel)
//JDK1.4  {
//JDK1.4    EventListener[?] listeners = this.getListeners(ChangeListener.class);
//JDK1.4    return (listeners == null) ? null : fill(new NiceChangeListener[listeners.length], int i => listeners[i].toNiceChangeListener());
//JDK1.4  }
