
package regtest.basic;

abstract interface I {
  alike kf2(alike x) = x;
}

class KA implements I {}
class KB extends KA {}
class KC extends KB implements regtest.basic.I {}
final class KD extends KC implements I {}

<I T> T kf(T);

kf(k@KA) = k;
kf(k#KA) = new KA();

kf(k#KB) = new KA();
kf(k@KB) = k;

kf(x@KD) = new KD();

// test kind extension (see regtest.multipkg) 
abstract interface I2 extends I {}

void test_kinds()
{
  println("### Testing kinds ###");
  KA a = kf(new KA());
  a = kf(new KB());
  KC c = kf(new KC());
  KD d = kf(new KD());

  a = kf2(a, d);
}
