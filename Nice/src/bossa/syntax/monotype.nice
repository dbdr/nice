/**************************************************************************/
/*                                N I C E                                 */
/*             A high-level object-oriented research language             */
/*                        (c) Daniel Bonniot 2004                         */
/*                                                                        */
/*  This program is free software; you can redistribute it and/or modify  */
/*  it under the terms of the GNU General Public License as published by  */
/*  the Free Software Foundation; either version 2 of the License, or     */
/*  (at your option) any later version.                                   */
/*                                                                        */
/**************************************************************************/

package bossa.syntax;

import bossa.util.*;

public let byte nullness_none = 0;
public let byte nullness_maybe = 1;
public let byte nullness_sure = 2;
public let byte nullness_absent = 3;

/**
   Syntactic monomorphic type.

*/
public abstract class Monotype implements Located
{
  /** Set by the parser. */
  public byte nullness = nullness_none;

  /** @return true if "alike" appears inside this monotype. */
  boolean containsAlike();

  mlsub.typing.Monotype rawResolve(TypeMap tm);

  Monotype substitute(Map<String,Monotype> map);
  
  public boolean isVoid() = false;

  String nullnessString()
  {
    if (nullness == nullness_maybe)
      return "?";
    else if (nullness == nullness_sure)
      return "!";
    else
      return "";
  }

  public mlsub.typing.Monotype resolve(TypeMap tm)
  {
    mlsub.typing.Monotype raw = this.rawResolve(tm);

    if (nullness == nullness_none)
      return raw;
    else if (nullness == nullness_maybe)
      return maybeMonotype(nice.tools.typing.Types.rawType(raw));
    else if (nullness ==  nullness_sure)
      return sureMonotype(nice.tools.typing.Types.rawType(raw));
    else if (nullness == nullness_absent)
      {
	if (raw instanceof mlsub.typing.MonotypeVar)
	  return raw;
	else
	  return sureMonotype(raw);
      }
    else
      throw Internal.error("Bad nullness tag");
  }

  /** called instead of toString if parenthesis are unnecessary */
  public String toStringExtern() = this.toString(); 
}

/** iterates resolve() on the collection of Monotype */
mlsub.typing.Monotype[?] resolveMonotypes(TypeMap s, Monotype[?] c)
{
  if (c == null || c.length == 0)
    return null;
    
  mlsub.typing.Monotype[] res = cast(new mlsub.typing.Monotype[c.length]);

  for (int n = c.length; --n >= 0;)
    {
      let old = c[n];
      let nou = old.resolve(s);

      if (nou == null)
	User.error(old, old + " : Monotype not defined");

      res[n] = nou;
    }
  return res;
}
 
/**
  Wrapping a mlsub Monotype in a syntactic monotype
 */
public class MonotypeWrapper extends Monotype
{
  final mlsub.typing.Monotype type;

  containsAlike() = false;
    
  rawResolve(tm) = type;

  substitute(map) = this;

  location() = Location.nowhere();

  toString() = String.valueOf(type);
}

public final class MonotypeVarWrapper extends MonotypeWrapper
{
  rawResolve(tm)
  {
    let res = tm.lookup(type.toString());
    if (res != null)
      return cast(res);

    return type;
  }
}

/**
  Wrapper for delaying resolution of constructed monotypes.
 */
public  final class SureMonotypeWrapper extends Monotype
{
  mlsub.typing.TypeConstructor tc;
  mlsub.typing.Monotype[?] params;

  containsAlike() = false;

  rawResolve(tm)
  {
    // See if this is a class with default type parameters
    let res = getTypeWithTC(tc, params);
    if (res != null)
      return sureMonotype(res);

    try{
      return sureMonotype(new mlsub.typing.MonotypeConstructor(tc, params));
    }
    catch(mlsub.typing.BadSizeEx e){
      throw User.error(this, "Class " + tc + Util.has(e.expected, "type parameter", e.actual));
    }
  }

  substitute(map) = this;

  location() = Location.nowhere();

  toString() = tc + ( params != null ? Util.map("<",",",">",params) : "");
}

/**
   A monotype, build by application of
   a type constructor to type parameters.

*/
public class MonotypeConstructor extends Monotype
{
  public ?TypeIdent tc = null;
  // used when the lowlevel TC is know in advance
  private ?mlsub.typing.TypeConstructor lowlevelTC = null;
  TypeParameters parameters;
  ?Location loc;
 
  Monotype cloneType() = new MonotypeConstructor(tc:tc,parameters:parameters,loc:loc);

  rawResolve(tm)
  {
    if (lowlevelTC == null)
      {
	let newTC = notNull(this.tc).resolveToTC(tm);
	if (! (newTC instanceof mlsub.typing.TypeConstructor))
	  throw User.error(notNull(this.tc), notNull(this.tc)+" should be a type constructor");
	lowlevelTC = newTC;
      }

    mlsub.typing.Monotype[?] resolvedParams = parameters.resolve(tm);

    try{
      return new mlsub.typing.MonotypeConstructor(lowlevelTC, resolvedParams);
    }
    catch(mlsub.typing.BadSizeEx e){
      // See if this is a class with default type parameters
      let res = getTypeWithTC(notNull(lowlevelTC), cast(resolvedParams));
      if (res == null)
        throw User.error(this, (tc!=null ? "Class "+tc : notNull(lowlevelTC).toString()) +
		       Util.has(e.expected, "type parameter", e.actual));

      return res;
    }
  }

  substitute(map)
  {
    Monotype res = createMonotypeConstructor
      (notNull(tc),
       new TypeParameters(content: parameters.content.mapToArray(Monotype t => t.substitute(map))),
       loc);
    res.nullness = this.nullness;
    return res;
  }

  containsAlike() = parameters.content.any(Monotype t => t.containsAlike());

  public ?TypeIdent getTC() = tc;
  
  public TypeParameters getTP() = parameters;
  
  location() = loc || notNull(tc).location();

  toString()
  {
    return this.nullnessString() + 
      (lowlevelTC != null ? notNull(lowlevelTC).toString() : notNull(tc).toString()) 
      + parameters;
  }

}

public MonotypeConstructor createMonotypeConstructor(TypeIdent tc, ?TypeParameters parameters,
			     ?Location loc)
{
  return new MonotypeConstructor(tc: tc, 
	parameters: parameters || new TypeParameters(content: []), loc: loc);
}

Monotype createMonotypeConstructor(mlsub.typing.TypeConstructor tc, TypeParameters parameters,
		      Location loc)
{
  return new MonotypeConstructor(lowlevelTC: tc, parameters: parameters, loc: loc);
}

/**
   Type parameters.
   Holds a colloction of Monotype.

*/
public class TypeParameters
{
  public Monotype[] content;

  mlsub.typing.Monotype[?] resolve(TypeMap ts)
  {
    return resolveMonotypes(ts, content);
  }

  toString() = Util.map("<",", ",">", content);
}  

public TypeParameters createTypeParameters(List<Monotype> tps)
{
  return new TypeParameters(content: tps.toArray());
}
/**
   Functional type.

 */
public class FunType extends Monotype
{
  private Monotype[] in;
  private Monotype out;

  rawResolve(tm)
  {
    return new mlsub.typing.FunType(resolveMonotypes(tm,in), out.resolve(tm));
  }

 substitute(map)
  {
    Monotype res = new FunType(in: in.mapToArray(Monotype t => t.substitute(map)), out: out.substitute(map));
    res.nullness = this.nullness;
    return res;
  }

  containsAlike() = in.any(Monotype t => t.containsAlike()) || out.containsAlike();
  
  location() = out.location();

  toString()
  {
    return "(" + Util.map("", ", ", "", in) + 
      (nullness == nullness_maybe ? ")?->" : ")->") + out;
  }
  
  toStringExtern() = "(" + Util.map("", ", ", "", in) + ")->" + out.toStringExtern();
}

public FunType createFunType(?List<Monotype> in, Monotype out)
{
  return new FunType(in: (in != null ? in.toArray() : []), out: out);
}

public FunType createFunType_(Monotype[?] in, Monotype out)
{
  return new FunType(in: (in != null ? in : []), out: out);
}

/**
   The "alike" syntactic keyword in Monotypes

 */
public class Alike extends Monotype
{
  private Monotype[] parameters;
  private Location loc;

  // Alike should be removed as soon as types are constructed.
  rawResolve(tm)
  {
    throw User.error(this, "\"alike\" can only be used in class method definitions");
  }

  void typecheck()
  {
    Internal.error("Alike not resolved");
  }

  substitute(map)
  {
    let tc = map.get(alike_id);

    if (tc == null)
      return this;

    assert tc instanceof MonotypeConstructor;
    let res = createMonotypeConstructor(notNull(tc.lowlevelTC), 
       new TypeParameters(content: parameters.mapToArray(Monotype t => t.substitute(map))), 
       loc);
    res.nullness = this.nullness;
    return res;
  }

  containsAlike() = true;
  
  toString() = "alike" + Util.map("<", ", ", ">", parameters);

  location() = loc;
}

// common ID object
let String alike_id = "<ALIKE>";
String getAlikeID() = alike_id;

public Monotype createAlike(?List<Monotype> parameters, Location location)
{
  return new Alike(parameters: parameters == null ? [] : parameters.toArray(), loc: location);
}
