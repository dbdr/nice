/// Global
?String maybeString() = null;
let ()->?String maybeStringGenerator = (int x => ()=> x++ > 10 ? "abc" : null)(0); 
void maybeThrow() = throw new Exception();
boolean maybeTrue() = true;
class A {}
class B extends A { int x = 0; }
class C extends A { int y = 1; }
class D extends C {}

/// PASS
  ?String s = maybeString();
  s = "abc";
  s.substring(1);

/// FAIL
  ?String s = maybeString();
  if (s == null)
    s = "abc";

  s = null;
  s. /*/// FAIL HERE*/ substring(1);

/// PASS
  ?String s = maybeString();
  if (s == null)
    s = "abc";

  s.substring(1);

/// PASS
  ?String s = maybeString();
  s = "abc";
  if (s != null)
    s = null;

/// FAIL
  ?String s = "abc";
  if (s != null)
    s = null;

  s. /*/// FAIL HERE*/ substring(1);

/// FAIL
  ?String s = maybeString();
  s = "abc";
  if (maybeTrue())
    {
      if (maybeTrue())
        s = null;
      else
        s = "abc";
    }
  else
    s = "abc";

  s. /*/// FAIL HERE*/ substring(1);

/// PASS bug
  ?String s = maybeString();
  if (maybeTrue())
    {
      if (s == null)
        s = "abc";
    }
  else
    s = "abc";

  s.substring(1);

/// PASS
  // Nullness analysis on assignments. RFE# 681385
  func( null ).append( "123" );
  /// Toplevel
StringBuffer func( ?StringBuffer foo ) {
  if( foo == null ) foo = new StringBuffer( 22 );
  return foo.append( "bar" );
}

/// PASS bug
  ?String s = null; 
  if(maybeTrue())
    s = "abc";
  else
    s = "zyx";

  s.substring(1);

/// FAIL
  ?String s = null; 
  if(maybeTrue())
    s = "abc";
  else
    s = null;

  s. /*/// FAIL HERE*/ substring(1);

/// FAIL
  ?String s = null;
  if(maybeTrue())
    s = null;
  else
    s = "abc";

  s. /*/// FAIL HERE*/ substring(1);

/// PASS bug
  ?String s = maybeString();
  if (s != null)
    s.substring(1);

  void foo() { s = null; }
  foo();

/// PASS
  ?String s = maybeString();
  ?String t = null;
  if (s != null)
    {
      t = s;
      t.substring(1);
    }

/// PASS bug
  ?String s = maybeStringGenerator();
  while (s == null)
    s = maybeStringGenerator();
  
  s.substring(1);

/// PASS bug
  ?String s = maybeStringGenerator();
  while (s == null)
    {
      s = maybeStringGenerator();
      if (s != null)
        break;
      s = maybeStringGenerator();
    }

  s.substring(1);

/// FAIL
  ?String s = maybeStringGenerator();
  while (s == null)
    {
      s = maybeStringGenerator();
      if (s == null)
        break;
      s = maybeStringGenerator();
    }

  s. /*/// FAIL HERE*/ substring(1);

/// FAIL
  ?String s = "abc";
  ?String t = "xyz";
  void foo() { t=s; s = null; }
  foo();
  foo();
  t.substring(1);

/// PASS bug
  ?String s = maybeString();
  if (s == null)
    s = "abc";

  void foo() { s = "xyz"; }
  foo();
  s.substring(1);

/// FAIL
  ?String s = "abc";
  try {
    s = null;
    maybeThrow();
    s = "xyz";
  } catch (Exception e) {
     s. /*/// FAIL HERE*/ substring(1);
  }

/// FAIL
  ?String s = "abc";
  try {
    maybeThrow();
  } catch (Exception e) {
     s = null;
  } catch (Throwable e) {
     s = "xyz";
  } finally {
    s. /*/// FAIL HERE*/ substring(1); 
  }

/// FAIL
  ?String s = "abc";
  ()->void func;
  int x = 0;
  while (x++ < 10) {
    s. /*/// FAIL HERE*/ substring(1);
    func = () => {s = null; };
    func();
  }

/// PASS bug
  ?String s = maybeString();
  try {
    s = "abc";
    maybeThrow();
  } catch (Exception e) {
    s = "abc";
  }
  s.substring(1);

/// PASS bug
  ?String s = maybeString();
  try {
    s = null;
    maybeThrow();
  } catch (Exception e) {
    s = null;
  } finally  {
    s = "abc";
  }
  s.substring(1);

/// PASS bug
  A a = new A();
  a = new B();
  assert a.x == 0;

/// PASS bug
  A a = new A();
  a = new B();
  a = new C();
  assert a.y == 1;

/// PASS bug
  A a = new A();
  if (a instanceof B)
    a = a;
  else
    a = new B();

  assert a.x == 0;

/// FAIL
  A a = new A();
  if (! (a instanceof B))
    a = new B();

  a = new A();
  assert a. /*/// FAIL HERE*/ x == 0;

/// PASS bug
  A a = new A();
  if (! (a instanceof B))
    a = new B();
  else
    a = a;

  assert a.x == 0;

/// FAIL
  A a = new A();
  if (maybeTrue())
    a = new B();
  else 
    a = new C();

  assert a. /*/// FAIL HERE*/ x == 0;

/// PASS bug
  A a = new A();
  if (maybeTrue())
    a = new C();
  else 
    a = new D();

  assert a.y == 1;

/// PASS bug
 ?C a = new D();
 if (maybeTrue())
   {
     if (a == null)
       a = new C();
   }
 else
   {
     if (!(a instanceof D))
       a = new D(); 
   }

 assert a.y == 1;
