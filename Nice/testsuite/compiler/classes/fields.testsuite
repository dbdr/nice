/// FAIL
  /// TOPLEVEL
  class A
  {
    int x = "Type error";
  }

/// PASS
  let dummy = new A();
  /// TOPLEVEL
  class A
  {
    boolean x = false;
  }

/// PASS
  /// TOPLEVEL
  class A<T>
  {
    ?T x = null;
  }

/// PASS
  /// TOPLEVEL
  class SymbolTable<Sym>
  {
    java.util.Hashtable<String, Sym> symbols = new java.util.Hashtable();
  }

/// PASS
  /// Toplevel
  class A
  {
    B b = new B();
  }
  class B {}

/// PASS
  assert ((new A().f)(3) == 3);
  /// Toplevel
  class A
  {
    int->int f = int x => x;
  }

/// PASS
  /// Toplevel
  class A<T>
  {
    T->T f = T x => x;
  }

/// PASS
  let dummy = new A();
  /// Toplevel
  class A
  {
    int i = constante;
  }
  var int constante = 42;

/// PASS
  assert (new A().i == 1);
  /// Toplevel
  class A
  {
    int i = id(1);
  }
  int id(int x) = x;

/// PASS
  /// Toplevel

  void doSomething(String s) { let dummy = new Martin(); }

  class Martin
  {
    String -> void f = String s => doSomething(s);
  }

/// PASS
  /// Toplevel
  void g() { let dummy = new Martin(); }

  class Martin
  {
    () -> String f = () => "";
  }

/// FAIL
  /// Toplevel
  interface I
  {
    String s;
  }

/// PASS
  /// Toplevel
  class Foo {}
  class Bar {
    final Class[] classes = [Foo.class, Bar.class];
  }

/// FAIL
  /// Toplevel
class A { int x; int x; }

/// FAIL
  /// Toplevel
class A { int x; }
class B extends A { int /* /// FAIL HERE */ x; }
class C extends B {}

/// FAIL
  /// Toplevel
class A { final int x = 1; }
int f(A a) = a.x++;

/// PASS
  // accessing a final static field of an interface implemented by ObjectInputStream
  int x = ObjectInputStream.TC_NULL;
  /// Toplevel
  import java.io.*;
