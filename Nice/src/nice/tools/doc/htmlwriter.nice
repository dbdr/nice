package nice.tools.doc;

/**
   

   @author Francis Barber
*/

    /*Below is various info that could be used in the
     *construction of the method entry
     */
    //The compiler doesn't like this:  println("Syntactic return type: " + m.getSyntacticReturnType());
    //println("Return type: " + m.getReturnType());
    //println("Arity: " + m.getArity());
    //println("Type: " + m.getType());
    //println("Formal Parameters: " + m.formalParameters());

import bossa.syntax;
import java.util.*;
import java.text.*;
import java.io.*;

/** TESTCommentTEST
 */
int testMethod(double testvar) {
    return 0;
}

/**
 *Test Class Comment
 */
class HTMLWriter {
    
  /**
   * Default implementation - does nothing
   * @param d a definition to document
   * @param packageName the name of the package this definition is in.
   */
  void write(Definition d, String packageName) {
      //System.err.println("Ignoring " + d.getName() + " (class: " + d.getClass().getName() + ") with docString: "+ d.docString());
  }

  write(TypeDefinition c, packageName) {
    // Here we handle classes
    
    //Initialise a FileWriter
    // Output directory for this class
    File dir = new File(outdir, packageName.replace('.', java.io.File.separator));
    if(!dir.exists() && !dir.mkdirs()) {
        System.err.println("Error creating directory structure");
    }
    
    String fileName = c.getName().toString();
    //we only want information after the last .
    //that is, nice.lang.Maybe -> Maybe
    //this should also work when "." is not found
    fileName = fileName.substring(fileName.lastIndexOf(".") + 1);
    //escape any characters that might be illegal for the filesystem
    fileName = escapeFilename(fileName);
    BufferedWriter writer = new BufferedWriter
      (new FileWriter(new File(dir, fileName + ".html")));
    
    writer.write(getHeader(c.getName().toString()));

    writer.write("<h1>Class " + htmlEncode(c.getName()) + "</h1>\n");

    //Print hierarchy
    ArrayList<TypeDefinition> list = new ArrayList();
    ?ClassDefinition superClass = c.getSuperClassDefinition();
    while(superClass != null) {
      list.add(superClass);
      superClass = superClass.getSuperClassDefinition();
    }
    /*This creates a nice-looking String as follows:
     *Super-Super-Class
     *   |
     *   +--Super-Class
     *         |
     *         +--Class
     */
    String hierarchy = htmlEncode(c.getName());
    for(int i = 0; i < list.size(); i++) {
      String spaces = "";
      for(int j = 0; j < (list.size()-i)*6-3; j++)
        spaces = spaces + ' ';
      hierarchy = htmlEncode(list.get(i).getName()) + "\n" + spaces + "|\n" + spaces + "+--" + hierarchy;
    }
    writer.write("<pre>\n");
    writer.write(hierarchy);
    writer.write("</pre>\n");

    //Implemented interfaces
    InterfaceDefinition[?] interfaces = c.getImplementedInterfaces();
    if(interfaces != null && interfaces.length > 0) {
      writer.write("<b>Implemented interfaces:</b>\n");
      writer.write("<ul>\n");
      interfaces.foreach(InterfaceDefinition i =>
  		         writer.write("<li>" + htmlEncode(i.getName()) + "</li>\n"));
      writer.write("</ul>\n");
    }
    
    writer.write("<p>\n");
    String comments;
    if(c.docString() != null) {
        comments = notNull(c.docString());
        
        //Note: the comments is deliberately not htmlEncoded because I want people
        //to be able to put their own html in the comment.
        Comment comm = new Comment(commentStr: comments);
        List<(?String, String)> tags = comm.tags;
        //write the general comment
        (?String a, String b) = tags.removeAt(0);
        writer.write("<div class='generalComment' >\n");
        writer.write(b + "\n");
        writer.write("</div\n");
        writer.write("<table>\n");
        for((?String, String) tag : tags) {
            writer.write("<tr>\n");
            (?String x, String y) = tag;
            writer.write("<td style='font-style: italic'>" x ":</td>\n");
            writer.write("<td>" y "</td>\n");
            writer.write("</tr>\n");
        }
        writer.write("</table>\n");
    }
    writer.write("</p>\n");

    writer.write(getFooter());
    writer.close();
  }

  write(GlobalVarDeclaration gv, packageName) {
    //Handle global variables
    
    //Initialise a FileWriter
    File dir = new File(outdir, packageName.replace('.',java.io.File.separator));
    if(!dir.exists() && !dir.mkdirs()) {
        System.err.println("Error creating directory structure");
    }
    
    BufferedWriter writer = new BufferedWriter
      (new FileWriter(new File(dir, "gv_" escapeFilename("" gv.getName()) ".html")));
    
    writer.write(getHeader(gv.getName().toString()));
  
    writer.write("<h1>Global Variable " + htmlEncode(gv.getName()) + "</h1>\n");
  
    writer.write(htmlEncode(gv.toString()));
  
    //Note: the comments is deliberately not htmlEncoded because I want people
    //to be able to put their own html in the comment.
    writer.write("<p>\n");
    if(gv.docString() != null) {
        Comment comm = new Comment(commentStr: notNull(gv.docString()));
        List<(?String, String)> tags = comm.tags;
        //write the general comment
        (?String a, String b) = tags.removeAt(0);
        writer.write(b + "\n");
    }
    writer.write("</p>\n");
 
    writer.write(getFooter());
    writer.close();
  }
  
  write(MethodDeclaration m, packageName) {
    //Handle methods
    
    //Initialise a FileWriter
    File dir = new File(outdir, packageName.replace('.', java.io.File.separator));
    if(!dir.exists() && !dir.mkdirs()) {
        System.err.println("Error creating directory structure");
    }
    
    BufferedWriter writer = new BufferedWriter
      (new FileWriter(new File(dir, escapeFilename(getMethodFilename(m)) + ".html")));
    
    writer.write(getHeader(m.getName().toString()));
  
    writer.write("<h1>Method " + htmlEncode(m.getName()) + "</h1>\n");
  
    writer.write(htmlEncode(m.toString()));
    
    //Note: the comments is deliberately not htmlEncoded because I want people
    //to be able to put their own html in the comment.
    writer.write("<p>\n");
    if(m.docString() != null) {
        Comment comm = new Comment(commentStr: notNull(m.docString()));
        List<(?String, String)> tags = comm.tags;
        (?String a, String b) = tags.removeAt(0);
        writer.write(b + "\n");
    }
    writer.write("</p>");
 
    writer.write(getFooter());
    writer.close();
  }

  write(DefaultMethodImplementation m, packageName) {
    this.write(m.getDeclaration(), packageName);
  }

  /**
   * Generate a list of source files, with sub-lists of the classes, methods,
   * and global variables within them.
   *@param p the Package to be documented.
   */
  void write(bossa.modules.Package p) {
    try {
      File dir = new File(outdir, p.getName().replace('.',java.io.File.separator));
      //if the directory doesn't exist try to create it
      if(!dir.exists() && !dir.mkdirs()) {
          System.err.println("Error creating directory structure");
      }
      BufferedWriter writer = new BufferedWriter
        (new FileWriter(new File(dir, "index.html")));
      
      String javascript = "<script type=\"text/javascript\">\n" +
                          "  function toggle(elem) {\n" +
                          "    //transform the string element into an element\n" +
                          "    elem = document.getElementById(elem);\n" +
                          "    if(elem.style.display != \"none\")\n" +
                          "      elem.style.display = \"none\";\n" +
                          "    else\n" +
                          "      elem.style.display = \"\";\n" +
                          "  }\n" +
                          "</script>";
      //temporary measure while stylesheets are broken
      String css = "<style type=\"text/css\">\n" +
                   "h3.listheading {\n" +
                   "  font-size: medium;\n" +
                   "  margin: 0px 0px 0px 0px;\n" +
                   "}\n" +
                   "</style>\n";
      
      writer.write(getHeader("Package " + p.getName(), javascript + css));
      
      //write a heading
      writer.write("<h1>Package " htmlEncode(p.getName()) "</h1>\n");
            
      //create a list of source files in the package
      //we use a map instead of a set of definitions because
      //we also want keep a list of which files contain which definitions.
      //the list is sorted by filename (treemap automatically sorts).
      Map<File, List<Definition>> map = new TreeMap();
      
      for(Definition d : p.getDefinitions().definitions()) {
        //we only display information about these types
        if(d instanceof TypeDefinition ||
           d instanceof MethodDeclaration ||
           d instanceof DefaultMethodImplementation ||
           d instanceof GlobalVarDeclaration) {
          //check that there is a file associated with this definition
          bossa.util.Location loc = d.location();
          if(loc instanceof bossa.util.Location.File) {
              File file = loc.getFile();
              if(!map.containsKey(file))
                  map.put(file, new LinkedList());
              //although map.get() returns something of type ?List we know
              //that it cannot be null because we checked that with the
              //previous if statement.
              //here, we get the List associated with file, assert that it is
              //not null, and then add d to the list.
              notNull(map.get(file)).add(d);
          }
        }
        else {
          //System.err.println("Ignoring " d "\n  (type " d.getClass() ")");
        }
      }
      
      //we can look at both keys and values by enumerating the entries of the
      //map.  thanks to Core Java 2 Volume II - Advanced Features by Cay S.
      //Horstmann and Gary Cornell. due to a lack of publishing details I'll
      //just provide the ISBN: 0-13-092738-4
      Set<Map.Entry<File, List<Definition>>> entries = map.entrySet();
      Iterator<Map.Entry<File, List<Definition>>> iterator = entries.iterator();
      while(iterator.hasNext()) {
          Map.Entry<File, List<Definition>> entry = iterator.next();
          File file = entry.getKey();
          List<Definition> list = entry.getValue();
          writer.write(sourceCodeFiles(file, list));
      }
      
      writer.write(getFooter());
      writer.close();
    } catch(IOException ioe) {
      ioe.printStackTrace();
    }
  }
  
  /**
   * Writes a list of all classes, methods, and global variables
   */
  void writeIndex(bossa.modules.Package p) {
    try {
      File dir = new File(outdir, p.getName().replace('.',java.io.File.separator));
      if(!dir.exists() && !dir.mkdirs()) {
          System.err.println("Error creating directory structure");
      }
      BufferedWriter writer = new BufferedWriter
        (new FileWriter(new File(dir, "package-index.html")));
      writer.write(getHeader("Package " + p.getName()));
      
      //write a heading
      writer.write("<h1>Package " htmlEncode(p.getName()) "</h1>\n");
            
      //we need to separate class, methods, and global variables
      (ArrayList<TypeDefinition> classes,
       ArrayList<MethodDeclaration> methods,
       ArrayList<GlobalVarDeclaration> globalVars) = separateDefinitions(p.getDefinitions().definitions());
      
      //Write classes
      if(classes.size() > 0) {
        writer.write("<b>Classes:</b>\n");
        writer.write("<ul>\n");
        for(TypeDefinition c : classes) {
            String s = c.getName().toString();
            int index = s.lastIndexOf('.');
            if(index != s.length()-1)
                s = s.substring(index+1);
            writer.write("<li><a href='" escapeFilename(s) ".html'>" htmlEncode(s) "</a></li>\n");
        }
        writer.write("</ul>\n");
      }
      
      //Write methods
      if(methods.size() > 0) {
        writer.write("<b>Methods:</b>\n");
        writer.write("<ul>\n");
        for(MethodDeclaration m : methods) {
            writer.write("<li><a href='" escapeFilename(getMethodFilename(m)) ".html'>" htmlEncode(m.getName()) "</a>" +
                   ": " htmlEncode(String.valueOf(m.getType())) "</li>\n");
        }
        writer.write("</ul>\n");
      }
      
      //Write global vars
      if(globalVars.size() > 0) {
        writer.write("<b>Global Variables:</b>\n");
        writer.write("<ul>\n");
        for(GlobalVarDeclaration gv : globalVars) {
            writer.write("<li><a href='gv_" escapeFilename("" gv.getName()) ".html'>" htmlEncode(gv.getName()) "</a></li>\n");
        }
        writer.write("</ul>\n");
      }
      
      writer.write(getFooter());
      writer.close();
    } catch(IOException ioe) {
      ioe.printStackTrace();
    }
  }
  
  /** This method takes a List containing all the packages that are going to be
   * documented.  It writes a page at the root of output dir called index.html
   * containing a list of hyperlinks to all the packages.
   */
  void write(List<bossa.modules.Package> packages) {
    try {
      BufferedWriter writer = new BufferedWriter(new FileWriter(new File(outdir, "index.html")));
      writer.write(getHeader("Packages"));
      writer.write("<b>Packages:</b>\n");
      writer.write("<ul>\n");
      for(bossa.modules.Package p : packages) {
          writer.write("<li><a href='" p.getName().replace('.', "/") "/index.html'>" htmlEncode(p.getName()) "</a></li>\n");
      }
      writer.write("</ul>\n");
      writer.write(getFooter());
      writer.close();
    } catch(IOException ioe) {
      ioe.printStackTrace();
    }
  }
}


/** Returns a string containing everything required up to and including the <body> tag
 * @param title a String to be displayed in the browser's title bar
 * @param misc a String containing any miscellaneous items (such as JavaScript, CSS, ...)
 * @param depth the number of levels down we are (required for linking the stylesheet)
 */
String getHeader(String title, ?String misc, int depth) {
  //we could also include some kind of visible header as well
  
  //if depth is 2, this string will contain "../../" etc, etc
  String depthstr = "";
  for(int i = 0; i < depth; i++) {
      depthstr += "../";
  }
  
  //Create a DateFormatter and set the time zone
  DateFormat df = new SimpleDateFormat("dd/MM/yyyy 'at' HH:mm:ss z");
  df.setTimeZone(TimeZone.getTimeZone("GMT"));
  return
  "<html>\n" +
  "<head>\n" + 
  "<!-- Generated by nicedoc on "  df.format(new Date())  " -->\n" +
  "\t<title>" title "</title>\n" +
  "\t<link rel=\"stylesheet\" type=\"text/css\" href=\"" depthstr "main.css\" />\n" +
  (misc != null ? "\t" misc "\n" : "") +
  "</head>\n" +
  "<body>\n";
}

String getHeader(String title) {
    return getHeader(title, 0);
}

String getHeader(String title, String misc) {
    return getHeader(title, misc, 0);
}

String getHeader(String title, int depth) {
    return getHeader(title, null, depth);
}

/** Returns a string containing everything after and including the </body> tag
 */
String getFooter() {
  //we could also include other information here
  return
  "</body>\n" +
  "</html>\n";
}

/** Methods can be overloaded - we can't just use the method name as a file name.
 * This method returns a file name based upon the method name and its arguments.
 */
String getMethodFilename(MethodDeclaration md) {
     return md.getName().toString() + String.valueOf(md.getType()).hashCode();
}


/**
 * Takes a List of definitions and sorts them into class definitions, 
 * method declarations, and global variable declarations.
 */
(ArrayList<TypeDefinition>,
 ArrayList<MethodDeclaration>,
 ArrayList<GlobalVarDeclaration>) separateDefinitions(List<Definition> definitions) {
    ArrayList<TypeDefinition> classes = new ArrayList();
    ArrayList<MethodDeclaration> methods = new ArrayList();
    ArrayList<GlobalVarDeclaration> globalVars = new ArrayList();
    for(Definition d : definitions) {
        if(d instanceof TypeDefinition) {
          classes.add(d);
        }
        else if(d instanceof MethodDeclaration) {
          methods.add(d);
        }
        else if(d instanceof DefaultMethodImplementation) {
          methods.add(d.getDeclaration());
        }
        else if(d instanceof GlobalVarDeclaration) {
          globalVars.add(d);
        }
        else {
          //System.err.println("Ignoring " d "\n  (type " d.getClass() ")");
        }
    }
    return (classes, methods, globalVars);
}

/**
 * Given a file and a list of Definitions, this method generates the appropriate
 * html starting and ending with the <ul> tag.
 */
String sourceCodeFiles(File file, List<Definition> definitions) {
  
  StringBuffer buffer = new StringBuffer();
  //we need to separate class, methods, and global variables
  (ArrayList<TypeDefinition> classes,
   ArrayList<MethodDeclaration> methods,
   ArrayList<GlobalVarDeclaration> globalVars) = separateDefinitions(definitions);
  
  //write file heading
  buffer.append("<ul>\n");
  buffer.append("  <li><a href=\"javascript:toggle('" file.getName() "');\">" file.getName() "</a>\n");
  buffer.append("    <span id=\"" file.getName() "\" style=\"display: none;\">\n");
  
  //write classes
  if(classes.size() > 0) {
    buffer.append("    <h3 class=\"listheading\"><a href=\"javascript:toggle('" file.getName() "Classes');\">Classes</a></h3>\n");
    buffer.append("    <span id=\"" file.getName() "Classes\" style=\"display: none;\">\n");
    buffer.append("    <ul>\n");
    for(TypeDefinition c : classes) {
      String s = c.getName().toString();
      int index = s.lastIndexOf('.');
      if(index != s.length()-1)
          s = s.substring(index+1);
      buffer.append("      <li><a href='" escapeFilename(s) ".html'>" htmlEncode(s) "</a></li>\n");
    }
    buffer.append("    </ul>\n");
    buffer.append("    </span>\n");
  }
  
  //Write methods
  if(methods.size() > 0) {
    buffer.append("    <h3 class=\"listheading\"><a href=\"javascript:toggle('" file.getName() "Methods');\">Methods</a></h3>\n");
    buffer.append("    <span id=\"" file.getName() "Methods\" style=\"display: none;\">\n");
    buffer.append("    <ul>\n");
    for(MethodDeclaration m : methods) {
      buffer.append("      <li><a href='" escapeFilename(getMethodFilename(m)) ".html'>" htmlEncode(m.getName()) "</a>" +
               ": " htmlEncode(String.valueOf(m.getType())) "</li>\n");
    }
    buffer.append("    </ul>\n");
    buffer.append("    </span>\n");
  }
  
  //Write global vars
  if(globalVars.size() > 0) {
    buffer.append("    <h3 class=\"listheading\"><a href=\"javascript:toggle('" file.getName() "GlobalVars');\">Global Variables</a></h3>\n");
    buffer.append("    <span id=\"" file.getName() "GlobalVars\" style=\"display: none;\">\n");
    buffer.append("    <ul>\n");
    for(GlobalVarDeclaration gv : globalVars) {
      buffer.append("      <li><a href='gv_" escapeFilename("" gv.getName()) ".html'>" htmlEncode(gv.getName()) "</a></li>\n");
    }
    buffer.append("    </ul>\n");
    buffer.append("    </span>\n");
  }
  
  //finish file heading tags
  buffer.append("    </span>\n");
  buffer.append("  </li>");
  buffer.append("</ul>");
  
  return buffer.toString();
}
