
/**************************************************************************/
/*                                                                        */
/*  This program is free software; you can redistribute it and/or modify  */
/*  it under the terms of the GNU General Public License as published by  */
/*  the Free Software Foundation; either version 2 of the License, or     */
/*  (at your option) any later version.                                   */
/*                                                                        */
/**************************************************************************/


package nice.ui.common;



/**
 * DECLARATION of methods to make sure that listeners defined in javax.swing.event 
 * can only be requested from classes that are able to handle them
 */

public <AncestorListenerHandler H> NiceAncestorListener[?] getNiceAncestorListeners(H);
public <CaretListenerHandler H> NiceCaretListener[?] getNiceCaretListeners(H);
public <CellEditorListenerHandler H> NiceCellEditorListener[?] getNiceCellEditorListeners(H);
public <ChangeListenerHandler H> NiceChangeListener[?] getNiceChangeListeners(H);
public <DocumentListenerHandler H> NiceDocumentListener[?] getNiceDocumentListeners(H);
public <HyperlinkListenerHandler H> NiceHyperlinkListener[?] getNiceHyperlinkListeners(H);
public <InternalFrameListenerHandler H> NiceInternalFrameListener[?] getNiceInternalFrameListeners(H);
public <ListDataListenerHandler H> NiceListDataListener[?] getNiceListDataListeners(H);
public <ListSelectionListenerHandler H> NiceListSelectionListener[?] getNiceListSelectionListeners(H);
public <MenuDragMouseListenerHandler H> NiceMenuDragMouseListener[?] getNiceMenuDragMouseListeners(H);
public <MenuKeyListenerHandler H> NiceMenuKeyListener[?] getNiceMenuKeyListeners(H);
public <MenuListenerHandler H> NiceMenuListener[?] getNiceMenuListeners(H);
public <PopupMenuListenerHandler H> NicePopupMenuListener[?] getNicePopupMenuListeners(H);
public <TableColumnModelListenerHandler H> NiceTableColumnModelListener[?] getNiceTableColumnModelListeners(H);
public <TableModelListenerHandler H> NiceTableModelListener[?] getNiceTableModelListeners(H);
public <TreeExpansionListenerHandler H> NiceTreeExpansionListener[?] getNiceTreeExpansionListeners(H);
public <TreeWillExpandListenerHandler H> NiceTreeWillExpandListener[?] getNiceTreeWillExpandListeners(H);
public <TreeModelListenerHandler H> NiceTreeModelListener[?] getNiceTreeModelListeners(H);
public <TreeSelectionListenerHandler H> NiceTreeSelectionListener[?] getNiceTreeSelectionListeners(H);
public <UndoableEditListenerHandler H> NiceUndoableEditListener[?] getNiceUndoableEditListeners(H);


/**
 * DEFINITION of methods to make sure that listeners defined in javax.swing.event 
 * can only be requested from classes that are able to handle them
 */

getNiceTableModelListeners(javax.swing.table.TableModel this)
{
	?java.util.List<NiceTableModelListener> result = tableModelListeners.get(this.object());
	return (result == null) ? null : result.toArray();
}

getNiceTableColumnModelListeners(javax.swing.table.TableColumnModel this)
{
	?java.util.List<NiceTableColumnModelListener> result = tableColumnModelListeners.get(this.object());
	return (result == null) ? null : result.toArray();
}

getNiceCellEditorListeners(javax.swing.AbstractCellEditor this)
{
	?java.util.List<NiceCellEditorListener> result = cellEditorListeners.get(this.object());
	return (result == null) ? null : result.toArray();
}

getNiceChangeListeners(javax.swing.colorchooser.DefaultColorSelectionModel this)
{
	?java.util.List<NiceChangeListener> result = changeListeners.get(this.object());
	return (result == null) ? null : result.toArray();
}

getNiceChangeListeners(javax.swing.MenuSelectionManager this)
{
	?java.util.List<NiceChangeListener> result = changeListeners.get(this.object());
	return (result == null) ? null : result.toArray();
}

getNiceUndoableEditListeners(javax.swing.undo.UndoableEditSupport this)
{
	?java.util.List<NiceUndoableEditListener> result = undoableEditListeners.get(this.object());
	return (result == null) ? null : result.toArray();
}

getNiceActionListeners(javax.swing.AbstractButton this)
{
  EventListener[?] listeners = this.getListeners(ActionListener.class);
  return (listeners == null) ? null : listeners.map(toNiceActionListener);
}

getNiceActionListeners(javax.swing.DefaultButtonModel this)
{
  EventListener[?] listeners = this.getListeners(ActionListener.class);
  return (listeners == null) ? null : listeners.map(toNiceActionListener);
}

getNiceActionListeners(javax.swing.JComboBox this)
{
  EventListener[?] listeners = this.getListeners(ActionListener.class);
  return (listeners == null) ? null : listeners.map(toNiceActionListener);
}

getNiceActionListeners(javax.swing.JFileChooser this)
{
  EventListener[?] listeners = this.getListeners(ActionListener.class);
  return (listeners == null) ? null : listeners.map(toNiceActionListener);
}

getNiceActionListeners(javax.swing.JTextField this)
{
  EventListener[?] listeners = this.getListeners(ActionListener.class);
  return (listeners == null) ? null : listeners.map(toNiceActionListener);
}

getNiceActionListeners(javax.swing.Timer this)
{
  EventListener[?] listeners = this.getListeners(ActionListener.class);
  return (listeners == null) ? null : listeners.map(toNiceActionListener);
}

getNiceItemListeners(javax.swing.DefaultButtonModel this)
{
  EventListener[?] listeners = this.getListeners(ItemListener.class);
  return (listeners == null) ? null : listeners.map(toNiceItemListener);
}

getNiceItemListeners(javax.swing.AbstractButton this)
{
  EventListener[?] listeners = this.getListeners(ItemListener.class);
  return (listeners == null) ? null : listeners.map(toNiceItemListener);
}

getNiceItemListeners(javax.swing.JComboBox this)
{
  EventListener[?] listeners = this.getListeners(ItemListener.class);
  return (listeners == null) ? null : listeners.map(toNiceItemListener);
}

getNiceAdjustmentListeners(javax.swing.JScrollBar this)
{
  EventListener[?] listeners = this.getListeners(AdjustmentListener.class);
  return (listeners == null) ? null : listeners.map(toNiceAdjustmentListener);
}

getNiceCaretListeners(javax.swing.text.JTextComponent this)
{
  EventListener[?] listeners = this.getListeners(CaretListener.class);
  return (listeners == null) ? null : listeners.map(toNiceCaretListener);
}

getNiceChangeListeners(javax.swing.AbstractButton this)
{
  EventListener[?] listeners = this.getListeners(ChangeListener.class);
  return (listeners == null) ? null : listeners.map(toNiceChangeListener);
}

getNiceChangeListeners(javax.swing.DefaultBoundedRangeModel this)
{
  EventListener[?] listeners = this.getListeners(ChangeListener.class);
  return (listeners == null) ? null : listeners.map(toNiceChangeListener);
}

getNiceChangeListeners(javax.swing.DefaultSingleSelectionModel this)
{
  EventListener[?] listeners = this.getListeners(ChangeListener.class);
  return (listeners == null) ? null : listeners.map(toNiceChangeListener);
}

getNiceChangeListeners(javax.swing.text.DefaultCaret this)
{
  EventListener[?] listeners = this.getListeners(ChangeListener.class);
  return (listeners == null) ? null : listeners.map(toNiceChangeListener);
}

getNiceChangeListeners(javax.swing.JProgressBar this)
{
  EventListener[?] listeners = this.getListeners(ChangeListener.class);
  return (listeners == null) ? null : listeners.map(toNiceChangeListener);
}

getNiceChangeListeners(javax.swing.JSlider this)
{
  EventListener[?] listeners = this.getListeners(ChangeListener.class);
  return (listeners == null) ? null : listeners.map(toNiceChangeListener);
}

getNiceChangeListeners(javax.swing.JTabbedPane this)
{
  EventListener[?] listeners = this.getListeners(ChangeListener.class);
  return (listeners == null) ? null : listeners.map(toNiceChangeListener);
}

getNiceChangeListeners(javax.swing.JViewport this)
{
  EventListener[?] listeners = this.getListeners(ChangeListener.class);
  return (listeners == null) ? null : listeners.map(toNiceChangeListener);
}

getNiceChangeListeners(javax.swing.DefaultButtonModel this)
{
  EventListener[?] listeners = this.getListeners(ChangeListener.class);
  return (listeners == null) ? null : listeners.map(toNiceChangeListener);
}

getNiceListDataListeners(javax.swing.AbstractListModel this)
{
  EventListener[?] listeners = this.getListeners(ListDataListener.class);
  return (listeners == null) ? null : listeners.map(toNiceListDataListener);
}

getNiceListSelectionListeners(javax.swing.DefaultListSelectionModel this)
{
  EventListener[?] listeners = this.getListeners(ListSelectionListener.class);
  return (listeners == null) ? null : listeners.map(toNiceListSelectionListener);
}

getNiceListSelectionListeners(javax.swing.JList this)
{
  EventListener[?] listeners = this.getListeners(ListSelectionListener.class);
  return (listeners == null) ? null : listeners.map(toNiceListSelectionListener);
}

getNiceAncestorListeners(javax.swing.JComponent this)
{
  EventListener[?] listeners = this.getListeners(AncestorListener.class);
  return (listeners == null) ? null : listeners.map(toNiceAncestorListener);
}

getNiceHyperlinkListeners(javax.swing.JEditorPane this)
{
  EventListener[?] listeners = this.getListeners(HyperlinkListener.class);
  return (listeners == null) ? null : listeners.map(toNiceHyperlinkListener);
}

getNiceInternalFrameListeners(javax.swing.JInternalFrame this)
{
  EventListener[?] listeners = this.getListeners(InternalFrameListener.class);
  return (listeners == null) ? null : listeners.map(toNiceInternalFrameListener);
}

getNiceMenuListeners(javax.swing.JMenu this)
{
  EventListener[?] listeners = this.getListeners(MenuListener.class);
  return (listeners == null) ? null : listeners.map(toNiceMenuListener);
}

getNiceMenuDragMouseListeners(javax.swing.JMenuItem this)
{
  EventListener[?] listeners = this.getListeners(MenuDragMouseListener.class);
  return (listeners == null) ? null : listeners.map(toNiceMenuDragMouseListener);
}

getNiceMenuKeyListeners(javax.swing.JMenuItem this)
{
  EventListener[?] listeners = this.getListeners(MenuKeyListener.class);
  return (listeners == null) ? null : listeners.map(toNiceMenuKeyListener);
}

getNicePopupMenuListeners(javax.swing.JPopupMenu this)
{
  EventListener[?] listeners = this.getListeners(PopupMenuListener.class);
  return (listeners == null) ? null : listeners.map(toNicePopupMenuListener);
}

getNiceTreeExpansionListeners(javax.swing.JTree this)
{
  EventListener[?] listeners = this.getListeners(TreeExpansionListener.class);
  return (listeners == null) ? null : listeners.map(toNiceTreeExpansionListener);
}

getNiceTreeWillExpandListeners(javax.swing.JTree this)
{
  EventListener[?] listeners = this.getListeners(TreeWillExpandListener.class);
  return (listeners == null) ? null : listeners.map(toNiceTreeWillExpandListener);
}

getNiceTreeSelectionListeners(javax.swing.JTree this)
{
  EventListener[?] listeners = this.getListeners(TreeSelectionListener.class);
  return (listeners == null) ? null : listeners.map(toNiceTreeSelectionListener);
}

getNiceTreeSelectionListeners(javax.swing.tree.DefaultTreeSelectionModel this)
{
  EventListener[?] listeners = this.getListeners(TreeSelectionListener.class);
  return (listeners == null) ? null : listeners.map(toNiceTreeSelectionListener);
}

getNiceTreeModelListeners(javax.swing.tree.DefaultTreeModel this)
{
  EventListener[?] listeners = this.getListeners(TreeModelListener.class);
  return (listeners == null) ? null : listeners.map(toNiceTreeModelListener);
}


//JDK1.4  getNicePopupMenuListeners(javax.swing.JComboBox this)
//JDK1.4  {
//JDK1.4    EventListener[?] listeners = this.getListeners(PopupMenuListener.class);
//JDK1.4    return (listeners == null) ? null : fill(new NicePopupMenuListener[listeners.length], int i => listeners[i].toNicePopupMenuListener());
//JDK1.4  }

//JDK1.4  getNiceChangeListeners(javax.swing.MenuSelectionManager this)
//JDK1.4  {
//JDK1.4    EventListener[?] listeners = this.getListeners(ChangeListener.class);
//JDK1.4    return (listeners == null) ? null : fill(new NiceChangeListener[listeners.length], int i => listeners[i].toNiceChangeListener());
//JDK1.4  }

//JDK1.4  getNiceChangeListeners(javax.swing.JSpinner this)
//JDK1.4  {
//JDK1.4    EventListener[?] listeners = this.getListeners(ChangeListener.class);
//JDK1.4    return (listeners == null) ? null : fill(new NiceChangeListener[listeners.length], int i => listeners[i].toNiceChangeListener());
//JDK1.4  }

//JDK1.4  getNiceChangeListeners(javax.swing.AbstractSpinnerModel this)
//JDK1.4  {
//JDK1.4    EventListener[?] listeners = this.getListeners(ChangeListener.class);
//JDK1.4    return (listeners == null) ? null : fill(new NiceChangeListener[listeners.length], int i => listeners[i].toNiceChangeListener());
//JDK1.4  }
