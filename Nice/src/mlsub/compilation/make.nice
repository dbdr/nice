/**************************************************************************/
/*                           B O S S A                                    */
/*        A simple imperative object-oriented research language           */
/*                   (c)  Daniel Bonniot 1999                             */
/*                                                                        */
/*  This program is free software; you can redistribute it and/or modify  */
/*  it under the terms of the GNU General Public License as published by  */
/*  the Free Software Foundation; either version 2 of the License, or     */
/*  (at your option) any later version.                                   */
/*                                                                        */
/**************************************************************************/

// File    : make.nice
// Created : Tue Feb 01 18:20:51 2000 by Daniel Bonniot
//$Modified: Fri Jul 28 15:24:13 2000 by Daniel Bonniot $

package mlsub.compilation;

import mlsub.compilation.*;

/**
 * 'Make' tool for mlsub modules.
 * 
 * @author Daniel Bonniot (d.bonniot@mail.dotcom.fr)
 */

void compileComponent(List<Module>, boolean doLink);
compileComponent(modules, doLink)
{
  print("Compiling");
  modules.iter(fun(Module m) => print(" "+m));
  println("");

  modules.iter(fun(Module m) =>
	       m.lastModifiedRequirement(max(javaList(m.getImports()).map(fun(Module mi)=>mi.lastModification()))));

  modules.iter(fun(Module m) => m.scope());
  modules.iter(fun(Module m) => m.load());

  if (modules.size() >= 1)
    modules.get(0).freezeGlobalContext();

  modules.iter(fun(Module m) => m.compile());

  if (doLink)
    modules.iter(fun(Module m) => m.link());

  if (modules.size() >= 1)
    modules.get(0).unfreezeGlobalContext();
}

void make(mlsub.compilation.Compilation);
make(compilation@mlsub.compilation.Compilation)
{
  List<List<Module>> sccs =
    stronglyConnectedComponents(compilation.root, 
				fun(Module m) => javaList(m.getImports()));
  sccs.iter(fun(List<Module> scc) => 
    { compileComponent(scc,
		       !compilation.skipLink); });
  
  if (!compilation.skipLink) 
    compilation.root.endOfLink();
}

/****************************************************************
 * Wrappers
 ****************************************************************/

java.util.List getImports(Module) = 
  native java.util.List Module.getRequirements();

void lastModifiedRequirement(Module, long) = native void Module.lastModifiedRequirement(long);
long lastModification(Module) = native long Module.lastModification();
boolean isRunnable(Module) = native boolean Module.isRunnable();

void scope(Module) = native void Module.scope();
void load(Module) = native void Module.load();
void compile(Module) = native void Module.compile();
void link(Module) = native void Module.link();

void freezeGlobalContext(Module) = native void Module.freezeGlobalContext();
void unfreezeGlobalContext(Module) = native void Module.unfreezeGlobalContext();
void endOfLink(Module) = native void Module.endOfLink();
