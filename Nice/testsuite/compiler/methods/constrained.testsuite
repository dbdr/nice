/// PASS
  ///Toplevel
  class A{}
  class B extends A{}
  
  interface I<A T>{}

  class X<T | A <: T> implements I<T>{}

  void foo(I<B>);
  /* 
     A type X<T> can only exist for T >: A, so there cannot be X<T> <: I<B>. 
     Therefore foo does not need to be implemented @X.
  */

/// PASS
  ///Toplevel
  class A{}
  class B extends A{}
  
  interface I<A T>{}

  class X<T | A <: T> implements I<T>{}

  void foo(I<A>, I<B>);

/// FAIL
  ///Toplevel
  class A{}
  class B extends A{}
  
  interface I<A T>{}

  class X<T | A <: T> implements I<T>{}

  void foo(I<A>);

/// FAIL
  ///Toplevel
  class A{}
  class B extends A{}
  
  interface I<A T>{}

  class X<T | A <: T> implements I<T>{}
  class Y<T> implements I<T> {}

  void foo(I<A>, I<B>);
  foo(@Y,@Y) {}
  // @X,@Y is missing

/// PASS
  ///Toplevel
  class A{}
  class B extends A{}
  
  interface I<A T>{}

  class X<T | A <: T> implements I<T>{}
  class Y<T> implements I<T> {}

  void foo(I<A>, I<B>);
  foo(@Y,@Y) {}
  foo(@X,@Y) {}

/// FAIL
  ///Toplevel
  class A {}
  class B extends A {}
  interface I<+T | B <: T> {}
  class X<+T | A <: T> implements I<T> {}

  void foo(I<B>);
  foo(/*/// FAIL HERE */X x){}
  // X is not in the domain of foo

/// FAIL
  /// Toplevel
class A
{
  void f();
  f() {}
}

class B extends A
{
  // Use type parameter that does not exist in the declaration
  <U> f() {}
}
