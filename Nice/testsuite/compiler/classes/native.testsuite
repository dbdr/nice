/// PASS
  /// COMMENT Check that native final classes are really considered final.
  /// Toplevel
  <String T> T m(T);
  m(String s) = "";

/// PASS
  /// COMMENT Check that class is not parameterized when its parents are not.
  /// Toplevel
class NBeanContextServicesListener 
  implements java.beans.beancontext.BeanContextServicesListener {}

/// FAIL
  /// Toplevel
// java.util.Map is already retyped, with two type parameters
interface /*/// FAIL HERE */ MyMutableArray<Element> = native java.util.Map;

/// COMMENT Retype two java classes, when one refers to the other.
/// COMMENT The retyping of the second must not fail because the class was
/// COMMENT supposed to be unparameterized.

/// PASS
  /// Toplevel
interface CharacterIterator<T> = native java.text.CharacterIterator;
interface CollationElementIterator<T> = native java.text.CollationElementIterator;

/// PASS
  /// Toplevel
interface CollationElementIterator<T> = native java.text.CollationElementIterator;
interface CharacterIterator<T> = native java.text.CharacterIterator;

/// FAIL
  /// Toplevel
class /*/// FAIL HERE */ Int = native int;

/// PASS
  /// package nativePkg
  /// Toplevel
class Container { Object element; }

  /// package nice
  Container<String> c = new Container("Allo");
  /// Toplevel
  // We do not import java, so Container is like a Java class.
class Container<T> = native nativePkg.Container;
<T> Container<T> newContainer(T) = native new nativePkg.Container(Object);

/// PASS
  /// package a
  /// Toplevel
  class NonExist<T> = native NonExist;
  void foo(NonExist) = native void NonExist.foo();
  void isNotAMethod(String) = native void String.isNotAMethod();
  void isNotAMethod(String, NonExist) = native void String.isNotAMethod(NonExist);
  NonExist NonExist(long) = native new NonExist(long);
  /// package b import a
  {}

/// PASS bug
  // retyping of constructor should not break usage of static fields/functions
  String str = String.valueOf(true);
  /// Toplevel
  String String(char[]) = native new String(char[]);
