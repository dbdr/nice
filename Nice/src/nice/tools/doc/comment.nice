/**************************************************************************/
/*                                N I C E                                 */
/*             A high-level object-oriented research language             */
/*                        (c) Daniel Bonniot 2004                         */
/*                                                                        */
/*  This program is free software; you can redistribute it and/or modify  */
/*  it under the terms of the GNU General Public License as published by  */
/*  the Free Software Foundation; either version 2 of the License, or     */
/*  (at your option) any later version.                                   */
/*                                                                        */
/**************************************************************************/

package nice.tools.doc;

/**
 * The comment class is an abstraction of a comment block.  It contains an
 * instance variable <i>tags</i> contains an ArrayList of tuples that map tag
 * strings to values.  The value <b>null</b> maps to the general comment.
 * The constructor of this class should be used put a comment block in 
 * <i>commentStr</i> (the default value is the empty string.
 * @author Francis Barber
 */
class Comment {
    //a list of tuples that maps tags, such as @param, to values
    //this value is initialised by the custom constructor
    List<(?String,String)> tags = cast(null);
    String commentStr = "";
    
    /*Initialisation*/
    {
        //println("Comment String = " commentStr);
        tags = parse(commentStr);
    }
}

/**
 * Parses a comment block and returns an ArrayList containing tuples that map
 * tag string (such as @param) to values.  The value <b>null</b> is used as the
 * parameter for the general comment heading the block.
 * @param a comment block beginning with &#47;&#42;&#42; and ending with &#42;&#47;
 * @return a list of tuples mapping tags to values.
 */
 
/* I am going to make some assumptions here:
 * 1) The general comments section precedes any @ tags
 * 2) ...
 */
List<(?String,String)> parse(String comments) {
    
    //the first and last chars should be '/'
    if(comments.charAt(0) == '/' && comments.charAt(comments.length() - 1) == '/') {
        comments = comments.substring(1, comments.length() - 1);
    }
    //FIXME: else this is a problem - do something
    
    //read one line at a time
    PushBackTokenizer tok = new PushBackTokenizer(comments, "\n", false /*don't return delimiters*/);
    
    //are there any tokens? if not, nothing more to do
    if(!tok.hasMoreTokens()) {
        //return an empty list
        return new LinkedList();
    }
    
    String line = ""; //stops the compiler complaining that it's not initialised.
    String generalComment = "";
    //the nicedoc comment starts with a block of text - the general comment.
    
    while(tok.hasMoreTokens()) {
        line = tok.nextToken().trim();
        
        //remove the '*' and ' ' if necessary
        line = trimComment(line);
        
        if(line.length() > 0) {
            //if the first character is a '@' then we are into the tags and
            //need to break out of this loop, but replace the token first
            if(line.charAt(0) == '@') {
                tok.pushBack(line);
                break;
            }
            
            //append the current line to the general comment
            generalComment += line + " ";
        }
    }
    
    //if the loop finished because there were no more tokens we need to return now
    if(!tok.hasMoreTokens()) {
        List<(?String, String)> l = new LinkedList();
        l.add((null, generalComment));
        return l;
    }
    
    //root will contain a sorted list of all the tags
    Node root = new Node(value: (null, generalComment));
    ?Node lastNode = null;

    while(tok.hasMoreTokens()) {
        line = tok.nextToken().trim();
        
        //remove the '*' and ' ' if necessary
        line = trimComment(line);
        
        if(line.length() > 0) {
            //this is a new tag
            if(line.charAt(0) == '@') {
                //find the first space - this tells us the range of the tag
                int index = line.indexOf(' ');
                String tag = line.substring(1, index); //skip the '@'
                String comment = line.substring(index+1); //+1 because we need to skip the space
    
                Node n = new Node(value: (tag, comment));
                root.insert(n);
                lastNode = n;
            }
            //this is a continuation of the last tag, append this line to the comment
            else {
                if(lastNode != null) {
                    (?String tag, String comment) = lastNode.value;
                    lastNode.value = (tag, comment + " " + line);
                }
                else {
                    //logically, I don't see how we can get here.
                    throw new RuntimeException("Error parsing comment");
                }
            }
        }
    }
    /*println("Returing:");
    List<(?String, String)> list = toList(root);
    Iterator<(?String, String)> iterator = list.iterator();
    while(iterator.hasNext()) {
        (?String x, String y) = iterator.next();
        println("x: " x "\ny: " y);
    }*/
    return toList(root);
}

String trimComment(String s) {
    StringBuffer buf = new StringBuffer(s);
    while(buf.length() > 0 && (buf.charAt(0) == '*' || buf.charAt(0) == ' '))
        buf.deleteCharAt(0);
    return buf.toString();
}

class PushBackTokenizer extends StringTokenizer {
    List<String> tokens = new ArrayList();

    countTokens() {
        return super + tokens.size();
    }
    
    hasMoreElements() {
        //we need "this" because of a compiler limitation
        return this.hasMoreTokens();
    }
    
    hasMoreTokens() {
        if(!tokens.isEmpty())
            return true;
        else
            return super;
    }
    
    nextElement() {
        return this.nextToken();
    }
    
    nextToken() {
        if(!tokens.isEmpty())
            return tokens.removeAt(tokens.size()-1);
        else
            return super;
    }
    
    nextToken(String delim) {
        throw new UnsupportedOperationException("Method not implemented");
    }
    
    void pushBack(String token) {
        tokens.add(token);
    }
}

class Node {
    (?String,String) value;
    ?Node left = null;
    ?Node right = null;
}

List<(?String,String)> toList(?Node root) {
    if(root != null) {
        //get the result of the left branch
        List<(?String,String)> l = toList(root.left);
        //add ourselves
        l.add(root.value);
        //add the right branch
        l.addAll(toList(root.right));
        return l;
    }
    else {
        return new LinkedList();
    }
}

void insert(Node root, Node node) {
    if(compare(node.value, root.value) < 0) {
        //node is less than current
        if(root.left != null)
            insert(notNull(root.left), node);
        else
            root.left = node;
    } else {
        //node is greater than or equal to current
        if(root.right != null)
            insert(notNull(root.right), node);
        else
            root.right = node;
    }
}

/*This method needs to actually sort in a sensible order.*/
int compare((?String,String) t1, (?String,String) t2) {
    (?String s1, String r1) = t1;
    (?String s2, String r2) = t2;
    if(s1 == null) {
        if(s2 == null)
            return 0;
        else
            return 1;
    }
    else if(s2 == null)
        return -1;
    else
        return s1.compareTo(s2);
}