/**************************************************************************/
/*                                N I C E                                 */
/*             A high-level object-oriented research language             */
/*                        (c) Daniel Bonniot 2001                         */
/*                                                                        */
/*  This program is free software; you can redistribute it and/or modify  */
/*  it under the terms of the GNU General Public License as published by  */
/*  the Free Software Foundation; either version 2 of the License, or     */
/*  (at your option) any later version.                                   */
/*                                                                        */
/**************************************************************************/

package bossa.syntax;

/**
   Helper functions.

 */

?LocatedString identString(?Expression);
identString(e) = null;
identString(IdentExp e) = e.ident;
identString(SymbolExp e) = e.getName();
identString(OverloadedSymbolExp e) = e.ident;

boolean isCallTo(CallExp e, String name) 
{
  ?LocatedString f = identString(e.function);
  return (f != null) && f.toString().equals(name);
}

?MonoSymbol localVariable(Expression);
localVariable(Expression e) = null;
localVariable(SymbolExp e)
{
  let sym = e.symbol;
  if (! (sym instanceof bossa.syntax.MonoSymbol))
    return null;

  //don't allow nullness inference on global variables.
  if (sym instanceof GlobalVarSymbol && sym.isAssignable())
    return null;

  // no type inference on captured variables
  if (sym.captured)
    return null;

  return sym;
}
localVariable(AssignExp e) = localVariable(e.to);

mlsub.typing.Monotype makeSure(mlsub.typing.Monotype m) = 
  notNull(sureMonotype(nice.tools.typing.Types.rawType(m)));

mlsub.typing.Monotype makeUnsure(mlsub.typing.Monotype m) = 
  notNull(maybeMonotype(nice.tools.typing.Types.rawType(m)));

mlsub.typing.Monotype sureMonotype(?mlsub.typing.Monotype type) =
  nice.tools.typing.Types.sureMonotype(type);

mlsub.typing.Monotype maybeMonotype(?mlsub.typing.Monotype type) =
  nice.tools.typing.Types.maybeMonotype(type);

mlsub.typing.Monotype ensureMonomorphic(mlsub.typing.Polytype type,
					LocalValue decl)
{
  type.simplify();

  if (type.getConstraint != null)
    {
      // If the type is polymorphic, we treat the type variables as soft:
      // we enter them in the context, so they are not generalized.

      // Make sure we are in a local typing context, so the new type variables
      // are discarded when the typechecking of the current method is over.
      enterLocalContext();

      notNull(type.getConstraint).enter(true);
    }

  return type.getMonotype();
}

/*
   Make sure that the error is attached to a location.
   If not, located it a the given located object (which should be a close 
   container of the entity creating the error).
*/
bossa.util.UserError ensureLocated(bossa.util.UserError e, 
				   bossa.util.Located loc)
{
  if (e.location == null)
    e.location = loc.location();
  return e;
}

?(MonoSymbol, mlsub.typing.Monotype) getInstanceof(CallExp condition)
{
  if (! condition.isCallTo("instanceof") || condition.arguments.size() != 2)
    return null;

  let sym = localVariable(condition.arguments.getExp(0));
  if (sym == null)
    return null;

  Expression arg2 = condition.arguments.getExp(1);
  if (! (arg2 instanceof TypeConstantExp))
    return null;

  ?TypeConstructor tc = arg2.getTC();
  if (tc == null)
    return null;

  if (tc == nice.tools.typing.PrimitiveType.arrayTC)
    return (sym, notNull(arg2.representedType));

  mlsub.typing.Monotype[?] parameters = null;

  if (tc.arity() != 0)
    {
      let originalType = nice.tools.typing.Types.rawType(sym.getMonotype());
      if (originalType instanceof mlsub.typing.MonotypeConstructor)
	parameters = originalType.getTP();
      else
	return null;
    }

  try {
    return (sym, sureMonotype(new mlsub.typing.MonotypeConstructor(tc, parameters)));
  } catch(BadSizeEx e) {
    return null;
  }
}

/**
   A mapping from type names to type symbols.

*/
public class TypeMaper implements TypeMap
{
  nice.tools.ast.SymbolTable<mlsub.typing.TypeSymbol> inner;
  TypeScope global;
  
  lookup(LocatedString name) = this.lookup(name.toString(), name.location());

  lookup(String name) = this.lookup(name, null);

  public ?mlsub.typing.TypeSymbol lookup(String name, ?bossa.util.Location loc)
  {
    return inner.get(name) || global.lookup(name, loc);
  }
}

// For bootstrap
void _printStackTraceWithSourceInfo(Throwable t) =
  printStackTraceWithSourceInfo(t);

/****************************************************************
 * Temporary: this should be solved when AST classes are written 
 * in Nice, with precise types for the fields.
 ****************************************************************/

mlsub.typing.Polytype getType(Expression) = 
  native mlsub.typing.Polytype Expression.getType();
GlobalTypeScope getGlobalTypeScope() = native GlobalTypeScope Node.getGlobalTypeScope();
<T> String map(String, String, String, T[]) = native String bossa.util.Util.map(String, String, String, Object[]);
<T> String map(String, String, String, ?Collection<T>) = native String bossa.util.Util.map(String, String, String, Collection);
?mlsub.typing.lowlevel.Kind getKind(mlsub.typing.lowlevel.Element) = native mlsub.typing.lowlevel.Kind mlsub.typing.lowlevel.Element.getKind();
?mlsub.typing.Monotype Types_getTypeParameter(mlsub.typing.Polytype, int) = native mlsub.typing.Monotype nice.tools.typing.Types.getTypeParameter(mlsub.typing.Polytype, int);
?mlsub.typing.Monotype Types_getTypeParameter(mlsub.typing.Monotype, int) = native mlsub.typing.Monotype nice.tools.typing.Types.getTypeParameter(mlsub.typing.Monotype, int);
mlsub.typing.Monotype[?] Types_parameters(mlsub.typing.Polytype) = native mlsub.typing.Monotype[] nice.tools.typing.Types.parameters(mlsub.typing.Polytype);
?mlsub.typing.TypeConstructor head(mlsub.typing.Monotype) = native mlsub.typing.TypeConstructor mlsub.typing.Monotype.head();
?gnu.bytecode.ClassType getSuperclass(gnu.bytecode.ClassType) = native gnu.bytecode.ClassType gnu.bytecode.ClassType.getSuperclass();
?mlsub.typing.Constraint getConstraint(mlsub.typing.Polytype) = native mlsub.typing.Constraint mlsub.typing.Polytype.getConstraint();
mlsub.typing.AtomicConstraint[?] AtomicConstraint_substitute(java.util.Map<mlsub.typing.TypeSymbol,mlsub.typing.TypeSymbol>, AtomicConstraint[?]) = native mlsub.typing.AtomicConstraint[] mlsub.typing.AtomicConstraint.substitute(java.util.Map, mlsub.typing.AtomicConstraint[]);
Module module(Definition) = native Definition.module;
boolean equals(LocatedString, LocatedString) = native boolean LocatedString.equals(LocatedString);
?gnu.bytecode.Attribute get(gnu.bytecode.AttrContainer, String) = native gnu.bytecode.Attribute gnu.bytecode.Attribute.get(gnu.bytecode.AttrContainer, String);
void printInterface(Definition, java.io.PrintWriter) = native void Definition.printInterface(java.io.PrintWriter);
?gnu.bytecode.Type TypeImport_lookup(LocatedString) = native gnu.bytecode.Type nice.tools.code.TypeImport.lookup(LocatedString);
List<Node> children(Node) = native Node.children;
LocatedString name(Definition) = native Definition.name;
void addMappingsLS(TypeScope, Collection<LocatedString>, TypeSymbol[]) = native void TypeScope.addMappingsLS(Collection, TypeSymbol[]);
gnu.expr.CopyArgument CopyArgument(Stack<gnu.bytecode.Variable>) = native new gnu.expr.CopyArgument(Stack);
AST AST(List<Definition>, int) = native new AST(List, int);
?mlsub.typing.TypeSymbol lookup(TypeMap, LocatedString) = native mlsub.typing.TypeSymbol TypeMap.lookup(LocatedString);
?mlsub.typing.TypeSymbol lookup(TypeMap, String) = native mlsub.typing.TypeSymbol TypeMap.lookup(String);
List<VarSymbol> lookup(VarScope, LocatedString) = native List VarScope.lookup(LocatedString);
Map<gnu.bytecode.Type,mlsub.typing.TypeConstructor> javaTypeConstructors(bossa.modules.Compilation ) = native bossa.modules.Compilation.javaTypeConstructors;
?LocatedString name(Symbol) = native Symbol.name;
?TypeConstructor associatedTC(mlsub.typing.Interface) = native TypeConstructor mlsub.typing.Interface.associatedTC();
mlsub.typing.AtomicConstraint[?] atoms(mlsub.typing.Constraint) = native mlsub.typing.AtomicConstraint[] mlsub.typing.Constraint.atoms();
?gnu.bytecode.Type Types_get(mlsub.typing.TypeConstructor) = native gnu.bytecode.Type nice.tools.code.Types.get(mlsub.typing.TypeConstructor);
gnu.bytecode.ClassType Type_pointer_type() = native gnu.bytecode.Type.pointer_type;

// Retypings needed since java types are not strict.
mlsub.typing.Polytype boolPolytype() = native nice.tools.typing.PrimitiveType.boolPolytype;
mlsub.typing.Polytype longPolytype() = native nice.tools.typing.PrimitiveType.longPolytype;
mlsub.typing.Polytype intPolytype() = native nice.tools.typing.PrimitiveType.intPolytype;
mlsub.typing.Polytype shortPolytype() = native nice.tools.typing.PrimitiveType.shortPolytype;
mlsub.typing.Polytype bytePolytype() = native nice.tools.typing.PrimitiveType.bytePolytype;
mlsub.typing.Polytype voidPolytype() = native nice.tools.typing.PrimitiveType.voidPolytype;
mlsub.typing.Monotype boolType() = native nice.tools.typing.PrimitiveType.boolType;
mlsub.typing.Monotype intType() = native nice.tools.typing.PrimitiveType.intType;
mlsub.typing.Monotype longType() = native nice.tools.typing.PrimitiveType.longType;
gnu.bytecode.ClassType Type_pointer_type() = native gnu.bytecode.Type.pointer_type;
mlsub.typing.TypeConstructor longTC() = native nice.tools.typing.PrimitiveType.longTC;
mlsub.typing.TypeConstructor intTC() = native nice.tools.typing.PrimitiveType.intTC;
mlsub.typing.TypeConstructor shortTC() = native nice.tools.typing.PrimitiveType.shortTC;
mlsub.typing.TypeConstructor byteTC() = native nice.tools.typing.PrimitiveType.byteTC;
gnu.expr.QuoteExp nullExp() = native gnu.expr.QuoteExp.nullExp;
gnu.expr.QuoteExp falseExp() = native gnu.expr.QuoteExp.falseExp;
gnu.expr.QuoteExp trueExp() = native gnu.expr.QuoteExp.trueExp;
gnu.expr.QuoteExp voidExp() = native gnu.expr.QuoteExp.voidExp;
gnu.expr.QuoteExp QuoteExp_undefined_exp() = native gnu.expr.QuoteExp.undefined_exp;

// Local Variables:
// nice-xprogram: "../bin/nicec -d ../classes"
// End:
