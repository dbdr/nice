
package bossa.syntax;

import java.util.List;
/*
  This file is only useful to bootstrap the compiler,
  since bossa.syntax is implemented both in Java and Nice,
  while we need mutual recursion between the two.

  This class must have the interface of the Nice part of the package.
*/

public class dispatch
{
  public static Statement createReturnStmt(Expression value, boolean fake)
  { return null; }

  public static Expression createFunExp(bossa.syntax.Constraint cst, List formals, Statement body)
  { return null; }

  static Expression createFunExp(bossa.syntax.Constraint cst, MonoSymbol[] formals, Statement body)
  { return null; }

  public static Expression createLiteralArrayExp(List exps)
  { return null; }

  static Expression createOverloadedSymbolExp(List l, LocatedString s)
  { return null; }

  static List removeNonMinimal(List l)
  { return null; }

  static Statement  analyse(Statement  s, VarScope v, TypeScope t, boolean r)
  { return null; }
  
  static Expression analyse(Expression e, VarScope v, TypeScope t) 
  { return null; }

  static Expression analyse(Expression e, Info i) 
  { return null; }

  static void typecheck(Statement s) {}
  static void typecheck(Expression e) {}

  static bossa.util.UserError unknownIdent(LocatedString ident)
  {
    return null;
  }

  static bossa.util.UserError assignmentError
    (bossa.util.Located responsible,
     String target,
     String targetType,
     Expression value)
  { return null; }

  public static void _printStackTraceWithSourceInfo(Throwable t) {}
}

class UnknownIdentException extends bossa.util.UserError
{
  LocatedString ident;
}

class Info {}
