/**************************************************************************/
/*                                N I C E                                 */
/*             A high-level object-oriented research language             */
/*                        (c) Daniel Bonniot 2000                         */
/*                                                                        */
/*  This program is free software; you can redistribute it and/or modify  */
/*  it under the terms of the GNU General Public License as published by  */
/*  the Free Software Foundation; either version 2 of the License, or     */
/*  (at your option) any later version.                                   */
/*                                                                        */
/**************************************************************************/

/*
   Efficient, scope driven symbol table.
*/

package nice.tools.ast;

// Interface

<Sym> SymbolTable<Sym> symbolTable();

class SymbolTable<Sym>
{
  public void set(String name, Sym sym);

  public void begin();
  public void end();

// Implementation

  Map<String, Binder<Sym>> symbols = new HashMap();

  ?Binder<Sym> topBinder = null; // list of the binders added since last begin
  ?Binder<Sym> marks = null;     // remembers topBinders at each begin
}

<Sym> ?Sym get(SymbolTable<!Sym>, String name);

class Binder<Sym>
{
  Sym value;
  ?String name;
  ?Binder<Sym> nextBinder;
  ?Binder<Sym> oldBinding;
}

symbolTable() = new SymbolTable();

<Sym> get(SymbolTable t, name)
{
  ?Binder<!Sym> binder = t.symbols.get(name);
  if (binder == null)
    return null;
  else
    return binder.value;
}

<Sym> set(SymbolTable t, name, sym)
{
  Binder<Sym> binder = new Binder(value: sym, name: name, 
				  nextBinder: t.topBinder, 
				  oldBinding: t.symbols.get(name));
  t.topBinder = binder;
  t.symbols.put(name, binder);
}

<Sym> begin(SymbolTable t)
{
  Binder<Sym> mark = new Binder(value: cast(null), name: null, nextBinder: t.topBinder, oldBinding: t.marks);
  t.topBinder = null;
  t.marks = mark;
}

<Sym> end(SymbolTable t)
{
  ?Binder<Sym> top = t.topBinder;
  while (top != null)
    {
      t.symbols.put(cast(top.name), cast(top.oldBinding));
      top = t.topBinder = top.nextBinder;
    }
  t.topBinder = notNull(t.marks).nextBinder;
  t.marks = notNull(t.marks).oldBinding;
}
