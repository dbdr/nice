/// PASS
  /// Toplevel
<Collection C, T, U> C<U> bar(C<T>, T->U);
bar(x, f) { throw new Error(); }
<C,T,U> bar(l@List : L, f)
{
  L<U> res = similarEmptyCollection(l);
  res.add(f(l[0]));

  // Now we use the fact the res is a list.
  // Therefore, it would be impossible to declare its type as C<U>.
  res.add(res[0]); 

  // By returning res, we need the fact that it is a subtype of C<U>,
  // so we could not declare its type as List<U>.
  return res;
}

/// Global
class A {}
class B extends A { String b; }
<A T> T foo(T);

/// PASS
  /// Toplevel
foo(a) = a;

<T> foo(b@B : X) {
  X copy = b.foo();
  String useB = copy.b;
  return copy;
}

/// FAIL
  /// Toplevel
// : can only come after a real dispatch, otherwise it is useless.
<T> foo(a : X) {}
