
/**************************************************************************/
/*                                                                        */
/*  This program is free software; you can redistribute it and/or modify  */
/*  it under the terms of the GNU General Public License as published by  */
/*  the Free Software Foundation; either version 2 of the License, or     */
/*  (at your option) any later version.                                   */
/*                                                                        */
/**************************************************************************/


package nice.ui.common;


/** 
 * Wrapper classes for all listeners defined in java.beans
 * They implement the according java listener interface
 * and delegate the action(s) to optional anonymous function(s).
 *
 * The classes define fields that store optional anonymous
 * functions that point to the method that should be invoked
 * when the according event occured
 *
 * They override all their inherited methods by calling the appropriate
 * field to invoke the defined listener method.
 *
 * The field can be initialized by using the automatically 
 * generated constructor
 */

class NicePropertyChangeListener implements PropertyChangeListener,MappablePropertyChangeListener
{
  private PropertyChangeEvent ?-> void propertyChange;

  public PropertyChangeEvent ?-> void getPropertyChange() = this.propertyChange;  
  public void setPropertyChange(PropertyChangeEvent ?-> void value) { this.propertyChange = value; }

  isLoaded() = this.propertyChange != null;

  propertyChange(e)
  {
    PropertyChangeEvent ?-> void propertyChange = this.propertyChange;
    if(propertyChange != null) propertyChange(e);
  }
}


class NiceVetoableChangeListener implements VetoableChangeListener,MappableVetoableChangeListener
{
  private PropertyChangeEvent ?-> void vetoableChange;

  public PropertyChangeEvent ?-> void getVetoableChange() = this.vetoableChange;  
  public void setVetoableChange(PropertyChangeEvent ?-> void value) { this.vetoableChange = value; }
  
  isLoaded() = this.vetoableChange != null;
    
  vetoableChange(e)
  {
    PropertyChangeEvent ?-> void vetoableChange = this.vetoableChange;
    if(vetoableChange != null) vetoableChange(e);
  }
}


class NiceBeanContextMembershipListener implements BeanContextMembershipListener, NiceListener
{
  private BeanContextMembershipEvent ?-> void childrenAdded = null;
  private BeanContextMembershipEvent ?-> void childrenRemoved = null;
  
  public BeanContextMembershipEvent ?-> void getChildrenAdded() = this.childrenAdded;
  public BeanContextMembershipEvent ?-> void getChildrenRemoved() = this.childrenRemoved;

  public void setChildrenAdded(BeanContextMembershipEvent ?-> void value) { this.childrenAdded = value; }
  public void setChildrenRemoved(BeanContextMembershipEvent ?-> void value) { this.childrenRemoved = value; }
  
  isLoaded() = 
    this.childrenAdded != null ||
    this.childrenRemoved != null;
 
  childrenAdded(e)
  {
    BeanContextMembershipEvent ?-> void childrenAdded = this.childrenAdded;
    if(childrenAdded != null) childrenAdded(e);
  }

  childrenRemoved(e)
  {
    BeanContextMembershipEvent ?-> void childrenRemoved = this.childrenRemoved;
    if(childrenRemoved != null) childrenRemoved(e);
  }
}


class NiceBeanContextServicesListener 
  extends NiceBeanContextServiceRevokedListener
  implements BeanContextServicesListener
{
  private BeanContextServiceAvailableEvent ?-> void serviceAvailable;

  public BeanContextServiceAvailableEvent ?-> void getServiceAvailable() = this.serviceAvailable; 
  public void setServiceAvailable(BeanContextServiceAvailableEvent ?-> void value) { this.serviceAvailable = value; }
  
  isLoaded() = this.serviceAvailable != null;  
  
  serviceAvailable(e)
  {
    BeanContextServiceAvailableEvent ?-> void serviceAvailable = this.serviceAvailable;
    if(serviceAvailable != null) serviceAvailable(e);
  }
}


class NiceBeanContextServiceRevokedListener implements BeanContextServiceRevokedListener, NiceListener
{
  private BeanContextServiceRevokedEvent ?-> void serviceRevoked;
  
  public BeanContextServiceRevokedEvent ?-> void getServiceRevoked() = this.serviceRevoked;  
  public void setServiceRevoked(BeanContextServiceRevokedEvent ?-> void value) { this.serviceRevoked = value; }
  
  isLoaded() = this.serviceRevoked != null; 

  serviceRevoked(e)
  {
    BeanContextServiceRevokedEvent ?-> void serviceRevoked = this.serviceRevoked;
    if(serviceRevoked != null) serviceRevoked(e);
  }
}


//JDK1.4   class NiceExceptionListener implements ExceptionListener, NiceListener
//JDK1.4   {
//JDK1.4     private Exception ?-> void exceptionThrown;
//JDK1.4      
//JDK1.4     public Exception ?-> void getExceptionThrown() = this.exceptionThrown;
//JDK1.4     public void setExceptionThrown(Exception ?-> void value) { this.exceptionThrown = value; }
//JDK1.4   
//JDK1.4     isLoaded() = this.exceptionThrown != null;
//JDK1.4    
//JDK1.4     exceptionThrown(e)
//JDK1.4     {
//JDK1.4       Exception ?-> void exceptionThrown = this.exceptionThrown;
//JDK1.4       if(exceptionThrown != null) exceptionThrown(e);
//JDK1.4     }
//JDK1.4   }
