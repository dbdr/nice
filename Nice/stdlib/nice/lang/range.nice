/****************************************************************************
 *                                 N I C E                                  *
 *              A high-level object-oriented research language              *
 *                         (c) Daniel Bonniot 2003                          *
 *                                                                          *
 *  This package is free software; you can redistribute it and/or modify    *
 *  it under the terms of the GNU General Public License as published by    *
 *  Free Software Foundation; either version 2 of the License, or (at your  *
 *  option) any later version.                                              *
 *                                                                          *
 *  As a special exception, the copyright holders of this library give you  *
 *  permission to link this library with independent modules to produce an  *
 *  executable, regardless of the license terms of these independent        *
 *  modules, and to copy and distribute the resulting executable under      *
 *  terms of your choice.                                                   *
 ****************************************************************************/

package nice.lang;


public class OpenRange<T | T <: int, int <: T> extends Slice<T> 
{
    { 
      assert !begin.relativeToEnd:
         "OpenRange objects cannot be relative to a list end";
      assert !end.relativeToEnd || end.index == 0:
         "OpenRange objects cannot be relative to a list end";
    }
  Iterator<T> openIterator() = new OpenRangeIterator(range: this, 
						     pos: begin.index-1);
}

public class Range<T | T <: int, int <: T>  extends OpenRange<T>
                                           implements List<T> {

    { 
      assert !end.relativeToEnd:
           "Range objects must have fixed dimensions";       
    }

  isEmpty() = false;

  size() = 1+end.index-begin.index;

  get(index) {
    if (index < 0 || index >= 1+end.index-begin.index) 
      throw new IndexOutOfBoundsException();    
    return int(begin.index) + int(index);
  }
  
  add(elem) =  throw new UnsupportedOperationException();
  add(index, elem) =  throw new UnsupportedOperationException();

  contains(elem) = begin.index <= cast(elem) <= end.index;


  iterator() = new RangeIterator(range: this, pos: begin.index - 1);
  listIterator() = new RangeIterator(range: this, pos: begin.index-1);

  listIterator(index) = new RangeIterator(range: this, pos: begin.index + index-1);

  remove(elem) = throw new UnsupportedOperationException();
  removeAt(index) = throw new UnsupportedOperationException();
  removeAll(elems) = throw new UnsupportedOperationException();
}

public class OpenRangeIterator<T | T <: int, int <: T> implements Iterator<T> {

  final OpenRange<T> range;
  int pos;

  hasNext() = pos+1 <= range.end.index || (range.end.isInfinite);
  next() = ++pos;
  remove() = throw new UnsupportedOperationException();
}

public class RangeIterator<T | T <: int, int <: T> extends OpenRangeIterator
  implements ListIterator<T> {

  hasNext() = pos+1 <= range.end.index;
  hasPrevious() = pos-1 >= range.begin.index;
  previous() = --pos;
  nextIndex() = (pos-range.begin.index) + 1;
  previousIndex() = pos - range.begin.index;

  remove() = throw new UnsupportedOperationException();
  set(elem) = throw new UnsupportedOperationException();
  add(elem) = throw new UnsupportedOperationException();
}

