/**************************************************************************/
/*                                N I C E                                 */
/*             A high-level object-oriented research language             */
/*                        (c) Daniel Bonniot 2004                         */
/*                                                                        */
/*  This program is free software; you can redistribute it and/or modify  */
/*  it under the terms of the GNU General Public License as published by  */
/*  the Free Software Foundation; either version 2 of the License, or     */
/*  (at your option) any later version.                                   */
/*                                                                        */
/**************************************************************************/

package bossa.syntax;

import bossa.util.*;

/**
   Access to a symbol (variable, function parameter).

*/
public class SymbolExp extends Expression
{
  final VarSymbol symbol; 
 
  isAssignable() = symbol.isAssignable();

  getFieldAccessMethod() = symbol.getFieldAccessMethod();

  checkSpecialRequirements(arguments)
  {
    symbol.checkSpecialRequirements(arguments);
  }

  computeType()
  {
    // Very important: each SymbolExp gets a copy of the type of the symbol.
    // Thus it has fresh binders.
    // Otherwise there would be an "aliasing" effect.
    // An important supposition is that two uses of a symbol
    // are two different SymbolExp objects 
    // (with a reference to the same symbol).
    // So they hold different (but equivalent) types.
    type = symbol.getType().cloneType();
  }

  compile()
  {
    try {
      return symbol.compile();
    }
    catch(UsingFieldAsValue e) {
      throw User.error(this, 
		       "You must supply the object that contains this field");
    }
  }
  
  generateCodeInCallPosition()
  {
    try {
      gnu.expr.Expression res = symbol.compileInCallPosition();
      this.location().write(res);
      return res;
    }
    catch(UsingFieldAsValue e) {
      throw User.error(this, 
		       "You must supply the object that contains this field");
    }
  }
  
  getDeclaration()
  {
    let decl = symbol.getDeclaration();
    
    if(decl==null)
      Internal.error(this+" has no bytecode declaration");
    
    return decl;
  }
  
  public LocatedString getName()
  {
    return symbol.getName();
  }
  
  toString() = symbol.getName().toQuotedString();
}

Expression createSymbolExp(VarSymbol symbol, Location loc)
{
  let res = new SymbolExp(symbol: symbol);
  res.setLocation(loc);
  return res;
}

/**
   Access to a symbol of a previous formal parameter.

*/
class ParameterAccessExp extends SymbolExp
{
  override ParameterSymbol symbol;

  isAssignable() = false;

  compile ()
  {
    return new gnu.expr.CopyArgument(notNull(this.symbol.copies));
  }
}

SymbolExp createParameterAccessExp(ParameterSymbol symbol, Location loc)
{
  let res = new ParameterAccessExp(symbol: symbol);
  res.setLocation(loc);
  return res;
}
