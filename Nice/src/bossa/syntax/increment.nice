/**************************************************************************/
/*                                N I C E                                 */
/*             A high-level object-oriented research language             */
/*                        (c) Daniel Bonniot 2004                         */
/*                                                                        */
/*  This program is free software; you can redistribute it and/or modify  */
/*  it under the terms of the GNU General Public License as published by  */
/*  the Free Software Foundation; either version 2 of the License, or     */
/*  (at your option) any later version.                                   */
/*                                                                        */
/**************************************************************************/

package bossa.syntax;

import bossa.util.*;

/**
   Postfix or infix incrementation or decrementation of a numeric variable.
*/

public class IncrementExp extends Expression
{
  Expression variable;
  private final boolean returnOld;
  private final boolean increment;

  computeType()
  {
    this.type = variable.getType();
  }

  compile()
  {
    variable = variable.noOverloading();
    if (!variable.isAssignable())
      User.error(this, variable + " cannot be incremented");

    let decl = variable.getDeclaration();
    if (decl != null)
      return new gnu.expr.IncrementExp
	(decl, short(increment ? 1 : -1), !returnOld);

    // variable is not a local variable, so it must be a field
    if (! (variable instanceof CallExp))
      throw Internal.error(this, "\"var\" is assignable and not a local, " +
		     "so it should be a call to a FieldAccessMethod");

    CallExp call = cast(variable);

    let access = notNull(call.function).getFieldAccessMethod();
    if (access == null)
      Internal.error(this, "\"var\" is assignable and not a local, " +
		     "so it should be a call to a FieldAccessMethod");

    if (notNull(access).isFinal())
      User.error(this, "Field " + access + " is final");

    return NiceUtils.doInline(new nice.tools.code.IncrementProc(notNull(access).fieldDecl, returnOld, increment),
		call.arguments.getExp(0).generateCode());
  }

  /****************************************************************
   * Misc.
   ****************************************************************/
  
  toString()
  {
    if (returnOld)
      return variable.toString() + (increment ? "++" : "--");
    else
      return (increment ? "++" : "--") + variable.toString();
  }

  String description()
  {
    return increment ? "Incrementation" : "Decrementation";
  }
}

public Expression createIncrementExp(Expression variable, boolean prefix, boolean increment)
{
  return new IncrementExp(variable: variable, returnOld: !prefix, increment: increment);
}
