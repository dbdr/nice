/**************************************************************************/
/*                                N I C E                                 */
/*             A high-level object-oriented research language             */
/*                        (c) Daniel Bonniot 2004                         */
/*                                                                        */
/*  This program is free software; you can redistribute it and/or modify  */
/*  it under the terms of the GNU General Public License as published by  */
/*  the Free Software Foundation; either version 2 of the License, or     */
/*  (at your option) any later version.                                   */
/*                                                                        */
/**************************************************************************/

package bossa.syntax;

import bossa.util.*;

/**
   A field access in a Nice class.
   
   In terms of scoping, this is the symbol
   that is returned when the access to a field is done,
   either a 'get' or a 'set'.

 */
public class NiceFieldAccess extends FieldAccess
{
  final NiceField field;
  
  isFinal() = field.isFinal();

  printInterface(s)
  {
    bossa.util.Internal.error("Should not be part of the module interface");
  }
  
  toString()
  {
    return "" + field.sym.type + " " + 
	field.getClassDefinition().name + "." + field.getName();
  }
}

NiceFieldAccess createNiceFieldAccess(NiceField field)
{
  let classDef = field.getClassDefinition();
  let argType = Monotype.sure(classDef.lowlevelMonotype());

  return new NiceFieldAccess(field.getName(),
          Constraint.create(classDef.getBinders()),
	  new FormalParameters([new FormalParameters.Parameter(Monotype.create(argType))]),
	  field.sym.syntacticType, field: field);
}

private FormalParameters makeList(mlsub.typing.Monotype t)
{
  return new FormalParameters([new FormalParameters.Parameter(Monotype.create(t))]);
}
