/// Global
  class Point { double x; double y; }

/// PASS
  assert abs(p.x - 1) < 0.01 && abs(p.y) < 0.01;
  
  /// Toplevel
/* Use the custom constructor before its declaration. */
let Point p = new Point(angle: 0, distance: 1);

new Point(double angle, double distance) 
{ this(x: distance * cos(angle), y: distance * sin(angle)); }

/// PASS
  /// Toplevel
/* Use the custom constructor before the declaration of the class. */
let Point2 origin = new Point2(angle: 0, distance: 0);

class Point2 { double x; double y; }
new Point2(double angle, double distance) 
{ this(x: distance * cos(angle), y: distance * sin(angle)); }

/// PASS
  let p = new Point((0,1));
  assert abs(p.x - 1) < 0.01 && abs(p.y) < 0.01;

  /// Toplevel
new Point(double angle, double distance) 
{ this(x: distance * cos(angle), y: distance * sin(angle)); }

new Point((double angle, double distance) polarCoordinates) 
{ 
  // Forward to another custom constructor.
  this(angle: angle, distance: distance);
}

/// PASS
  var p = new Point(angle: 0, distance: 1);
  assert abs(p.x - 1) < 0.01 && abs(p.y) < 0.01;

  p = new ColoredPoint(angle: 0, distance: 1, color: "red");
  assert abs(p.x - 1) < 0.01 && abs(p.y) < 0.01;

  /// Toplevel
  new Point(double angle, double distance) 
  { this(x: distance * cos(angle), y: distance * sin(angle)); }

  class ColoredPoint extends Point { String color; }

/// PASS
  /// package a
  /// Toplevel
  new Point(double xy) = this(x: xy, y : xy);
  /// package b import a;
  let p = new Point(xy: 10.11);


/// PASS
  /// package a
  /// Toplevel
  new Point(double angle, double distance) 
  { this(x: distance * cos(angle), y: distance * sin(angle)); }
  /// package b import a;
  let p = new Point(angle: 0, distance: 1);

/// PASS
  /// package a
  /// Toplevel
  class Point2 { double x; double y; }
  /// package b import a;
  let p = new Point2(angle: 0, distance: 1);
  /// Toplevel
  new Point2(double angle, double distance) 
    { this(x: distance * cos(angle), y: distance * sin(angle)); }

/// FAIL
  /// Toplevel
new /*/// FAIL HERE */ String(int x) = this("xyz");

/// FAIL
  /// Toplevel
new /*/// FAIL HERE */ FooBar(int x) = this("xyz");

/// PASS
  /// package a
  A<String> a = new A(x: 5, z: "abc");
  assert a.t.equals("abc");
  /// Toplevel
  class A<T>
  {
    String str;
    T t;
  }
  // Locally rename the type parameter
  <U> new A(int x, U z) = this(str: x.toString(), t: z);

  /// package b import a
  A<String> a = new A(x: 5, z: "abc");
  A<String> b = new A(str: "5", t: "abc");

/// PASS
  // bug #969777
  let b = new B();
  // Usage of closure inside a custom constructor
  /// Toplevel
class A {
  void foo() {}
}

class B extends A {
  void fooB() = this.foo();
}

void fst(int i) {}

new B(int x) {
  [x].foreach(fst);
  this();
}

/// FAIL
  /// Toplevel
  class A {}
  new /*/// FAIL HERE */A(int n) { 
    this(n);
  }

/// PASS bug
  // bug #1070579
  let x = new X(5);
  /// Toplevel
  class X {}
  new X(int a) {
    int n = 0;
    void foo() { n++; }
    foo(); 
    this();
  }
