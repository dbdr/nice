package nice.lang;

/**
   Support for native arrays.
   Make them elements of the collection hierarchy.
*/

class Array<T> // T[] is an equivalent notation for Array<T>
  implements Sequence
  finally implements Collection 
  = native rawArray;

<Any T> T[] resize(T[], int) = native Object rawArray.resize(Object,int);

<Any T> int length(T[]) = native int java.lang.reflect.Array.getLength(Object);

<Any T> T get(T[],int) = native Object java.lang.reflect.Array.get(Object,int);

boolean get(boolean[], int) = native boolean Native.get(boolean[], int);
byte get(byte[], int) = native byte Native.get(byte[], int);
short get(short[], int) = native short Native.get(short[], int);
int get(int[], int) = native int Native.get(int[],int);
long get(long[], int) = native long Native.get(long[], int);
char get(char[], int) = native char Native.get(char[], int);
float get(float[], int) = native float Native.get(float[], int);
double get(double[], int) = native double Native.get(double[], int);

<Any T> void set(T[], int, T) = native void java.lang.reflect.Array.set(Object,int,Object);

void set(boolean[], int, boolean) = native void Native.set(boolean[], int, boolean);
void set(byte[], int, byte) = native void Native.set(byte[], int, byte);
void set(short[], int, short) = native void Native.set(short[], int, short);
void set(int[], int, int) = native void Native.set(int[],int,int);
void set(long[], int, long) = native void Native.set(long[], int, long);
void set(char[], int, char) = native void Native.set(char[], int, char);
void set(float[], int, float) = native void Native.set(float[], int, float);
void set(double[], int, double) = native void Native.set(double[], int, double);

//<Any T> T[] value(T[]) = native Object rawArray.value();

// Define collection methods

get(a@Array, n) = get(a, n);
set(a@Array, n, e) = set(a,n,e);
size(a@Array) = a.length;

map<C,T,U>(a@Array, f)
{
  int l = size(a);

  U[] res = new U[l];

  for(int i=0; i<l; i=i+1)
    res[i] = f(a[i]);

  return res;
}

filter<C, T>(a@Array, test)
{
  int l = size(a);
  int found = 0;

  T[] res = new T[l];
  
  a.iter(fun(T elem) => 
	{ if(test(elem)) { res.set(found,elem); found=found+1; }} );

  return resize(res,found);
}

