/**************************************************************************/
/*                                N I C E                                 */
/*             A high-level object-oriented research language             */
/*                        (c) Daniel Bonniot 2000                         */
/*                                                                        */
/*  This program is free software; you can redistribute it and/or modify  */
/*  it under the terms of the GNU General Public License as published by  */
/*  the Free Software Foundation; either version 2 of the License, or     */
/*  (at your option) any later version.                                   */
/*                                                                        */
/**************************************************************************/

/*
   Scoping resolution, variable initialization test
*/

package bossa.syntax;

//import bossa.syntax.*;
import nice.tools.ast;
import mlsub.typing.*;

// Interface

Statement analyse(Statement, VarScope, TypeScope);

analyse(s, varScope, typeScope)
{
  Info info = new Info();
  info.vars = new SymbolTable();
  info.typeVars = new SymbolTable();
  info.globalVarScope = varScope;
  info.globalTypeScope = typeScope;

  analyse(s, info);
  return s;
}

// Implementation

class Info
{
  SymbolTable<VarSymbol> vars;
  SymbolTable<TypeSymbol> typeVars;

  VarScope globalVarScope;
  TypeScope globalTypeScope;

  void begin();
  begin()
  {
    this.vars.begin();
    this.typeVars.begin();
  }

  void end();
  end()
  {
    this.vars.end();
    this.typeVars.end();
  }

  VarSymbol lookup(String);
  lookup(name) = this.vars[name];

  LinkedList<VarSymbol> globalLookup(LocatedString);
  globalLookup(name) = linkedList(this.globalVarScope.lookup(name));

  void addVars(List<VarSymbol>);
  addVars(symbols) = symbols.iter(fun(VarSymbol s)=>this.vars[s.toString()]=s);
    
  void addTypeVars(List<TypeSymbol>);
  addTypeVars(symbols) = symbols.iter(fun(TypeSymbol s)=>this.typeVars[s.toString()]=s);
}

void setInitialized(Expression, Info);
setInitialized(e, i) {}
setInitialized(e@SymbolExp, i) {}

Expression analyse(Expression, Info);
void analyse(Statement, Info);

/****************************************************************
 * Expressions
 ****************************************************************/

analyse(e@Expression, i) = e;

analyse(e@AssignExp, i)
{
  e.value = analyse(e.value, i);
  e.to = analyse(e.to, i);
  setInitialized(e.to, i);
  return e;
}

void analyseExps(Expression[], Info);
analyseExps(exps, info)
{
  for (int i = 0; i < exps.length; i++)
    exps[i] = analyse(exps[i], info);
}

void analyse(Arguments, Info);
analyse(args@Arguments, info)
{
  for (int i = 0; i < args.arguments.length; i++)
    args.setExp(i, analyse(args.getExp(i), info));
}

void markAsCallFun(Expression, boolean);
markAsCallFun(e, infix) {}
markAsCallFun(e@IdentExp, infix)
{
  e.infix = infix;
  e.alwaysOverloadedSymbol = true;
}

analyse(e@CallExp, i)
{
  markAsCallFun(e.function, e.infix);
  e.function = analyse(e.function, i);
  e.arguments.analyse(i);
  return e;
}

analyse(e@FunExp, info)
{
  info.begin();
  addVars(info, linkedList(e.formals));
  analyse(e.body, info);
  info.end();
  return e;
}

analyse(e@IdentExp, i)
{
  String name = e.ident.toString();

  if (!e.infix) // infix symbols can only come from the global scope
    {
      VarSymbol s = i.lookup(name);
      if (s != null)
	if (!e.alwaysOverloadedSymbol)
	  return new SymbolExp(s);
	else
	  {
	    //List<VarSymbol> symbols = new LinkedList();
	    //symbols.add(s);
	    return new OverloadedSymbolExp(s, e.ident);
	  }
    }

  LinkedList<VarSymbol> symbols = i.globalLookup(e.ident);
  if (symbols != null)
    return new OverloadedSymbolExp(javaList(symbols), e.ident, null);

  if (e.infix)
    return e;

  UnknownIdentException exn = new UnknownIdentException();
  exn.ident = e.ident;
  throw exn;
  return null; // work-around pb with non-reachable code
}

analyse(e@IfExp, i)
{
  e.condition = analyse(e.condition, i);
  e.thenExp = analyse(e.thenExp, i);
  e.elseExp = analyse(e.elseExp, i);
  return e;
}

analyse(e@IncrementExp, i)
{
  e.variable = analyse(e.variable, i);
  return e;
}

analyse(e@LiteralArrayExp, info)
{
  analyseExps(e.elements, info);
  return e;
}

analyse(e@NewArrayExp, info)
{
  analyseExps(e.knownDimensions, info);
  return e;
}

analyse(e@NewExp, info)
{
  return e;
}

analyse(e@StatementExp, info)
{
  analyse(e.statement, info);
  return e;
}

analyse(e@TupleExp, info)
{
  //e.expressions = analyse(ex.expressions)
  return e;
}

/****************************************************************
 * Statements
 ****************************************************************/

analyse(s@Statement, info) {}

analyse(b@Block, info)
{
  iter(linkedList(b.statements), fun(Statement s)=>analyse(s, info));
}

main(args)
{

}
