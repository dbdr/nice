/// PASS
  /// Toplevel
class A
{
  final A x;
}

class B extends A
{
  override B x;
}

/// FAIL
  /// Toplevel
class A
{
  A x;
}

class B extends A
{
  override B /* /// FAIL HERE */ x;
}

/// FAIL
  /// Toplevel
class A
{
  override A /* /// FAIL HERE */ x;
}

/// FAIL
  /// Toplevel
class A
{
  A x;
}

class B extends A
{
  override B /* /// FAIL HERE */ dummy;
}

/// PASS
  /// Toplevel
class A
{
  final A x;
}

class B extends A
{
  override B x;
}

B goo(B b) = new B(x: b).x;

/// FAIL
  /// Toplevel
class A
{
  final A x;
}

class B extends A
{
  override B x;
}

B goo(A a) = /* /// FAIL HERE */ new B(x: a);

/// FAIL
  /// Toplevel
class A
{
  final A x;
}

class B extends A
{
  override String /* /// FAIL HERE */ x;
}

/// FAIL
  /// Toplevel
class A
{
  final A x;
}

class B extends A
{
  override C x;
}
class C extends B
{
  override B /* /// FAIL HERE */ x;
}

/// PASS
  /// Toplevel
class A<T>
{
  final List<T> x;
}

class B<T> extends A
{
  override LinkedList<T> x;
}

/// FAIL
  /// Toplevel
class A<T>
{
  final List<String> x;
}

class B<T> extends A
{
  override List<T> /* /// FAIL HERE */ x;
}

/// FAIL
  /// Toplevel
class A<T>
{
  final List<T> x;
}

class B<T> extends A
{
  override List<String> /* /// FAIL HERE */ x;
}

/// FAIL
  /// Toplevel
class A 
{
  final List<String> names = new ArrayList();
}
class B extends A
{
  override LinkedList<String> /* /// FAIL HERE */ names;
}

/// PASS
  LinkedList<String> l = new B().names;
  /// Toplevel
class A 
{
  final List<String> names = new ArrayList();
}
class B extends A
{
  override LinkedList<String> names = new LinkedList();
}

/// PASS
  /// Toplevel
  class A {
    final ?String s;
  }
  class B extends A {
    override String s = "abc";
  }

/// PASS
  /// Toplevel
class FOOA {
    final byte b = 1;
    byte b2 = 2;
}

class FOOB extends FOOA {
    override byte b = 2;
}

/// PASS
  /// Toplevel
class FOOA {
    final byte b = 1;
    byte b2 = 2;
}

class FOOB extends FOOA {
    override byte b;
}

class FOOC extends FOOB {
    override byte b = 2;
}

/// PASS
  /// package a
  /// Toplevel
abstract class A {}
class B extends A {}

abstract class AA {
  final A val;
}
class BB extends AA {
  override B val;
}

  /// package b import a
B b = new BB(val: new B()).val;

/// FAIL
  /// Toplevel
  abstract class A {}
  class B extends A {}
  class C extends A {}

  abstract class AA {
    final A val;
  }
  class BB extends AA {
    override B val;
    override C /* /// FAIL HERE */ val;
  }
