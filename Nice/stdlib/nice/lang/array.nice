/****************************************************************************
 *                                 N I C E                                  *
 *              A high-level object-oriented research language              *
 *                         (c) Daniel Bonniot 2003                          *
 *                                                                          *
 *  This package is free software; you can redistribute it and/or modify    *
 *  it under the terms of the GNU General Public License as published by    *
 *  Free Software Foundation; either version 2 of the License, or (at your  *
 *  option) any later version.                                              *
 *                                                                          *
 *  As a special exception, the copyright holders of this library give you  *
 *  permission to link this library with independent modules to produce an  *
 *  executable, regardless of the license terms of these independent        *
 *  modules, and to copy and distribute the resulting executable under      *
 *  terms of your choice.                                                   *
 ****************************************************************************/

package nice.lang;

/**
   Support for native arrays.
   Make them elements of the collection hierarchy.

   T[] is an equivalent notation for Array<T>
*/

final class Array<T>
  implements java.util.List<T>
  = native;

<T> !T[] elementsNotNull(?T[] arr)
{
  assert(arr.all(?T elem => elem != null));
  return cast(arr);
}


/** Returns an array with the newSize first elements. 
    The result can be the same array as the argument.
*/
<T> T[] resize(T[], int newSize) = native Object Native.resize(Object,int);

<T> int length(T[]) = inline nice.lang.inline.ArrayLength();

<T> T    get(T[], int)    = inline nice.lang.inline.ArrayGetOp("o");
<T> T set(T[], int, T) = inline nice.lang.inline.ArraySetOp("o");


boolean get(boolean[], int) = inline nice.lang.inline.ArrayGetOp("z");
byte    get(byte[],    int) = inline nice.lang.inline.ArrayGetOp("b");
short   get(short[],   int) = inline nice.lang.inline.ArrayGetOp("s");
int     get(int[],     int) = inline nice.lang.inline.ArrayGetOp("i");
long    get(long[],    int) = inline nice.lang.inline.ArrayGetOp("l");
char    get(char[],    int) = inline nice.lang.inline.ArrayGetOp("c");
float   get(float[],   int) = inline nice.lang.inline.ArrayGetOp("f");
double  get(double[],  int) = inline nice.lang.inline.ArrayGetOp("d");

boolean set(boolean[],int, boolean) = inline nice.lang.inline.ArraySetOp("z");
byte set(byte[],   int, byte)    = inline nice.lang.inline.ArraySetOp("b");
short set(short[],  int, short)   = inline nice.lang.inline.ArraySetOp("s");
int set(int[],    int, int)     = inline nice.lang.inline.ArraySetOp("i");
long set(long[],   int, long)    = inline nice.lang.inline.ArraySetOp("l");
char set(char[],   int, char)    = inline nice.lang.inline.ArraySetOp("c");
float set(float[],  int, float)   = inline nice.lang.inline.ArraySetOp("f");
double set(double[], int, double)  = inline nice.lang.inline.ArraySetOp("d");


<T,U | T <: U> void copy(T[] from, int fromIndex = 0, 
			 U[] to, int toIndex = 0, int count) = 
  native void System.arraycopy(Object, int, Object, int, int);

<T,U | T <: U> void copy(List<T> from, int fromIndex = 0, 
			 U[] to, int toIndex = 0, int count)
{
  for (int i = fromIndex + count; --i >= fromIndex;)
    to[i] = from[toIndex + i];
}

<T, U | U <: T> T[] copy(U[] array)
{
  T[] res = cast(new T[array.length]); // we shall fill it just next line
  System.arraycopy(array, 0, res, 0, array.length);
  return res;
}

<T> T[] slice(T[] array, int from = 0, int to = array.length - 1) =
  fill(new T[to - from + 1], int i => array[i + from]);

// Define collection methods

<C,T,U> map(a@Array, func) = fill(new U[a.length], int i => func(a[i]));

<C,T> filter(a@Array, test)
{
  int l = a.length;
  int found = 0;

  T[] res = cast(new T[l]);

  a.foreach(T elem =>
	{ if(test(elem)) res.set(found++, elem); } );

  return resize(res, found);
}
/*
<T> void foreach(T[] a, (T)->void f)
{
  for (int i = 0; i < a.length; i++)
    f(a[i]);
}
*/
<T> ?T search(!T[] a, (!T)->boolean test)
{
  for (int i = 0; i < a.length; i++)
    if (test(a[i]))
      return a[i];
  return null;
}

/**
   Fills a newly created array with non-null values.

   A typical usage is to allocate a new array and set its values at the same time:
   <code>
     String[] numbers = fill(new String[10], int i => "number " + i);
   </code>

   The equivalent code in Java would be:
   <code>
     String[] numbers = new String[10];
     for (int i = 0; i < 10; i++) {
       numbers[i] = "number " + i;
     }
   </code>

   It is important that no reference to the array is kept,
   because that would make it possible to store null values in it.
   There is no danger as long as the array is created inside the call, 
   like in the above example.
*/
<T, U | U <: T> U[] fill(T[] array, int->U value)
// In particular, this is useful with T = ?X and U = !X.
// The above type is more general, and useful when the component type is a type variable.
{
  for (int i = 0; i < array.length; i++)
    array[i] = value(i);
  return cast(array);
}

/** Returns an array containing, in order, the elements of both arguments.

    The type of the elements of the arguments can be subtypes of the result 
    elements, since a new array is created.
*/
<T, T1, T2 | T1 <: T, T2 <: T> T[] concat(T1[] a1, T2[] a2)
{
  int index = a1.length + a2.length;
  T[] res = cast(new T[index]);

  // We fill the result array backwards.

  for (int i = a2.length; --i >= 0;)
    res[--index] = a2[i];

  for (int i = a1.length; --i >= 0;)
    res[--index] = a1[i];

  return res;
}

<T, T1, T2 | T1 <: T, T2 <: T>  T[] `+`(T1[] a1, T2[] a2) = concat(a1,a2);

