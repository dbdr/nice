/**************************************************************************/
/*                           B O S S A                                    */
/*        A simple imperative object-oriented research language           */
/*                   (c)  Daniel Bonniot 1999                             */
/*                                                                        */
/*  This program is free software; you can redistribute it and/or modify  */
/*  it under the terms of the GNU General Public License as published by  */
/*  the Free Software Foundation; either version 2 of the License, or     */
/*  (at your option) any later version.                                   */
/*                                                                        */
/**************************************************************************/

// File    : prelude.nice
// Created : Thu Dec 02 11:42:48 1999 by bonniot

/**
   Standard prelude file.
   Should be imported automatically by any nice module.

   @version $Date$
   @author Daniel Bonniot
 */

package nice.lang;

/****************************************************************
 * Primitive types
 ****************************************************************/

final class void = native;

class Number implements Comparable = native java.lang.Number;
class double extends Number = native;
class float extends double = native;

class long extends float = native;
class int extends long = native;
class short extends int = native;
class byte extends short = native;

class char extends int = native;

double doubleValue(Number) = native double Number.doubleValue();

/* 
   Allows to consider any nice object as an instance of java.lang.Object
*/
<Any T> Object object(T) = native Object Native.object(Object);

/****************************************************************
 * Basic functions
 ****************************************************************/

<Any T> boolean `==`(T,T) = native boolean Native.eq(Object,Object);
<Any T> boolean `!=`(T,T) = native boolean Native.neq(Object, Object);

char `==`(char, char) = native char Native.eq(char,char);
char `!=`(char, char) = native char Native.neq(char,char);


<Any T> boolean equals(T,T) = native boolean Object.equals(Object);

// can be overriden in nice
<Any T> boolean eq(T,T);
eq(o1, o2) = equals(o1, o2);

<Any T> String toString(T) = native String String.valueOf(Object);
<Any T> Class getClass(T) = native Class Object.getClass();

java.util.Properties<String,String> getProperties() = 
  native java.util.Properties java.lang.System.getProperties();

/****************************************************************
 * Ref
 ****************************************************************/

class Ref<T> { T value; }

/****************************************************************
 * Pairs
 ****************************************************************/

//  class Pair<+A,+B> { A first; B second; }

//  <Any A, Any B> Pair<A,B> pair(A, B);
//  pair<A,B>(a,b)
//  {
//    Pair<A,B> res = new Pair();
//    res.first = a;
//    res.second = b;
//    return res;
//  }

/****************************************************************
 * Strings
 ****************************************************************/

//<Any T> String add(T,String);
//add(o@Object,s@String) = add(toString(o),s);

<Any T> String `+`(String,T);
`+`(s@String,o) = concat(s,toString(o));

/****************************************************************
 * Comparison operators
 ****************************************************************/

/**
   For a class to implement Comparable, 
   it is sufficient to implement the `<` method,
   since the others can be defined in terms of `<` and boolean negation.
*/
abstract interface Comparable
{
  boolean `<`(alike);
  boolean `<=`(alike);
  boolean `>`(alike);
  boolean `>=`(alike);
}

`>`(x, y) = y < x;
`<=`(x, y) = !(y < x);
`>=`(x, y) = !(x < y);

/****************************************************************
 * Main
 ****************************************************************/

void main(Array<String>);
