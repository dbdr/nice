/// global
class A{}
class B extends A { int life = 42; }

/// PASS
  A a;
  a = new B();
  if (a instanceof B)
    assert a.life == 42;
  else
    assert false;

/// FAIL
  A a;
  a = new A();
  if (a instanceof B)
    assert false;
  else
    assert a.life == 42;

/// FAIL
  A a;
  a = new B();
  if (a instanceof B)
    ;
  assert a.life == 42;

/// PASS
  A a;
  a = new B();
  if (a instanceof B)
    ;
  else
    throw new Error();
  assert a.life == 42;

/// COMMENT Assignments.
/// PASS
  A a = new B();
  if (a instanceof B)
    {
      int i = a.life;
      if (i == 42)
        a = new A();
      else
        i = a.life + 1;
    }

/// FAIL
  A a = new B();
  if (a instanceof B)
    {
      int i = a.life;
      if (i == 42)
        a = new A();
      i = a.life;
    }

/// PASS
  A a;
  a = new B();
  var test = false;
  while (a instanceof B)
    {
      assert a.life == 42;
      test = true;
      break;
    }
  assert test;

/// PASS
  A a = new B();
  while (a instanceof B)
    {
      int i = a.life;
      if (i == 42)
        a = new A();
      else
        i = a.life + 1;
      break;
    }

/// FAIL
  A a = new B();
  while (a instanceof B)
    {
      int i = a.life;
      if (i == 42)
        a = new A();
      i = a.life;
      break;
    }

/// FAIL
  B b = new B();
  if (b instanceof A)
    b = new A();

/// FAIL
  Y y = new D();
  if (y instanceof X)
    y = new C();
  /// Toplevel
  interface X {}
  interface Y {}
  class C implements X {}
  class D implements X,Y {}

/// PASS
  A x = new B();
  if (!( x instanceof B))
    assert false;
  else
    assert x.life == 42;

/// PASS
  assert foo(new B()) == 42;
  /// Toplevel
  int foo(A x) {
    if (!( x instanceof B))
      return 0;

    return x.life;    
   }

/// FAIL
  A x = new B();
  int i = 0;
  if (x instanceof B)
    i = x.life;
  else
    i = x./* /// FAIL HERE */life;

/// FAIL
  A x = new B();
  int i = 0;
  if (x instanceof B)
    i = x.life;

  i = x./* /// FAIL HERE */life;

/// PASS
  A x = new B();
  A y = new B();
  int i = 0;
  if (x instanceof B && y instanceof B)
    i = x.life + y.life;
  else
    assert false;

/// PASS
  A x = new B();
  A y = new B();
  int i = 0;
  if (!(x instanceof B) || !(y instanceof B))
    assert false;
  else
    i = x.life + y.life;

/// PASS
  A x = new B();
  if (x instanceof B && x.life == 42)
    assert true;
  else
    assert false;

/// FAIL
  A x = new B();
  if ((!(x instanceof B)) && x./* /// FAIL HERE */life == 42)
    assert true;

/// PASS
  A x = new B();
  if ((!(x instanceof B)) || x.life == 42)
    assert true;
  else
    assert false;

/// FAIL
  A x = new B();
  if (x instanceof B || x./* /// FAIL HERE */life == 42)
    assert true;

/// PASS
  /// Toplevel
class C<T> {}
class D<T> extends C<T> {
  T t;
}

void f() {
  C<String> c = new D(t: "hi");
  if (c instanceof D) {
    String s = c.t;
  }
}

/// FAIL
  X<String> foo = new X();
  if (foo instanceof Y)
    foo.bar();

  /// Toplevel
  class X<T> {}
  class Y<U,V>
  {
    void bar() {}
  }

/// FAIL
  A a = new B();
  void->void f = () => { a = new A(); };
  if (a instanceof B) {
    f();
    B /* /// FAIL HERE */b = a;
  }
