package regtest.basic;

class A
{
  int x;
}

<Any I> I id(I);
id(x) = x;

void test_higher_order();
test_higher_order()
{
  // Presently fails
  //id (x); // x is A's field method, of type A->int
}

void bidon();
bidon()
{
}

long returnLong();
returnLong()
{
  long j;
  return j=j;
}

<int, int> min_max(int, int);
min_max(x,y) = x < y ? (x, y) : (y, x);

void test_discards();
test_discards()
{
  A a = new A();
  int i;
  boolean b = false;

  // test how surabondant value is discarded
  
  if (b)
    i = 14;
  else
    bidon();

  if (b)
    i++;
  else
    bidon();

  if (b)
    --i;
  else
    bidon();

  if (b)
    a.x = 17;
  else
    bidon();

  if (b)
    a.x--;
  else
    bidon();
  
  if (b)
    ++a.x;
  else
    bidon();

  String s1;
  fun(String s2) => { s1 = s2; };
}

void test_captures();
test_captures()
{
  // modification of a variable captured in a lambda
  int j=2;
  println("" + j);
  println(""+(fun()=>--j)());
  println(""+(fun()=>j++)());
  println(""+(fun()=>j=2*j)());
}

main(args)
{
  test_discards();
  test_captures();

  // Arrays

  Vector<String> v = makeVector(1);
  String[] elements = v.elements;
  v.elements.size();

  // Tuples

  <String, String> cs = ("world!", "Hello, ");
  String s1;
  String s2;
  s1 = " toto";
  (s1, s2) = cs;
  (s1, s2) = (s2, s1);
  println(s1 + s2);

  int a;
  int b;
  (a,b) = min_max(17, 14);
  println("" + a + " < " + b);

  <int, long> t1;
  <long, long> t2;
  t2 = t1;

  test_numeric();
  test_arrays();
  test_comparable();
  test_optional();
  //test_classes();
  test_global();
  test_native();
}
