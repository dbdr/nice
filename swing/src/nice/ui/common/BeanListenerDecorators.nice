
/**************************************************************************/
/*                                                                        */
/*  This program is free software; you can redistribute it and/or modify  */
/*  it under the terms of the GNU General Public License as published by  */
/*  the Free Software Foundation; either version 2 of the License, or     */
/*  (at your option) any later version.                                   */
/*                                                                        */
/**************************************************************************/


package nice.ui.common;




/**
 * DECLARATION of methods to add nice.ui.beans.NiceListeners to nice.ui.beans.NiceListenerHandlers
 */

public <PropertyChangeListenerHandler H> void addNicePropertyChangeListener(H,NPropertyChangeListener);
public <VetoableChangeListenerHandler H> void addNiceVetoableChangeListener(H,NVetoableChangeListener);
public <MappablePropertyChangeListenerHandler H, PropertyChangeKey K> void addNicePropertyChangeListener(H,K,NPropertyChangeListener);
public <MappableVetoableChangeListenerHandler H, PropertyChangeKey K> void addNiceVetoableChangeListener(H,K,NVetoableChangeListener);
//JDK1.4  public <ExceptionListenerHandler H> void addExceptionListener(H,NExceptionListener);



/**
 * DEFINITION of methods to add NiceListener to NiceListenerHandlers
 */

addNicePropertyChangeListener(this@PropertyEditorSupport,listener)
{
	this.addPropertyChangeListener(listener);
	this.addInAccessibleListener(listener,propertyChangeListeners);
}

addNicePropertyChangeListener(this@PropertyChangeSupport,listener)
{
	this.addPropertyChangeListener(listener);
	this.addInAccessibleListener(listener,propertyChangeListeners);
}

addNiceVetoableChangeListener(this@VetoableChangeSupport,listener)
{
	this.addVetoableChangeListener(listener);
	this.addInAccessibleListener(listener,vetoableChangeListeners);
}

addNicePropertyChangeListener(this@PropertyChangeSupport,key@String,listener)
{
	this.addPropertyChangeListener(key,listener);
	this.addMappableListener(key,listener,mappablePropertyChangeListeners);
}

addNicePropertyChangeListener(this@BeanContextChildSupport,key@String,listener)
{
	this.addPropertyChangeListener(key,listener);
	this.addMappableListener(key,listener,mappablePropertyChangeListeners);
}

addNiceVetoableChangeListener(this@VetoableChangeSupport,key@String,listener)
{
	this.addVetoableChangeListener(key,listener);
	this.addMappableListener(key,listener,mappableVetoableChangeListeners);
}

addNiceVetoableChangeListener(this@BeanContextChildSupport,key@String,listener)
{
	this.addVetoableChangeListener(key,listener);
	this.addMappableListener(key,listener,mappableVetoableChangeListeners);
}

//JDK1.4  addNiceExceptionListener(this@XMLDecoder,listener) = this.setExceptionListener(listener);
//JDK1.4  addNiceExceptionListener(this@Encoder,listener) = this.setExceptionListener(listener);



/**
 * functions to add all nice.ui.beans.NiceListeners to all nice.ui.beans.NiceListenerHandler
 */

public <PropertyChangeListenerHandler T> void addPropertyChangeListener
  (T this,
   PropertyChangeEvent -> void propertyChange 
   )
  = this.addNicePropertyChangeListener(new NPropertyChangeListener(propertyChange: propertyChange));


public <VetoableChangeListenerHandler H> void addVetoableChangeListener
  (H this,
   PropertyChangeEvent -> void vetoableChange 
   )
  = this.addNiceVetoableChangeListener(new NVetoableChangeListener(vetoableChange: vetoableChange));


public <MappablePropertyChangeListenerHandler T> void addPropertyChangeListener
  (T this,
   PropertyChangeEvent -> void propertyChange,
   String propertyName
   )
{   
	NPropertyChangeListener listener = new NPropertyChangeListener(propertyChange: propertyChange);  
	this.addNicePropertyChangeListener(propertyName,listener);                                      
}


public <MappableVetoableChangeListenerHandler T> void addVetoableChangeListener
  (T this,
   PropertyChangeEvent -> void vetoableChange,
   String propertyName
   )
{ 
  NVetoableChangeListener listener = new NVetoableChangeListener(vetoableChange: vetoableChange);   
  this.addNiceVetoableChangeListener(propertyName,listener);                                             
}
