/**************************************************************************/
/*                                N I C E                                 */
/*             A high-level object-oriented research language             */
/*                        (c) Daniel Bonniot 2000                         */
/*                                                                        */
/*  This program is free software; you can redistribute it and/or modify  */
/*  it under the terms of the GNU General Public License as published by  */
/*  the Free Software Foundation; either version 2 of the License, or     */
/*  (at your option) any later version.                                   */
/*                                                                        */
/**************************************************************************/

/*
   Type checking.
*/

package bossa.syntax;

import mlsub.typing.*;

// Interface

void typecheck(?Statement);
void typecheck(?Expression);

/****************************************************************
 * Expressions
 ****************************************************************/

typecheck(null(Expression)) {}

typecheck(e@AssignExp)
{
  Expression to = notNull(notNull(e.to).noOverloading());
  e.to = to;
  typecheck(to);

  // This needs to be check during typechecking, since this might involve
  // overloading resolution (when assigning to a field).
  if (! to.isAssignable())
    bossa.util.User.error(e, "" + to + " cannot be assigned a value");

  let variable = localVariable(to);
  
  try{
    e.value = notNull(e.value).resolveOverloading(to.getType());
    checkAssignment(to.getType(), notNull(e.value));
  }
  catch(TypingEx t){
    if (variable != null) {
      let originalType = getOriginalType(variable);
      if (originalType != null)
      try
        {
	  checkAssignment(originalType, notNull(e.value));

	  // It is OK to assign the variable, considering it has the original 
	  // type.
	  variable.setVarType(now: originalType,
			      otherBranch: variable.type,
			      overrideOut: originalType);
	  return;
	}
      catch (TypingEx newError) { t = newError; }
    }

    ?FieldAccess field = to.getField();
    String toName;
    if (field == null)
      toName = to.toString();
    else
      toName = field.getName().toString();

    reportNullAssignmentError(e, t, value: notNull(e.value), 
			      toName, 
			      to.getType().getMonotype(), 
			      field != null);
    throw assignmentError(e, to.toString(), 
			  to.getType().toString(), notNull(e.value));
  }

  if (variable != null)
    {
      let originalType = getOriginalType(variable);
      if (originalType != null)
	try {
	  checkAssignment(originalType, notNull(e.value));
	} catch (TypingEx t) {
	  throw assignmentError(e, to.toString(), 
		to.getType().toString(), notNull(e.value));
	}
    }

}

void typecheckExps(?Expression[] exps)
{
  for (int i = 0; i < exps.length; i++)
    typecheck(exps[i]);
}

void typecheckArgs(Arguments args)
{
  for (int i = 0; i < args.size(); i++)
    typecheck(args.getExp(i));
}

void typecheckAndArgs(Arguments args)
{
  if (args.size() != 2)
    {
      typecheckArgs(args);
      return;
    }

  enterIf();
  try {
    typecheck(args.getExp(0));

    ?List<MonoSymbol> l = variablesNotNullIfTestSucceeds(args.getExp(0));
    if (l != null)
      l.foreach(MonoSymbol variable => {
	mlsub.typing.Monotype type = notNull(variable.type);
	mlsub.typing.Monotype sureType = makeSure(type);
	setVarType(variable, now: sureType, out: type);
      });

    ?List<(MonoSymbol, mlsub.typing.Monotype)> instanceofIfSucceeds =
	first_(instanceofInfo(args.getExp(0)));

    if (instanceofIfSucceeds != null)
      instanceofIfSucceeds.foreach(((MonoSymbol variable, mlsub.typing.Monotype type)) =>
	setVarType(variable, now: type, out: variable.type));

    typecheck(args.getExp(1));
    if (l != null || instanceofIfSucceeds != null) {
      Expression e = args.getExp(1).noOverloading();
      args.setExp(1, e);
      e.getType();
    }
  }
  finally {
    // There is no else part, but this call is necessary to pop off
    // conditional type information (from assignments) from the stack.
    enterElse();
    exitIf();
  }
}

void typecheckOrArgs(Arguments args)
{
  if (args.size() != 2)
    {
      typecheckArgs(args);
      return;
    }

  enterIf();
  try {
    typecheck(args.getExp(0));

    ?List<MonoSymbol> l = variablesNotNullIfTestFails(args.getExp(0));
    if (l != null)
      l.foreach(MonoSymbol variable => {
	mlsub.typing.Monotype type = notNull(variable.type);
	mlsub.typing.Monotype sureType = makeSure(type);
	setVarType(variable, now: sureType, out: type);
      });

    ?List<(MonoSymbol, mlsub.typing.Monotype)> instanceofIfFails =
	second_(instanceofInfo(args.getExp(0)));

    if (instanceofIfFails != null)
      instanceofIfFails.foreach(((MonoSymbol variable, mlsub.typing.Monotype type)) =>
	setVarType(variable, now: type, out: variable.type));

    typecheck(args.getExp(1));

    if (l != null || instanceofIfFails != null)  {
      Expression e = args.getExp(1).noOverloading();
      args.setExp(1, e);
      e.getType();
    }
  }
  finally {
    // There is no else part, but this call is necessary to pop off
    // conditional type information (from assignments) from the stack.
    enterElse();
    exitIf();
  }
}

typecheck(e@CallExp)
{
  typecheck(e.function);
  if (e.isCallTo("&&"))
    e.arguments.typecheckAndArgs();
  else if (e.isCallTo("||"))
    e.arguments.typecheckOrArgs();
  else
    e.arguments.typecheckArgs();

  if (e.isCallTo("assert") && 1 <= e.arguments.size() <= 2)
    {
      ?List<(MonoSymbol, mlsub.typing.Monotype)> instanceofIfSucceeds =
	first_(instanceofInfo(e.arguments.getExp(0)));

      if (instanceofIfSucceeds != null)
	instanceofIfSucceeds.foreach(((MonoSymbol variable, mlsub.typing.Monotype type)) =>
	  setVarType(variable, now: type, out: variable.type));
    }

  // forces computation of the type if not done.
  mlsub.typing.Polytype t = e.getType();

  // Prepare the bytecode type for EnsureTypeProc
  if (t.getConstraint() != mlsub.typing.Constraint.True)
    try{
      Typing.enter();
      try{
	mlsub.typing.Constraint.enter(t.getConstraint());
	nice.tools.code.Types.setBytecodeType(t.getMonotype());
      }
      finally{
	Typing.leave();
      }
    }
  catch(TypingEx e){
  }
}

typecheck(e@FunExp)
{
  ?Function saved = Node.getCurrentFunction();
  Node.setCurrentFunction(e);

  let needExit = e.mightEscape && enterClosure();
  try {
    typecheck(e.body);
  }
  finally {
    if (needExit)
      exitClosure();
  }

  Node.setCurrentFunction(saved);
}

typecheck(e@IdentExp)
{
  throw new Error("typecheck in IdentExp");
}

/**
   Analyse a boolean test to check if it ensures that some
   local variables are not null if the tests succeeds, and if it fails.

    @return a tuple
      (local variables that are guaranteed not to be null if the test succeeds,
       local variables that are guaranteed not to be null if the test fails)
*/
(?List<MonoSymbol>, ?List<MonoSymbol>) nullnessInfo(Expression test);
nullnessInfo(test) = (null, null);
nullnessInfo(test@CallExp)
{
  if (test.isCallTo("||"))
    {
      ?List<MonoSymbol> notNullIfFalse0 = 
	 second_(nullnessInfo(notNull(test.arguments.getExp(0))));
      ?List<MonoSymbol> notNullIfFalse1 = 
	second_(nullnessInfo(notNull(test.arguments.getExp(1))));

      // If this test is false, it is because both subtests are.
      return (null, combine(notNullIfFalse0, notNullIfFalse1));
    }

  if (test.isCallTo("&&"))
    {
      ?List<MonoSymbol> notNullIfTrue0 =
	first_(nullnessInfo(notNull(test.arguments.getExp(0))));
      ?List<MonoSymbol> notNullIfTrue1 =
	first_(nullnessInfo(notNull(test.arguments.getExp(1))));

      // If this test is true, it is because both subtests are.
      return (combine(notNullIfTrue0, notNullIfTrue1), null);
    }

  boolean isAlwaysNull;
  if (test.isCallTo("=="))
    isAlwaysNull = true;
  else if (test.isCallTo("!="))
    isAlwaysNull = false;
  else // Give up.
    return (null, null);

  int varPosition;
  if (isNullExp(notNull(test.arguments.getExp(0))))
    varPosition = 1;
  else if (isNullExp(notNull(test.arguments.getExp(1))))
    varPosition = 0;
  else // Give up.
    return (null, null);

  ?MonoSymbol variable = localVariable(notNull(test.arguments.getExp(varPosition)));
  if (variable == null)
    return (null, null);

  List<MonoSymbol> l = new LinkedList();
  l.add(variable);
  if (isAlwaysNull)
    return (null, l);
  else 
    return (l, null);
}


// Returns a list combining l1 and l2, possibly modifying l1.
private <T> ?List<T> combine(?List<T> l1, ?List<T> l2)
{
  if (l1 == null)
    return l2;

  if (l2 != null)
    l1.addAll(l2);
  return l1;
}

private <T> T first_((T t1, T t2)) = t1;
private <T> T second_((T t1, T t2)) = t2;

?List<MonoSymbol> variablesNotNullIfTestSucceeds(Expression test)
{
  (?List<MonoSymbol> notNullIfTrue, ?List<MonoSymbol> notNullIfFalse) = 
    nullnessInfo(test);
  return notNullIfTrue;
}

?List<MonoSymbol> variablesNotNullIfTestFails(Expression test)
{
  (?List<MonoSymbol> notNullIfTrue, ?List<MonoSymbol> notNullIfFalse) = 
    nullnessInfo(test);
  return notNullIfFalse;
}


(?List<(MonoSymbol, mlsub.typing.Monotype)>, ?List<(MonoSymbol, mlsub.typing.Monotype)>) instanceofInfo(Expression test);
instanceofInfo(test) = (null, null);
instanceofInfo(test@CallExp)
{
  if (test.isCallTo("||"))
    {
      ?List<(MonoSymbol, mlsub.typing.Monotype)> instanceofIfFalse0 = 
	 second_(instanceofInfo(notNull(test.arguments.getExp(0))));
      ?List<(MonoSymbol, mlsub.typing.Monotype)> instanceofIfFalse1 = 
	second_(instanceofInfo(notNull(test.arguments.getExp(1))));

      return (null, combine(instanceofIfFalse0, instanceofIfFalse1));
    }

  if (test.isCallTo("&&"))
    {
      ?List<(MonoSymbol, mlsub.typing.Monotype)> instanceofIfTrue0 =
	first_(instanceofInfo(notNull(test.arguments.getExp(0))));
      ?List<(MonoSymbol, mlsub.typing.Monotype)> instanceofIfTrue1 =
	first_(instanceofInfo(notNull(test.arguments.getExp(1))));

      return (combine(instanceofIfTrue0, instanceofIfTrue1), null);
    }

  if (test.isCallTo("!"))
    {
	(?List<(MonoSymbol, mlsub.typing.Monotype)> ifTrue, 
		?List<(MonoSymbol, mlsub.typing.Monotype)> ifFalse) =
 		instanceofInfo(notNull(test.arguments.getExp(0)));
	return (ifFalse, ifTrue);
    }

  ?(MonoSymbol, mlsub.typing.Monotype) info = getInstanceof(test);

  if (info == null)
    return (null, null);

  List<(MonoSymbol, mlsub.typing.Monotype)> list = new LinkedList();
  list.add(info);
  
  return (list, null);
}

/** 
    Collects knowledge about more precise type in branches of conditionals.
    
    At the moments tests agains null and instanceof tests are considered.
*/

var int ifLevel = 0;
var Stack<int> levels = new Stack();
var Stack<(MonoSymbol, mlsub.typing.Monotype)> conditionalTypes = new Stack();

void enterIf() { ifLevel++; }

void enterElse()
{
  while (levels.size() > 0 && levels.peek() == ifLevel * 2)
    {
      levels.pop();
      (MonoSymbol variable, mlsub.typing.Monotype baseType) = conditionalTypes.pop();
      variable.type = baseType;
    }
}

void exitIf()
{ 
  while (levels.size() > 0 && levels.peek() == ifLevel * 2 + 1)
    {
      levels.pop();
      (MonoSymbol variable, mlsub.typing.Monotype baseType) = conditionalTypes.pop();
      variable.type = baseType;
    }
  ifLevel--;
}

void pushBranchType(MonoSymbol variable, mlsub.typing.Monotype baseType)
{
  levels.push(2 * ifLevel);
  conditionalTypes.push((variable, baseType));
}

void pushOuterType(MonoSymbol variable, mlsub.typing.Monotype baseType)
{
  levels.push(2 * ifLevel + 1);
  conditionalTypes.push((variable, baseType));
}

void overrideOuterType(MonoSymbol variable, mlsub.typing.Monotype newType)
{
  for (int i = 0; i < levels.size(); i++)
    if (levels.get(i) % 2 == 1)
      {
	(MonoSymbol v, mlsub.typing.Monotype t) = conditionalTypes.get(i);
	if (variable == v)
	  conditionalTypes.set(i, (variable, newType));
      }
}

?mlsub.typing.Monotype getOriginalType(MonoSymbol variable)
{
  for (int i = 0; i < levels.size(); i++)
    {
      (MonoSymbol v, mlsub.typing.Monotype t) = conditionalTypes.get(i);
      if (variable == v)
	return t;
    }
  return null;
}

var Stack<(Stack<int>, Stack<(MonoSymbol, mlsub.typing.Monotype)>)> closureEnvironments = new Stack();
var Stack<List<(MonoSymbol, mlsub.typing.Monotype)>> replacedTypes = new Stack();

/** @return true if exitClosure should be called. */
boolean enterClosure()
{
  if (levels.isEmpty())
    return false;

  List<(MonoSymbol, mlsub.typing.Monotype)> replaced = 
    new ArrayList(levels.size());

  // for all variables, set the original type back and store it
  for (int i = levels.size(); i-- > 0;)
    {
      (MonoSymbol variable, mlsub.typing.Monotype type) = conditionalTypes[i];
      replaced.add((variable, variable.type));
      variable.type = type;
    }
  
  replacedTypes.push(replaced);
  closureEnvironments.push((levels, conditionalTypes));
  levels = new Stack();
  conditionalTypes = new Stack();

  return true;
}

void exitClosure()
{ 
  List<(MonoSymbol, mlsub.typing.Monotype)> replaced = replacedTypes.pop();
  //set back the stored conditional types
  for (int i = 0; i < replaced.size(); i++)
    {    
      (MonoSymbol variable, mlsub.typing.Monotype type) = replaced.get(i);
      if (!variable.captured)
        variable.type = type;
    }

  (levels, conditionalTypes) = closureEnvironments.pop();
}

typecheck(e@IfExp)
{
  Expression condition = notNull(e.condition);
  Expression thenExp = notNull(e.thenExp);
  Expression elseExp = notNull(e.elseExp);

  condition = condition.resolveOverloading(PrimitiveType.boolPolytype);
  checkBooleanCondition(condition);
  e.condition = condition;

  enterIf();

  try{
    ?List<MonoSymbol> notNullInThen, notNullInElse;
    ?List<(MonoSymbol, mlsub.typing.Monotype)> instanceofInThen; 
    ?List<(MonoSymbol, mlsub.typing.Monotype)> instanceofInElse;

    try {
      (notNullInThen, notNullInElse) = nullnessInfo(condition);

      if (notNullInThen != null)
	notNullInThen.foreach(MonoSymbol variable => {
	  mlsub.typing.Monotype type = notNull(variable.type);
	  mlsub.typing.Monotype sureType = makeSure(type);
	  setVarType(variable, now: sureType, otherBranch: type);
	});

      (instanceofInThen, instanceofInElse) = instanceofInfo(condition);

      if (instanceofInThen != null) 
        instanceofInThen.foreach( ((MonoSymbol variable, mlsub.typing.Monotype type)) =>
	  setVarType(variable, now: type, otherBranch: variable.type));

      e.thenExp = thenExp = notNull(thenExp.noOverloading());
      typecheck(thenExp);
      // since the type of the variable is destructively changed,
      // it is important to compute the branch's type and to store it now.
      thenExp.getType();
    } finally {
      // Calling this is important for clearning the conditional types stack,
      // which is good when calling the compiler repeatedly from the same JVM.
      enterElse();
    }

    if (notNullInElse != null)
      notNullInElse.foreach(MonoSymbol variable => {
	mlsub.typing.Monotype type = notNull(variable.type);
	mlsub.typing.Monotype sureType = makeSure(type);
	setVarType(variable, now: sureType, out: type);
      });

    if (instanceofInElse != null) 
      instanceofInElse.foreach( ((MonoSymbol variable, mlsub.typing.Monotype type)) =>
	setVarType(variable, now: type, out: variable.type));

    e.elseExp = elseExp = notNull(elseExp.noOverloading());
    typecheck(elseExp);
    // since the type of the variable is destructively changed,
    // it is important to compute the branch's type and to store it now.
    elseExp.getType();

  }
  finally{
    exitIf();
  }

  if (! e.getType().trySimplify())
    throw bossa.util.User.error
      (e, "The two branches have incompatible types:" +
       "\nthen: " + thenExp.getType() +
       "\nelse: " + elseExp.getType());
}

/**
   Describe changes to make to the type of a variable in conditional branches.

   @param now type to be used in the next branch.
   @param otherBranch type to be used in the other branches
   @param out type to be used after returning to the outer block
   @param overrideOut use that type when exiting all englobing blocks
*/
private void setVarType(MonoSymbol variable, 
			mlsub.typing.Monotype now, 
			?mlsub.typing.Monotype otherBranch = null,
			?mlsub.typing.Monotype out = null,
			?mlsub.typing.Monotype overrideOut = null)
{
  variable.type = now;
  if (overrideOut != null)
    {
      overrideOuterType(variable, overrideOut);
      // We also set it for the current block, in case there was no previous
      // type set.
      pushOuterType(variable, overrideOut);
    }
  if (out != null)
    pushOuterType(variable, out);
  if (otherBranch != null)
    pushBranchType(variable, otherBranch);
}

typecheck(e@IncrementExp)
{
  try{
    e.variable = notNull(e.variable).resolveOverloading(PrimitiveType.longPolytype);
    checkAssignment(PrimitiveType.longType, notNull(e.variable));
  }
  catch(TypingEx t){
    if (notNullError(t, e, String.valueOf(e.variable)))
      throw new bossa.util.UserError
      (e, 
       notNull(e.description()) + " is only valid on integers.\n" + 
       e.variable + " has type " + notNull(e.variable).getType());
  }
}

typecheck(e@LiteralArrayExp)
{
  typecheckExps(notNull(e.elements));
}

typecheck(e@NewArrayExp)
{
  ?Expression[] knownDimensions = notNull(e.knownDimensions);
  typecheckExps(knownDimensions);
  for (int i=0; i<knownDimensions.length; i++)
    {
      Expression dim = notNull(knownDimensions[i]);
      try{
	Typing.leq(dim.getType(), PrimitiveType.intPolytype);
      }
      catch(TypingEx ex){
	if (notNullError(ex, dim, 
			 dim.toString()))
	  bossa.util.User.error(dim, "" + dim + " should be an integer");
      }
    }
}

typecheck(e@NewExp)
{
  e.arguments.typecheckArgs();
  // force computation of type
  e.getType();
}

typecheck(e@StatementExp)
{
  e.statement = rewrite(e.statement);

  typecheck(e.statement);
}

typecheck(e@TupleExp)
{
  typecheckExps(notNull(e.expressions));
}

typecheck(e@SuperExp)
{
  if (Node.currentFunction instanceof MethodBodyDefinition)
    {
      e.setCurrentMethod(cast(Node.currentFunction));
    }
  else
    throw bossa.util.User.error(e, "super can only be used in method implementations");
}

typecheck(e@ExpLocalVariable)
{
  Block.LocalVariable decl = notNull(e.variable);
  MonoSymbol target = notNull(decl.left);

  if (! target.used)
    bossa.util.User.warning(decl, "Unused local variable "  + target.name);

  ?mlsub.typing.Monotype type = target.getMonotype();
  Expression value = notNull(e.initValue);

  if (type == null)
    {
      value.typecheck();
      e.initValue = decl.value = value = value.noOverloading();
      target.type = ensureMonomorphic(value.getType(), decl);

      if (nice.tools.typing.Types.isVoid(target.type))
        throw error(decl, "A variable cannot have a void type");
    } 
  else
    {
      try{
	mlsub.typing.Polytype polytype = new mlsub.typing.Polytype(type);
	e.initValue = decl.value = value = value.resolveOverloading(polytype);
	checkAssignment(type, value);
      } 
      catch(TypingEx t){
	reportNullAssignmentError(decl, t, value: value, 
				  target.name.toString(),
				  target.getMonotype());
	throw assignmentError(target, target.name.toString(), 
			      String.valueOf(target.getMonotype), 
			      value);
      }
    }
   decl.value = null;
}

typecheck(c@ConstantExp){}
typecheck(e@NullExp) {}
typecheck(e@OverloadedSymbolExp) {}
typecheck(e@PackageExp) {}
typecheck(e@SymbolExp) {}

/****************************************************************
 * Statements
 ****************************************************************/

typecheck(null(Statement)) {}

typecheck(b@Block)
{
  b.statements = rewrite(b.statements);

  b.locals.foreach(?Block.LocalDeclaration d => typecheck(d));
  b.statements.foreach
  (?Statement s => {
    try { typecheck(s); } 
    catch (bossa.util.UserError ex) 
    { throw ensureLocated(ex, notNull(s)); }
  });
}

typecheck(decl@Block.LocalVariable)
{
  MonoSymbol target = notNull(decl.left());

  if (! target.used)
    bossa.util.User.warning(decl, "Unused local variable "  + target.name);

  ?Expression value = decl.value;
  if (value == null)
    return;

  ?mlsub.typing.Monotype type = target.getMonotype();
  if (type == null)
    {
      value.typecheck();
      decl.value = value = value.noOverloading();
      target.type = ensureMonomorphic(value.getType(), decl);
      if (target.type == PrimitiveType.byteType || 
          target.type == PrimitiveType.shortType)
	target.type = notNull(PrimitiveType.intType);

      if (nice.tools.typing.Types.isVoid(target.type))
        throw error(decl, "A variable cannot have a void type");

    }
  else
    {
      try{
	mlsub.typing.Polytype polytype = new mlsub.typing.Polytype(type);
	decl.value = value = value.resolveOverloading(polytype);
	checkAssignment(type, value);
      } 
      catch(TypingEx t){
	reportNullAssignmentError(decl, t, value: value, 
				  target.name.toString(),
				  target.getMonotype());
	throw assignmentError(target, target.name.toString(), 
			      String.valueOf(target.getMonotype), 
			      value);
      }
    }
}

typecheck(decl@Block.LocalConstant)
{
  if (! notNull(decl.left).used)
    bossa.util.User.warning(decl, " Unused local variable "  + notNull(decl.left).name);

  typecheck(decl.value);
  decl.value = notNull(decl.value).noOverloading();
  mlsub.typing.Polytype type = notNull(decl.value).getType();

  notNull(decl.left).type = ensureMonomorphic(type, decl);

  if (nice.tools.typing.Types.isVoid(notNull(decl.left).type))
     throw error(decl, "A variable cannot have a void type");

}

typecheck(decl@Block.LocalFunction)
{
  typecheck(decl.value);
  try{
    Typing.leq(decl.inferredReturnType(), decl.declaredReturnType());
  }
  catch(TypingEx t){
    if (notNullError(t, decl, "returned value"))
      wrongReturnType(decl, 
		      String.valueOf(decl.inferredReturnType), 
		      String.valueOf(decl.declaredReturnType), t);
  }
}

typecheck(s@ExpressionStmt)
{
  s.exp = notNull(s.exp).noOverloading();
  typecheck(s.exp);
}

typecheck(l@LoopStmt)
{
  ?Expression whileExp = l.whileExp;
  if (whileExp != null)
    {
      l.whileExp = whileExp = whileExp.resolveOverloading(PrimitiveType.boolPolytype);
      checkBooleanCondition(whileExp);
    }

  enterIf();

  try {
    if (whileExp != null)
      if (l.isTestFirst)
	{
          ?List<MonoSymbol> variables = variablesNotNullIfTestSucceeds(whileExp);
	  if (variables != null)
	    variables.foreach (MonoSymbol variable => 
			       setVarType(variable, 
					  now: makeSure(variable.type), 
					  out: variable.type));

	  ?List<(MonoSymbol, mlsub.typing.Monotype)> instanceofIfTrue = 
	    first_(instanceofInfo(notNull(whileExp)));

	  if (instanceofIfTrue != null)
	    instanceofIfTrue.foreach( ((MonoSymbol variable, mlsub.typing.Monotype type)) =>
		setVarType(variable, now: type, out: variable.type));
	}

    typecheck(l.loopBody);
    typecheck(l.iterationStatements);
  }
  finally {
    // There is no else part in a loop, but this call is necessary to pop off
    // conditional type information (from assignments) from the stack.
    enterElse();
    exitIf();
  }
}

typecheck(b@BreakStmt) {}
typecheck(b@BreakLabelStmt) {}
typecheck(c@ContinueStmt) {}

typecheck(s@LabeledStmt)
{
  typecheck(s.getStatement());
}

typecheck(r@ReturnStmt)
{
  ?Function function = Node.currentFunction;
  if (function == null)
    throw bossa.util.User.error(r, "This return is not inside a function");

  ?mlsub.typing.Monotype expectedType = function.getExpectedType();
  if (r.value != null)
    {
      if (expectedType == null)
	r.value = notNull(r.value).noOverloading();
      else
	{
	  if (! r.fake && nice.tools.typing.Types.isVoid(expectedType))
	    throw bossa.util.User.error(r, "Cannot return a value here");
	  
	  r.value = notNull(r.value).resolveOverloading
	    (new mlsub.typing.Polytype(expectedType));
	}

      try { typecheck(r.value); }
      catch (bossa.util.UserError ex) { throw ensureLocated(ex, r); }
    }
  
  try{
    if (! (r.fake && expectedType != null && nice.tools.typing.Types.isVoid(expectedType)))
      function.checkReturnedType(r.returnType());
  }
  catch(Function.WrongReturnType e){
    if (notNullError(notNull(e.typingException), r, String.valueOf(r.value)))
      wrongReturnType(r, notNull(r.returnType()).toString(), 
		      valueOf(e.expectedReturnType), notNull(e.typingException));
  }
  catch(Function.IncompatibleReturnType e){
    throw bossa.util.User.error(r, "The returned value is incompatible with the return type: " + e.previouslyInferredType);
  }
}

typecheck(t@TryStmt)
{
  typecheck(t.body);
  t.catches.foreach(TryStmt.Catch c => typecheck(c.body));
  typecheck(t.finallyBody);
}

typecheck(s@SynchronizedStmt)
{
  s.object = notNull(s.object).noOverloading();
  mlsub.typing.Polytype type = notNull(s.object).getType();
  if (nice.tools.typing.Types.isPrimitive(type))
    throw bossa.util.User.error(s.object, 
		     "Synchronization cannot be done on primitive values");
  try {
    checkNotNull(type);
  }
  catch(TypingEx ex) {
    bossa.util.User.error(s.object, "Synchonization must be done on a non-null object.\n" + s.object + " might be null.");
  }

    
  typecheck(s.body);
}

/****************************************************************
 * Error handling
 ****************************************************************/

/**
   Checks that right can be assigned to a variable of type left.

   Overloading resolution must already have taken place (it cannot be done 
   here, since the new value needs to be returned, which would not work
   when a typing error is thrown).
*/
void checkAssignment(mlsub.typing.Polytype left, Expression right)
{
  if (left.isMonomorphic)
    checkAssignment(left.getMonotype(), right);
  else
    {
      typecheck(right);
      Typing.leq(right.getType(), left);
    }
}

void checkAssignment(mlsub.typing.Monotype left, Expression right)
{
  typecheck(right);
  Typing.leq(right.getType(), left);
}

boolean isNullError(TypingEx ex);
isNullError(@TypingEx) = false;
isNullError(ex@MonotypeLeqEx)
{
  /*
    This is an approximation.
    An exact report of nullness errors would probably need
    to keep track of the lowlevel exception.
  */
  ?TypeConstructor tc1 = notNull(ex.getM1()).head();
  ?TypeConstructor tc2 = notNull(ex.getM2()).head();

  if (tc1 == tc2) return false;

  if (tc1 == PrimitiveType.maybeTC &&
      (tc2 != PrimitiveType.maybeTC || tc2 != null))
    return true;

  return false;
}

/**
   Throws a UserError with an explicit message if 
     the error is that value might be null.
   Returns true the error is not related to null types.
*/
boolean notNullError(TypingEx ex, bossa.util.Located resp, ?String value) {
  if (isNullError(ex))
    throw new bossa.util.UserError(resp, "" + value + " might be null");
  else
    return true;
}

void checkBooleanCondition(Expression condition) {
  try {
    checkAssignment(PrimitiveType.boolType, condition);
  }
  catch(TypingEx t){
    throw new bossa.util.UserError(condition, 
       "The condition must be a boolean.\n" + 
       condition + " has type " + condition.getType());
  }
}


void wrongReturnType(bossa.util.Located responsible, 
		     String typeFound, 
		     String typeExpected, Exception e)
{
  String message = 
    "Incorrect return type:" +
    "\nFound   : " + typeFound +
    "\nExpected: " + typeExpected;

  if (bossa.util.Debug.powerUser)
    message = message + "\n\nLowlevel error: " + e;

  throw new bossa.util.UserError(responsible, message);
}

void checkNotNull(mlsub.typing.Polytype type)
{
  if (type.isMonomorphic())
    Typing.leq(type.getMonotype(), PrimitiveType.sureTC);
  else
    try {
    Typing.enter();
    type.getConstraint().enter();
    Typing.leq(type.getMonotype(), PrimitiveType.sureTC);
    Typing.implies();
  }
  finally {
    Typing.leave();
  }
}

// Local Variables:
// nice-xprogram: "../bin/nicec -d ../classes"
// End:
