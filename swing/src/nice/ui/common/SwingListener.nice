
/**************************************************************************/
/*                                                                        */
/*  This program is free software; you can redistribute it and/or modify  */
/*  it under the terms of the GNU General Public License as published by  */
/*  the Free Software Foundation; either version 2 of the License, or     */
/*  (at your option) any later version.                                   */
/*                                                                        */
/**************************************************************************/


package nice.ui.common;



/** 
 * Wrapper classes for all listeners defined in javax.swing.event
 * They implement a javax.swing.event.* interface
 * and delegate the action(s) to optional anonymous function(s).
 *
 * The classes define fields that store optional anonymous
 * functions that point to the method that should be invoked
 * when the according event occured
 *
 * They override all their inherited methods by calling the appropriate
 * field to invoke the defined listener method.
 *
 * The field can be initialized by using the automatically 
 * generated constructor
 */


class NAncestorListener implements AncestorListener , NiceListener
{
  private AncestorEvent ?-> void ancestorAdded = null;
  private AncestorEvent ?-> void ancestorMoved = null;
  private AncestorEvent ?-> void ancestorRemoved = null;
  
  public AncestorEvent ?-> void getAncestorAdded() = this.ancestorAdded;
  public AncestorEvent ?-> void getAncestorMoved() = this.ancestorMoved;
  public AncestorEvent ?-> void getAncestorRemoved() = this.ancestorRemoved;
  
  public void setAncestorAdded(AncestorEvent ?-> void value) { this.ancestorAdded = value; }
  public void setAncestorMoved(AncestorEvent ?-> void value) { this.ancestorMoved = value; }
  public void setAncestorRemoved(AncestorEvent ?-> void value) { this.ancestorRemoved = value; }
  

  ancestorAdded(e)
  {
    AncestorEvent ?-> void ancestorAdded = this.ancestorAdded;
    if(ancestorAdded != null) ancestorAdded(e);
  }

  ancestorMoved(e)
  {
    AncestorEvent ?-> void ancestorMoved = this.ancestorMoved;
    if(ancestorMoved != null) ancestorMoved(e);
  }

  ancestorRemoved(e)
  {
    AncestorEvent ?-> void ancestorRemoved = this.ancestorRemoved;
    if(ancestorRemoved != null) ancestorRemoved(e);
  }
}


class NCaretListener implements CaretListener , NiceListener
{
  private CaretEvent ?-> void caretUpdate;
  
  public CaretEvent ?-> void getCaretUpdate() = this.caretUpdate;
  public void setCaretUpdate(CaretEvent ?-> void value) { this.caretUpdate = value; }


  caretUpdate(e)
  {
    CaretEvent ?-> void caretUpdate = this.caretUpdate;
    if(caretUpdate != null) caretUpdate(e);
  }
}


class NCellEditorListener implements CellEditorListener , NiceListener
{
  private ChangeEvent ?-> void editingCanceled = null;
  private ChangeEvent ?-> void editingStopped = null;
  
  public ChangeEvent ?-> void getEditingCanceled() = this.editingCanceled;
  public ChangeEvent ?-> void getEditingStopped() = this.editingStopped;
  
  public void setEditingCanceled(ChangeEvent ?-> void value) { this.editingCanceled = value; }
  public void setEditingStopped(ChangeEvent ?-> void value) { this.editingStopped = value; }


  editingCanceled(e)
  {
    ChangeEvent ?-> void editingCanceled = this.editingCanceled;
    if(editingCanceled != null) editingCanceled(e);
  }
  
  editingStopped(e)
  {
    ChangeEvent ?-> void editingStopped = this.editingStopped;
    if(editingStopped != null) editingStopped(e);
  }
}


class NChangeListener implements ChangeListener , NiceListener
{
  private ChangeEvent ?-> void stateChanged;
  
  public ChangeEvent ?-> void getStateChanged() = this.stateChanged;
  public void setStateChanged(ChangeEvent ?-> void value) { this.stateChanged = value; }


  stateChanged(e)
  {
    ChangeEvent ?-> void stateChanged = this.stateChanged;
    if(stateChanged != null) stateChanged(e);
  }
}


class NDocumentListener implements DocumentListener , NiceListener
{
  private DocumentEvent ?-> void changedUpdate = null;
  private DocumentEvent ?-> void insertUpdate = null;
  private DocumentEvent ?-> void removeUpdate = null;
  
  public DocumentEvent ?-> void getChangedUpdate() = this.changedUpdate;
  public DocumentEvent ?-> void getInsertUpdate() = this.insertUpdate;
  public DocumentEvent ?-> void getRemoveUpdate() = this.removeUpdate;
  
  public void setChangedUpdate(DocumentEvent ?-> void value) { this.changedUpdate = value; }
  public void setInsertUpdate(DocumentEvent ?-> void value) { this.insertUpdate = value; }
  public void setRemoveUpdate(DocumentEvent ?-> void value) { this.removeUpdate = value; }
  

  changedUpdate(e)
  {
    DocumentEvent ?-> void changedUpdate = this.changedUpdate;
    if(changedUpdate != null) changedUpdate(e);
  }

  insertUpdate(e)
  {
    DocumentEvent ?-> void insertUpdate = this.insertUpdate;
    if(insertUpdate != null) insertUpdate(e);
  }

  removeUpdate(e)
  {
    DocumentEvent ?-> void removeUpdate = this.removeUpdate;
    if(removeUpdate != null) removeUpdate(e);
  }
}


class NHyperlinkListener implements HyperlinkListener , NiceListener
{
  private HyperlinkEvent ?-> void hyperlinkUpdate;
  
  public HyperlinkEvent ?-> void getHyperlinkUpdate() = this.hyperlinkUpdate;
  public void setHyperlinkUpdate(HyperlinkEvent ?-> void value) { this.hyperlinkUpdate = value; }
  

  hyperlinkUpdate(e)
  {
    HyperlinkEvent ?-> void hyperlinkUpdate = this.hyperlinkUpdate;
    if(hyperlinkUpdate != null) hyperlinkUpdate(e);
  }
}


class NInternalFrameListener implements InternalFrameListener , NiceListener
{
  private InternalFrameEvent ?-> void internalFrameActivated = null;
  private InternalFrameEvent ?-> void internalFrameClosed = null;
  private InternalFrameEvent ?-> void internalFrameClosing = null;
  private InternalFrameEvent ?-> void internalFrameDeactivated = null;
  private InternalFrameEvent ?-> void internalFrameDeiconified = null;
  private InternalFrameEvent ?-> void internalFrameIconified = null;
  private InternalFrameEvent ?-> void internalFrameOpened = null;
  
  public InternalFrameEvent ?-> void getInternalFrameActivated() = this.internalFrameActivated;
  public InternalFrameEvent ?-> void getInternalFrameClosed() = this.internalFrameClosed;
  public InternalFrameEvent ?-> void getInternalFrameClosing() = this.internalFrameClosing;
  public InternalFrameEvent ?-> void getInternalFrameDeactivated() = this.internalFrameDeactivated;
  public InternalFrameEvent ?-> void getInternalFrameDeiconified() = this.internalFrameDeiconified;
  public InternalFrameEvent ?-> void getInternalFrameIconified() = this.internalFrameIconified;
  public InternalFrameEvent ?-> void getInternalFrameOpened() = this.internalFrameOpened;
  
  public void setInternalFrameActivated(InternalFrameEvent ?-> void value) { this.internalFrameActivated = value; }
  public void setInternalFrameClosed(InternalFrameEvent ?-> void value) { this.internalFrameClosed = value; }
  public void setInternalFrameClosing(InternalFrameEvent ?-> void value) { this.internalFrameClosing = value; }
  public void setInternalFrameDeactivated(InternalFrameEvent ?-> void value) { this.internalFrameDeactivated = value; }
  public void setInternalFrameDeiconified(InternalFrameEvent ?-> void value) { this.internalFrameDeiconified = value; }
  public void setInternalFrameIconified(InternalFrameEvent ?-> void value) { this.internalFrameIconified = value; }
  public void setInternalFrameOpened(InternalFrameEvent ?-> void value) { this.internalFrameOpened = value; }
  

  internalFrameActivated(e)
  {
    InternalFrameEvent ?-> void internalFrameActivated = this.internalFrameActivated;
    if(internalFrameActivated != null) internalFrameActivated(e);
  }

  internalFrameClosed(e)
  {
    InternalFrameEvent ?-> void internalFrameClosed = this.internalFrameClosed;
    if(internalFrameClosed != null) internalFrameClosed(e);
  }

  internalFrameClosing(e)
  {
    InternalFrameEvent ?-> void internalFrameClosing = this.internalFrameClosing;
    if(internalFrameClosing != null) internalFrameClosing(e);
  }

  internalFrameDeactivated(e)
  {
    InternalFrameEvent ?-> void internalFrameDeactivated = this.internalFrameDeactivated;
    if(internalFrameDeactivated != null) internalFrameDeactivated(e);
  }

  internalFrameDeiconified(e)
  {
    InternalFrameEvent ?-> void internalFrameDeiconified = this.internalFrameDeiconified;
    if(internalFrameDeiconified != null) internalFrameDeiconified(e);
  }

  internalFrameIconified(e)
  {
    InternalFrameEvent ?-> void internalFrameIconified = this.internalFrameIconified;
    if(internalFrameIconified != null) internalFrameIconified(e);
  }

  internalFrameOpened(e)
  {
    InternalFrameEvent ?-> void internalFrameOpened = this.internalFrameOpened;
    if(internalFrameOpened != null) internalFrameOpened(e);
  }
}


class NListDataListener implements ListDataListener , NiceListener
{
  private ListDataEvent ?-> void contentsChanged = null;
  private ListDataEvent ?-> void intervalAdded = null;
  private ListDataEvent ?-> void intervalRemoved = null;
  
  public ListDataEvent ?-> void getContentsChanged() = this.contentsChanged;
  public ListDataEvent ?-> void getIntervalAdded() = this.intervalAdded;
  public ListDataEvent ?-> void getIntervalRemoved() = this.intervalRemoved;
  
  public void setContentsChanged(ListDataEvent ?-> void value) { this.contentsChanged = value; }
  public void setIntervalAdded(ListDataEvent ?-> void value) { this.intervalAdded = value; }
  public void setIntervalRemoved(ListDataEvent ?-> void value) { this.intervalRemoved = value; }
  

  contentsChanged(e)
  {
    ListDataEvent ?-> void contentsChanged = this.contentsChanged;
    if(contentsChanged != null) contentsChanged(e);
  }

  intervalAdded(e)
  {
    ListDataEvent ?-> void intervalAdded = this.intervalAdded;
    if(intervalAdded != null) intervalAdded(e);
  }

  intervalRemoved(e)
  {
    ListDataEvent ?-> void intervalRemoved = this.intervalRemoved;
    if(intervalRemoved != null) intervalRemoved(e);
  }
}


class NListSelectionListener implements ListSelectionListener , NiceListener
{
  private ListSelectionEvent ?-> void listSelectionValueChanged;
  
  public ListSelectionEvent ?-> void getListSelectionValueChanged() = this.listSelectionValueChanged;
  public void setListSelectionValueChanged(ListSelectionEvent ?-> void value) { this.listSelectionValueChanged = value; }
  

  valueChanged(e)
  {
    ListSelectionEvent ?-> void listSelectionValueChanged = this.listSelectionValueChanged;
    if(listSelectionValueChanged != null) listSelectionValueChanged(e);
  }
}


class NMenuDragMouseListener implements MenuDragMouseListener , NiceListener
{
  private MenuDragMouseEvent ?-> void menuDragMouseDragged = null;
  private MenuDragMouseEvent ?-> void menuDragMouseEntered = null;
  private MenuDragMouseEvent ?-> void menuDragMouseExited = null;
  private MenuDragMouseEvent ?-> void menuDragMouseReleased = null;
  
  public MenuDragMouseEvent ?-> void getMenuDragMouseDragged() = this.menuDragMouseDragged;
  public MenuDragMouseEvent ?-> void getMenuDragMouseEntered() = this.menuDragMouseEntered;
  public MenuDragMouseEvent ?-> void getMenuDragMouseExited() = this.menuDragMouseExited;
  public MenuDragMouseEvent ?-> void getMenuDragMouseReleased() = this.menuDragMouseReleased;
  
  public void setMenuDragMouseDragged(MenuDragMouseEvent ?-> void value) { this.menuDragMouseDragged = value; }
  public void setMenuDragMouseEntered(MenuDragMouseEvent ?-> void value) { this.menuDragMouseEntered = value; }
  public void setMenuDragMouseExited(MenuDragMouseEvent ?-> void value) { this.menuDragMouseExited = value; }
  public void setMenuDragMouseReleased(MenuDragMouseEvent ?-> void value) { this.menuDragMouseReleased = value; }
  

  menuDragMouseDragged(e)
  {
    MenuDragMouseEvent ?-> void menuDragMouseDragged = this.menuDragMouseDragged;
    if(menuDragMouseDragged != null) menuDragMouseDragged(e);
  }

  menuDragMouseEntered(e)
  {
    MenuDragMouseEvent ?-> void menuDragMouseEntered = this.menuDragMouseEntered;
    if(menuDragMouseEntered != null) menuDragMouseEntered(e);
  }

  menuDragMouseExited(e)
  {
    MenuDragMouseEvent ?-> void menuDragMouseExited = this.menuDragMouseExited;
    if(menuDragMouseExited != null) menuDragMouseExited(e);
  }

  menuDragMouseReleased(e)
  {
    MenuDragMouseEvent ?-> void menuDragMouseReleased = this.menuDragMouseReleased;
    if(menuDragMouseReleased != null) menuDragMouseReleased(e);
  }
}


class NMenuKeyListener implements MenuKeyListener , NiceListener
{
  private MenuKeyEvent ?-> void menuKeyPressed = null;
  private MenuKeyEvent ?-> void menuKeyReleased = null;
  private MenuKeyEvent ?-> void menuKeyTyped = null;
  
  public MenuKeyEvent ?-> void getMenuKeyPressed() = this.menuKeyPressed;
  public MenuKeyEvent ?-> void getMenuKeyReleased() = this.menuKeyReleased;
  public MenuKeyEvent ?-> void getMenuKeyTyped() = this.menuKeyTyped;
  
  public void setMenuKeyPressed(MenuKeyEvent ?-> void value) { this.menuKeyPressed = value; }
  public void setMenuKeyReleased(MenuKeyEvent ?-> void value) { this.menuKeyReleased = value; }
  public void setMenuKeyTyped(MenuKeyEvent ?-> void value) { this.menuKeyTyped = value; }
  

  menuKeyPressed(e)
  {
    MenuKeyEvent ?-> void menuKeyPressed = this.menuKeyPressed;
    if(menuKeyPressed != null) menuKeyPressed(e);
  }

  menuKeyReleased(e)
  {
    MenuKeyEvent ?-> void menuKeyReleased = this.menuKeyReleased;
    if(menuKeyReleased != null) menuKeyReleased(e);
  }

  menuKeyTyped(e)
  {
    MenuKeyEvent ?-> void menuKeyTyped = this.menuKeyTyped;
    if(menuKeyTyped != null) menuKeyTyped(e);
  }
}


class NMenuListener implements MenuListener , NiceListener
{
  private MenuEvent ?-> void menuCanceled = null;
  private MenuEvent ?-> void menuDeselected = null;
  private MenuEvent ?-> void menuSelected = null;
  
  public MenuEvent ?-> void getMenuCanceled() = this.menuCanceled;
  public MenuEvent ?-> void getMenuDeselected() = this.menuDeselected;
  public MenuEvent ?-> void getMenuSelected() = this.menuSelected;
  
  public void setMenuCanceled(MenuEvent ?-> void value) { this.menuCanceled = value; }
  public void setMenuDeselected(MenuEvent ?-> void value) { this.menuDeselected = value; }
  public void setMenuSelected(MenuEvent ?-> void value) { this.menuSelected = value; }
  

  menuCanceled(e)
  {
    MenuEvent ?-> void menuCanceled = this.menuCanceled;
    if(menuCanceled != null) menuCanceled(e);
  }

  menuDeselected(e)
  {
    MenuEvent ?-> void menuDeselected = this.menuDeselected;
    if(menuDeselected != null) menuDeselected(e);
  }

  menuSelected(e)
  {
    MenuEvent ?-> void menuSelected = this.menuSelected;
    if(menuSelected != null) menuSelected(e);
  }
}


class NPopupMenuListener implements PopupMenuListener , NiceListener
{
  private PopupMenuEvent ?-> void popupMenuCanceled = null;
  private PopupMenuEvent ?-> void popupMenuWillBecomeInvisible = null;
  private PopupMenuEvent ?-> void popupMenuWillBecomeVisible = null;
  
  public PopupMenuEvent ?-> void getPopupMenuCanceled() = this.popupMenuCanceled;
  public PopupMenuEvent ?-> void getPopupMenuWillBecomeInvisible() = this.popupMenuWillBecomeInvisible;
  public PopupMenuEvent ?-> void getPopupMenuWillBecomeVisible() = this.popupMenuWillBecomeVisible;
  
  public void setPopupMenuCanceled(PopupMenuEvent ?-> void value) { this.popupMenuCanceled = value; }
  public void setPopupMenuWillBecomeInvisible(PopupMenuEvent ?-> void value) { this.popupMenuWillBecomeInvisible = value; }
  public void setPopupMenuWillBecomeVisible(PopupMenuEvent ?-> void value) { this.popupMenuWillBecomeVisible = value; }
  

  popupMenuCanceled(e)
  {
    PopupMenuEvent ?-> void popupMenuCanceled = this.popupMenuCanceled;
    if(popupMenuCanceled != null) popupMenuCanceled(e);
  }

  popupMenuWillBecomeInvisible(e)
  {
    PopupMenuEvent ?-> void popupMenuWillBecomeInvisible = this.popupMenuWillBecomeInvisible;
    if(popupMenuWillBecomeInvisible != null) popupMenuWillBecomeInvisible(e);
  }

  popupMenuWillBecomeVisible(e)
  {
    PopupMenuEvent ?-> void popupMenuWillBecomeVisible = this.popupMenuWillBecomeVisible;
    if(popupMenuWillBecomeVisible != null) popupMenuWillBecomeVisible(e);
  }
}


class NTableColumnModelListener implements TableColumnModelListener , NiceListener
{
  private TableColumnModelEvent ?-> void columnAdded = null;
  private TableColumnModelEvent ?-> void columnMoved = null;
  private TableColumnModelEvent ?-> void columnRemoved = null;
  private ListSelectionEvent ?-> void columnSelectionChanged = null;
  private ChangeEvent ?-> void columnMarginChanged = null;
  
  public TableColumnModelEvent ?-> void getColumnAdded() = this.columnAdded;
  public TableColumnModelEvent ?-> void getColumnMoved() = this.columnMoved;
  public TableColumnModelEvent ?-> void getColumnRemoved() = this.columnRemoved;
  public ListSelectionEvent ?-> void getColumnSelectionChanged() = this.columnSelectionChanged;
  public ChangeEvent ?-> void getColumnMarginChanged() = this.columnMarginChanged;
  
  public void setColumnAdded(TableColumnModelEvent ?-> void value) { this.columnAdded = value; }
  public void setColumnMoved(TableColumnModelEvent ?-> void value) { this.columnMoved = value; }
  public void setColumnRemoved(TableColumnModelEvent ?-> void value) { this.columnRemoved = value; }
  public void setColumnSelectionChanged(ListSelectionEvent ?-> void value) { this.columnSelectionChanged = value; }
  public void setColumnMarginChanged(ChangeEvent ?-> void value) { this.columnMarginChanged = value; }
  

  columnAdded(e)
  {
    TableColumnModelEvent ?-> void columnAdded = this.columnAdded;
    if(columnAdded != null) columnAdded(e);
  }

  columnMarginChanged(e)
  {
    ChangeEvent ?-> void columnMarginChanged = this.columnMarginChanged;
    if(columnMarginChanged != null) columnMarginChanged(e);
  }

  columnMoved(e)
  {
    TableColumnModelEvent ?-> void columnMoved = this.columnMoved;
    if(columnMoved != null) columnMoved(e);
  }

  columnRemoved(e)
  {
    TableColumnModelEvent ?-> void columnRemoved = this.columnRemoved;
    if(columnRemoved != null) columnRemoved(e);
  }

  columnSelectionChanged(e)
  {
    ListSelectionEvent ?-> void columnSelectionChanged = this.columnSelectionChanged;
    if(columnSelectionChanged != null) columnSelectionChanged(e);
  }
}


class NTableModelListener implements TableModelListener , NiceListener
{
  private TableModelEvent ?-> void tableChanged;
  
  public TableModelEvent ?-> void getTableChanged() = this.tableChanged;
  public void setTableChanged(TableModelEvent ?-> void value) { this.tableChanged = value; }
  
  
  tableChanged(e)
  {
    TableModelEvent ?-> void tableChanged = this.tableChanged;
    if(tableChanged != null) tableChanged(e);
  }
}


class NTreeExpansionListener implements TreeExpansionListener , NiceListener
{
  private TreeExpansionEvent ?-> void treeCollapsed = null;
  private TreeExpansionEvent ?-> void treeExpanded = null;
  
  public TreeExpansionEvent ?-> void getTreeCollapsed() = this.treeCollapsed;
  public TreeExpansionEvent ?-> void getTreeExpanded() = this.treeExpanded;
  
  public void setTreeCollapsed(TreeExpansionEvent ?-> void value) { this.treeCollapsed = value; }
  public void setTreeExpanded(TreeExpansionEvent ?-> void value) { this.treeExpanded = value; }
  

  treeCollapsed(e)
  {
    TreeExpansionEvent ?-> void treeCollapsed = this.treeCollapsed;
    if(treeCollapsed != null) treeCollapsed(e);
  }

  treeExpanded(e)
  {
    TreeExpansionEvent ?-> void treeExpanded = this.treeExpanded;
    if(treeExpanded != null) treeExpanded(e);
  }
}


class NTreeModelListener implements TreeModelListener , NiceListener
{
  private TreeModelEvent ?-> void treeNodesChanged = null;
  private TreeModelEvent ?-> void treeNodesInserted = null;
  private TreeModelEvent ?-> void treeNodesRemoved = null;
  private TreeModelEvent ?-> void treeStructureChanged = null;
  
  public TreeModelEvent ?-> void getTreeNodesChanged() = this.treeNodesChanged;
  public TreeModelEvent ?-> void getTreeNodesInserted() = this.treeNodesInserted;
  public TreeModelEvent ?-> void getTreeNodesRemoved() = this.treeNodesRemoved;
  public TreeModelEvent ?-> void getTreeStructureChanged() = this.treeStructureChanged;
  
  public void setTreeNodesChanged(TreeModelEvent ?-> void value) { this.treeNodesChanged = value; }
  public void setTreeNodesInserted(TreeModelEvent ?-> void value) { this.treeNodesInserted = value; }
  public void setTreeNodesRemoved(TreeModelEvent ?-> void value) { this.treeNodesRemoved = value; }
  public void setTreeStructureChanged(TreeModelEvent ?-> void value) { this.treeStructureChanged = value; }
  
  
  treeNodesChanged(e)
  {
    TreeModelEvent ?-> void treeNodesChanged = this.treeNodesChanged;
    if(treeNodesChanged != null) treeNodesChanged(e);
  }

  treeNodesInserted(e)
  {
    TreeModelEvent ?-> void treeNodesInserted = this.treeNodesInserted;
    if(treeNodesInserted != null) treeNodesInserted(e);
  }

  treeNodesRemoved(e)
  {
    TreeModelEvent ?-> void treeNodesRemoved = this.treeNodesRemoved;
    if(treeNodesRemoved!= null) treeNodesRemoved(e);
  }

  treeStructureChanged(e)
  {
    TreeModelEvent ?-> void treeStructureChanged = this.treeStructureChanged;
    if(treeStructureChanged!= null) treeStructureChanged(e);
  }
}


class NTreeSelectionListener implements TreeSelectionListener , NiceListener
{
  private TreeSelectionEvent ?-> void treeSelectionValueChanged;

  public TreeSelectionEvent ?-> void getTreeSelectionValueChanged() = this.treeSelectionValueChanged;
  public void setTreeSelectionValueChanged(TreeSelectionEvent ?-> void value) { this.treeSelectionValueChanged = value; }
  
  
  valueChanged(e)
  {
    TreeSelectionEvent ?-> void treeSelectionValueChanged = this.treeSelectionValueChanged;
    if(treeSelectionValueChanged != null) treeSelectionValueChanged(e);
  }
}


class NTreeWillExpandListener implements TreeWillExpandListener , NiceListener
{
  private TreeExpansionEvent ?-> void treeWillCollapse = null;
  private TreeExpansionEvent ?-> void treeWillExpand = null;
  
  public TreeExpansionEvent ?-> void getTreeWillCollapse() = this.treeWillCollapse;
  public TreeExpansionEvent ?-> void getTreeWillExpand() = this.treeWillExpand;
  
  public void setTreeWillCollapse(TreeExpansionEvent ?-> void value) { this.treeWillCollapse = value; }
  public void setTreeWillExpand(TreeExpansionEvent ?-> void value) { this.treeWillExpand = value; }
  

  treeWillCollapse(e)
  {
    TreeExpansionEvent ?-> void treeWillCollapse = this.treeWillCollapse;
    if(treeWillCollapse != null) treeWillCollapse(e);
  }

  treeWillExpand(e)
  {
    TreeExpansionEvent ?-> void treeWillExpand = this.treeWillExpand;
    if(treeWillExpand != null) treeWillExpand(e);
  }
}


class NUndoableEditListener implements UndoableEditListener , NiceListener
{
  private UndoableEditEvent ?-> void undoableEditHappened;
  
  public UndoableEditEvent ?-> void getUndoableEditHappened() = this.undoableEditHappened;
  public void setUndoableEditHappened(UndoableEditEvent ?-> void value) { this.undoableEditHappened = value; }
  

  undoableEditHappened(e)
  {
    UndoableEditEvent ?-> void undoableEditHappened = this.undoableEditHappened;
    if(undoableEditHappened != null) undoableEditHappened(e);
  }
}