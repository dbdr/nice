
package regtest.basic;

/**
   Tests various aspects of interfacing with Java bytecode:
     - use of native code
     - import of native classes
     - inlined methods
     - access (read and write) to (static and instance) fields
*/

import java.io.*;

//<Any T> T nop(T) = inline regtest.basic.Nop();

// rebind static and non-static fields
String stringS() = native Fields.stringS;
String stringI(Fields) = native Fields.stringI;

List<String> fieldsList(Fields) = native Fields.stringList;

void test_native();
test_native()
{
  println("\n### Testing native methods and classes ###\n");

  File f = new File("titi");

  try {
    java.net.ServerSocket s = new java.net.ServerSocket(1235);
  } catch(java.net.BindException e) {}

  java.lang.System.currentTimeMillis();

  Fields.intS = 2;
  Fields.stringS = "Static field is: ";
  println(Fields.stringS + Fields.intS);

  Fields f = new Fields();
  f.intI = 3;
  f.stringI = "Instance field is: ";
  println(f.stringI + f.intI);

  String s = f.fieldsList[0];
  assert (s.equals("First"));
}

// Tests creation of an array with a native type component.
// java.lang.Void is exotic enough so that it has not been loaded in a previous package
// (nice.lang), so that we check that this specific situation works.
Array<?java.lang.Void> noVoids() = new java.lang.Void[0];
