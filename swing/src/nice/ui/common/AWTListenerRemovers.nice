
/**************************************************************************/
/*                                                                        */
/*  This program is free software; you can redistribute it and/or modify  */
/*  it under the terms of the GNU General Public License as published by  */
/*  the Free Software Foundation; either version 2 of the License, or     */
/*  (at your option) any later version.                                   */
/*                                                                        */
/**************************************************************************/


package nice.ui.common;


/**
 * DECLARATION of methods to remove nice.ui.awt.NiceListener from nice.ui.awt.NiceListenerHandler
 */
public <ActionListenerHandler H> void removeNiceActionListener(H,NiceActionListener);
public <ItemListenerHandler H> void removeNiceItemListener(H,NiceItemListener);
public <TextListenerHandler H> void removeNiceTextListener(H,NiceTextListener);
public <AdjustmentListenerHandler H> void removeNiceAdjustmentListener(H,NiceAdjustmentListener);
public <ContainerListenerHandler H> void removeNiceContainerListener(H,NiceContainerListener);
public <WindowListenerHandler H> void removeNiceWindowListener(H,NiceWindowListener);
public <ComponentListenerHandler H> void removeNiceComponentListener(H,NiceComponentListener);
public <FocusListenerHandler H> void removeNiceFocusListener(H,NiceFocusListener);
public <HierarchyBoundsListenerHandler H> void removeNiceHierarchyBoundsListener(H,NiceHierarchyBoundsListener);
public <HierarchyListenerHandler H> void removeNiceHierarchyListener(H,NiceHierarchyListener);
public <InputMethodListenerHandler H> void removeNiceInputMethodListener(H,NiceInputMethodListener);
public <KeyListenerHandler H> void removeNiceKeyListener(H,NiceKeyListener);
public <MouseListenerHandler H> void removeNiceMouseListener(H,NiceMouseListener);
public <MouseMotionListenerHandler H> void removeNiceMouseMotionListener(H,NiceMouseMotionListener);
public <DragSourceListenerHandler H> void removeNiceDragSourceListener(H,NiceDragSourceListener);
public <DropTargetListenerHandler H> void removeNiceDropTargetListener(H,NiceDropTargetListener);
public <DragGestureListenerHandler H> void removeNiceDragGestureListener(H,NiceDragGestureListener);
//JDK1.4  public <AWTEventListenerHandler H, AWTEventKey K> void removeNiceAWTEventListener(H,K,NiceAWTEventListener);
//JDK1.4  public <WindowFocusListenerHandler H> void removeNiceWindowFocusListener(H,NiceWindowFocusListener);
//JDK1.4  public <WindowStateListenerHandler H> void removeNiceWindowStateListener(H,NiceWindowStateListener);
//JDK1.4  public <MouseWheelListenerHandler H> void removeNiceMouseWheelListener(H,NiceMouseWheelListener);
//JDK1.4  public <DragSourceListenerHandler H> void removeNiceDragSourceMotionListener(H,NiceDragSourceMotionListener);


/**
 * DEFINITION of methods to remove nice.ui.awt.NiceListener from nice.ui.awt.NiceListenerHandler
 */
removeNiceActionListener(java.awt.Button this,listener) = this.removeActionListener(listener);
removeNiceActionListener(java.awt.List this,listener) = this.removeActionListener(listener);
removeNiceActionListener(java.awt.MenuItem this,listener) = this.removeActionListener(listener);
removeNiceActionListener(java.awt.TextField this,listener) = this.removeActionListener(listener);
removeNiceItemListener(java.awt.Checkbox this,listener) = this.removeItemListener(listener);
removeNiceItemListener(java.awt.CheckboxMenuItem this,listener) = this.removeItemListener(listener);
removeNiceItemListener(java.awt.Choice this,listener) = this.removeItemListener(listener);
removeNiceItemListener(java.awt.List this,listener) = this.removeItemListener(listener);
removeNiceTextListener(java.awt.TextComponent this,listener) = this.removeTextListener(listener);
removeNiceAdjustmentListener(java.awt.Scrollbar this,listener) = this.removeAdjustmentListener(listener);
removeNiceContainerListener(java.awt.Container this,listener) = this.removeContainerListener(listener);
removeNiceWindowListener(java.awt.Window this,listener) = this.removeWindowListener(listener);
removeNiceComponentListener(java.awt.Component this,listener) = this.removeComponentListener(listener);
removeNiceFocusListener(java.awt.Component this,listener) = this.removeFocusListener(listener);
removeNiceHierarchyBoundsListener(java.awt.Component this,listener) = this.removeHierarchyBoundsListener(listener);
removeNiceHierarchyListener(java.awt.Component this,listener) = this.removeHierarchyListener(listener);
removeNiceInputMethodListener(java.awt.Component this,listener) = this.removeInputMethodListener(listener);
removeNiceKeyListener(java.awt.Component this,listener) = this.removeKeyListener(listener);
removeNiceMouseListener(java.awt.Component this,listener) = this.removeMouseListener(listener);
removeNiceMouseMotionListener(java.awt.Component this,listener) = this.removeMouseMotionListener(listener);
removeNicePropertyChangeListener(java.awt.Component this,listener) = this.removePropertyChangeListener(listener);

removeNicePropertyChangeListener(java.awt.Component this, String key,listener)
{
	this.removePropertyChangeListener(key,listener);
	//this.removeMappableListener(key,listener,mappablePropertyChangeListeners);
}

removeNiceDragSourceListener(java.awt.dnd.DragSourceContext this,listener)
{
	this.removeDragSourceListener(listener);
	//this.removeInAccessibleListener(listener,dragSourceListeners);
}

removeNiceDropTargetListener(java.awt.dnd.DropTarget this,listener)
{
	this.removeDropTargetListener(listener);
	//this.removeInAccessibleListener(listener,dropTargetListeners);
}

removeNiceDragGestureListener(java.awt.dnd.DragGestureRecognizer this,listener)
{
	this.removeDragGestureListener(listener);
	//this.removeInAccessibleListener(listener,dragGestureListeners);
}

//JDK1.4  removeNicePropertyChangeListeners(java.awt.Toolkit thisString ,key,listener)
//JDK1.4  {
//JDK1.4  	this.removePropertyChangeListener(key,listener);
//JDK1.4  	this.removeMappableListener(key,listener,mappableropertyChangeListeners);
//JDK1.4  }

//JDK1.4  removeNiceAWTEventListeners(java.awt.Toolkit thislong ,key,listener)  
//JDK1.4  {
//JDK1.4  	this.removeAWTEventListener(listener,key);
//JDK1.4  	this.removeMappableListener(key,listener,mappablePropertyChangeListeners);
//JDK1.4  }

//JDK1.4  removeNiceDragSourceListener(java.awt.dnd.DragSource this,listener)
//JDK1.4  {
//JDK1.4  	this.removeDragSourceListener(listener);
//JDK1.4  	this.removeInAccessibleListener(listener,dragSourceListeners);
//JDK1.4  }

//JDK1.4  removeNiceAdjustmentListener(java.awt.ScrollPaneAdjustable this,listener) = this.removeAdjustmentListener(listener);
//JDK1.4  removeNiceWindowFocusListener(java.awt.Window this,listener) = this.removeWindowFocusListener(listener);
//JDK1.4  removeNiceWindowStateListener(java.awt.Window this,listener) = this.removeWindowStateListener(listener);
//JDK1.4  removeNiceMouseWheelListener(java.awt.Component this,listener) = this.removeMouseWheelListener(listener);
//JDK1.4  removeNiceDragSourceMotionListener(java.awt.dnd.DragSource this,listener) = this.removeDragSourceMotionListener(listener);



/**
 * DEFINITION of functions to remove all nice.ui.awt.NiceListener 
 * from all nice.ui.awt.NiceListenerHandler
 */
 
public <ActionListenerHandler H> void removeActionListener
  (H this,
   ActionEvent -> void actionPerformed
   )
{  
	NiceActionListener[?] listeners = this.getNiceActionListeners();
  if(listeners == null) return;
  listeners.foreach
    (NiceActionListener l =>
     {
       if(l.getActionPerformed() == actionPerformed) l.setActionPerformed(null);
       if(!l.isLoaded()) this.removeNiceActionListener(l);
     }
     );
}

  
public <AdjustmentListenerHandler H> void removeAdjustmentListener
  (H this,
   AdjustmentEvent -> void adjustmentValueChanged
   ) 
{
  NiceAdjustmentListener[?] listeners = this.getNiceAdjustmentListeners();
  if(listeners == null) return;
  listeners.foreach
    (NiceAdjustmentListener l =>
     {
       if(l.getAdjustmentValueChanged() == adjustmentValueChanged) l.setAdjustmentValueChanged(null);
       if(!l.isLoaded()) this.removeNiceAdjustmentListener(l);
     }
     );
}

 
public <ComponentListenerHandler H> void removeComponentListener
  (H this,
   ComponentEvent ?-> void componentHidden = null,
   ComponentEvent ?-> void componentMoved = null,
   ComponentEvent ?-> void componentResized = null,
   ComponentEvent ?-> void componentShown = null
   )
{
  NiceComponentListener[?] listeners = this.getNiceComponentListeners();
  if(listeners == null) return;
  listeners.foreach
    (NiceComponentListener l =>
     {
       if(componentHidden != null && l.getComponentHidden() == componentHidden) l.setComponentHidden(null);
       if(componentMoved != null && l.getComponentMoved() == componentMoved) l.setComponentMoved(null);
       if(componentResized != null && l.getComponentResized() == componentResized) l.setComponentResized(null);
       if(componentShown != null && l.getComponentShown() == componentShown) l.setComponentShown(null);
       if(!l.isLoaded()) this.removeNiceComponentListener(l);
     }
     );
}

 
public <ContainerListenerHandler H> void removeContainerListener
  (H this,
   ContainerEvent ?-> void componentAdded = null,
   ContainerEvent ?-> void componentRemoved = null
   ) 
{
  NiceContainerListener[?] listeners = this.getNiceContainerListeners();
  if(listeners == null) return;
  listeners.foreach
    (NiceContainerListener l =>
     {
       if(componentAdded != null && l.getComponentAdded() == componentAdded) l.setComponentAdded(null);
       if(componentRemoved != null && l.getComponentRemoved() == componentRemoved) l.setComponentRemoved(null);
       if(!l.isLoaded()) this.removeNiceContainerListener(l);
     }
     );
} 

 
public <FocusListenerHandler H> void removeFocusListener
  (H this,
   FocusEvent ?-> void focusGained = null,
   FocusEvent ?-> void focusLost = null
   )
{
  NiceFocusListener[?] listeners = this.getNiceFocusListeners();
  if(listeners == null) return;
  listeners.foreach
    (NiceFocusListener l =>
     {
       if(focusGained != null && l.getFocusGained() == focusGained) l.setFocusGained(null);
       if(focusLost != null && l.getFocusLost() == focusLost) l.setFocusLost(null);
       if(!l.isLoaded()) this.removeNiceFocusListener(l);
     }
     );
}

  
public <HierarchyBoundsListenerHandler H> void removeHierarchyBoundsListener
  (H this,
   HierarchyEvent ?-> void hierarchyAncestorMoved = null,
   HierarchyEvent ?-> void hierarchyAncestorResized = null
   ) 
{
  NiceHierarchyBoundsListener[?] listeners = this.getNiceHierarchyBoundsListeners();
  if(listeners == null) return;
  listeners.foreach
    (NiceHierarchyBoundsListener l =>
     {
       if(hierarchyAncestorMoved != null && l.getHierarchyAncestorMoved == hierarchyAncestorMoved) l.setHierarchyAncestorMoved(null);
       if(hierarchyAncestorResized != null && l.getHierarchyAncestorResized == hierarchyAncestorResized) l.setHierarchyAncestorResized(null);
       if(!l.isLoaded()) this.removeNiceHierarchyBoundsListener(l);
     }
     );
}

  
public <HierarchyListenerHandler H> void removeHierarchyListener
  (H this,
   HierarchyEvent -> void hierarchyChanged
   ) 
{
  NiceHierarchyListener[?] listeners = this.getNiceHierarchyListeners();
  if(listeners == null) return;
  listeners.foreach
    (NiceHierarchyListener l =>
     {
       if(l.getHierarchyChanged() == hierarchyChanged) l.setHierarchyChanged(null);
       if(!l.isLoaded()) this.removeNiceHierarchyListener(l);
     }
     );
}

  
public <InputMethodListenerHandler H> void removeInputMethodListener
  (H this,
   InputMethodEvent ?-> void caretPositionChanged = null,
   InputMethodEvent ?-> void inputMethodTextChanged = null
   )  
{
  NiceInputMethodListener[?] listeners = this.getNiceInputMethodListeners(); 
  if(listeners == null) return;
  listeners.foreach
    (NiceInputMethodListener l =>
     {
       if(caretPositionChanged != null && l.getCaretPositionChanged() == caretPositionChanged) l.setCaretPositionChanged(null);
       if(inputMethodTextChanged != null && l.getInputMethodTextChanged() == inputMethodTextChanged) l.setInputMethodTextChanged(null);
       if(!l.isLoaded()) this.removeNiceInputMethodListener(l);
     }
     );
}


public <ItemListenerHandler H> void removeItemListener
  (H this,
   ItemEvent -> void itemStateChanged
   )  
{
  NiceItemListener[?] listeners = this.getNiceItemListeners();
  if(listeners == null) return;
  listeners.foreach
    (NiceItemListener l =>
     {
       if(l.getItemStateChanged() == itemStateChanged) l.setItemStateChanged(null);
       if(!l.isLoaded()) this.removeNiceItemListener(l);
     }
     );
}   

 
public <KeyListenerHandler H> void removeKeyListener
  (H this,
   KeyEvent ?-> void keyPressed = null,
   KeyEvent ?-> void keyReleased = null,
   KeyEvent ?-> void keyTyped = null
   )
{
  NiceKeyListener[?] listeners = this.getNiceKeyListeners(); 
  if(listeners == null) return;
  listeners.foreach
    (NiceKeyListener l =>
     {
       if(keyPressed != null && l.getKeyPressed() == keyPressed) l.setKeyPressed(null);
       if(keyReleased != null && l.getKeyReleased() == keyReleased) l.setKeyReleased(null);
       if(keyTyped != null && l.getKeyTyped() == keyTyped) l.setKeyTyped(null);
       if(!l.isLoaded()) this.removeNiceKeyListener(l);
     }
     );
}  
 

public <MouseListenerHandler H> void removeMouseListener
  (H this,
   MouseEvent ?-> void mouseClicked = null,
   MouseEvent ?-> void mouseEntered = null,
   MouseEvent ?-> void mouseExited = null,
   MouseEvent ?-> void mousePressed = null,
   MouseEvent ?-> void mouseReleased = null
   )
{
  NiceMouseListener[?] listeners = this.getNiceMouseListeners();
  if(listeners == null) return;
  listeners.foreach
    (NiceMouseListener l =>
     {
       if(mouseClicked != null && l.getMouseClicked() == mouseClicked) l.setMouseClicked(null);
       if(mouseEntered != null && l.getMouseEntered() == mouseEntered) l.setMouseEntered(null);
       if(mouseExited != null && l.getMouseExited() == mouseExited) l.setMouseExited(null);
       if(mousePressed != null && l.getMousePressed() == mousePressed) l.setMousePressed(null);
       if(mouseReleased != null && l.getMouseReleased() == mouseReleased) l.setMouseReleased(null);
       if(!l.isLoaded()) this.removeNiceMouseListener(l);
     }
     );
}  

 
public <MouseMotionListenerHandler H> void removeMouseMotionListener
  (H this,
   MouseEvent ?-> void mouseDragged = null,
   MouseEvent ?-> void mouseMoved = null
   ) 
{
  NiceMouseMotionListener[?] listeners = this.getNiceMouseMotionListeners();
  if(listeners == null) return;
  listeners.foreach
    (NiceMouseMotionListener l =>
     {
       if(mouseDragged != null && l.getMouseDragged() == mouseDragged) l.setMouseDragged(null);
       if(mouseMoved != null && l.getMouseMoved() == mouseMoved) l.setMouseMoved(null);
       if(!l.isLoaded()) this.removeNiceMouseMotionListener(l);
     }
     );
} 

  
public <TextListenerHandler H> void removeTextListener
  (H this,
   TextEvent -> void textValueChanged
   ) 
{
  NiceTextListener[?] listeners = this.getNiceTextListeners();
  if(listeners == null) return;
  listeners.foreach
    (NiceTextListener l =>
     {
       if(l.getTextValueChanged() == textValueChanged) l.setTextValueChanged(null);
       if(!l.isLoaded()) this.removeNiceTextListener(l);
     }
     );
}  


public <WindowListenerHandler H> void removeWindowListener
  (H this,
   WindowEvent ?-> void windowActivated = null,
   WindowEvent ?-> void windowClosed = null,
   WindowEvent ?-> void windowClosing = null,
   WindowEvent ?-> void windowDeactivated = null,
   WindowEvent ?-> void windowDeiconified = null,
   WindowEvent ?-> void windowIconified = null,
   WindowEvent ?-> void windowOpened = null
   )  
{
  NiceWindowListener[?] listeners = this.getNiceWindowListeners();
  if(listeners == null) return;
  listeners.foreach
    (NiceWindowListener l =>
     {
       if(windowActivated != null && l.getWindowActivated() == windowActivated) l.setWindowActivated(null);
       if(windowClosed != null && l.getWindowClosed() == windowClosed) l.setWindowClosed(null);
       if(windowClosing != null && l.getWindowClosing() == windowClosing) l.setWindowClosing(null);
       if(windowDeactivated != null && l.getWindowDeactivated() == windowDeactivated) l.setWindowDeactivated(null);
       if(windowDeiconified != null && l.getWindowDeiconified() == windowDeiconified) l.setWindowDeiconified(null);
       if(windowIconified != null && l.getWindowIconified() == windowIconified) l.setWindowIconified(null);
       if(windowOpened != null && l.getWindowOpened() == windowOpened) l.setWindowOpened(null);
       if(!l.isLoaded()) this.removeNiceWindowListener(l);
     }
     );
}   

public <DragSourceListenerHandler H> void removeDragSourceListener
  (H this,
   DragSourceDropEvent ?-> void dsDragDropEnd = null,
   DragSourceDragEvent ?-> void dsDragEnter = null,
   DragSourceDragEvent ?-> void dsDragOver = null,
   DragSourceDragEvent ?-> void dsDropActionChanged = null,
   DragSourceEvent ?-> void dsDragExit = null
   ) 
{
  NiceDragSourceListener[?] listeners = this.getNiceDragSourceListeners();
  if(listeners == null) return;
  listeners.foreach
    (NiceDragSourceListener l =>
     {
       if(dsDragDropEnd != null && l.getDsDragDropEnd() == dsDragDropEnd) l.setDsDragDropEnd(null);
       if(dsDragEnter != null && l.getDsDragEnter() == dsDragEnter) l.setDsDragEnter(null);
       if(dsDragOver != null && l.getDsDragOver() == dsDragOver) l.setDsDragOver(null);
       if(dsDropActionChanged != null && l.getDsDropActionChanged() == dsDropActionChanged) l.setDsDropActionChanged(null);
       if(dsDragExit != null && l.getDsDragExit() == dsDragExit) l.setDsDragExit(null);
       if(!l.isLoaded()) this.removeNiceDragSourceListener(l);
     }
     );
}

  
public <DragGestureListenerHandler H> void removeDragGestureListener
  (H this,
   DragGestureEvent -> void dragGestureRecognized
   ) 
{
  NiceDragGestureListener[?] listeners = this.getNiceDragGestureListeners();
  if(listeners == null) return;
  listeners.foreach
    (NiceDragGestureListener l =>
     {
       if(l.getDragGestureRecognized() == dragGestureRecognized) l.setDragGestureRecognized(null);
       if(!l.isLoaded()) this.removeNiceDragGestureListener(l);
     }
     );
}


public <DropTargetListenerHandler H> void removeDropTargetListener
  (H this,
   DropTargetDropEvent ?-> void dtDrop = null,
   DropTargetDragEvent ?-> void dtDragEnter = null,
   DropTargetDragEvent ?-> void dtDragOver = null,
   DropTargetDragEvent ?-> void dtDropActionChanged = null,
   DropTargetEvent ?-> void dtDragExit = null
   ) 
{
  NiceDropTargetListener[?] listeners = this.getNiceDropTargetListeners();
  if(listeners == null) return;
  listeners.foreach
    (NiceDropTargetListener l =>
     {
       if(dtDrop != null && l.getDtDrop() == dtDrop) l.setDtDrop(null);
       if(dtDragEnter != null && l.getDtDragEnter() == dtDragEnter) l.setDtDragEnter(null);
       if(dtDragOver != null && l.getDtDragOver() == dtDragOver) l.setDtDragOver(null);
       if(dtDropActionChanged != null && l.getDtDropActionChanged() == dtDropActionChanged) l.setDtDropActionChanged(null);
       if(dtDragExit != null && l.getDtDragExit() == dtDragExit) l.setDtDragExit(null);
       if(!l.isLoaded()) this.removeNiceDropTargetListener(l);
     }
     );
}


//JDK1.4  public <AWTEventListenerHandler H> void removeAWTEventListener
//JDK1.4    (H this,
//JDK1.4     AWTEvent -> void eventDispatched
//JDK1.4     )
//JDK1.4  {
//JDK1.4    NiceAWTEventListener[?] listeners = this.getNiceAWTListeners();
//JDK1.4    if(listeners == null) return;
//JDK1.4    listeners.foreach
//JDK1.4      (NiceAWTEventListener l =>
//JDK1.4       {
//JDK1.4         if(l.getEventDispatched() == eventDispatched) l.setEventDispatched(null);
//JDK1.4         if(!l.isLoaded()) this.removeNiceAWTEventListener(l);
//JDK1.4       }
//JDK1.4       );
//JDK1.4  }


//JDK1.4  public <MouseWheelListenerHandler H> void removeMouseWheelListener
//JDK1.4    (H this,
//JDK1.4     MouseWheelEvent -> void mouseWheelMoved
//JDK1.4     )   
//JDK1.4  {
//JDK1.4    NiceMouseWheelListener[?] listeners = this.getNiceMouseWheelListeners();
//JDK1.4    if(listeners == null) return;
//JDK1.4    listeners.foreach
//JDK1.4      (NiceMouseWheelListener l =>
//JDK1.4       {
//JDK1.4         if(l.getMouseWheelMoved() == mouseWheelMoved) l.setMouseWheelMoved(null);
//JDK1.4         if(!l.isLoaded()) this.removeNiceMouseWheelListener(l);
//JDK1.4       }
//JDK1.4       );
//JDK1.4  } 

 
//JDK1.4  public <WindowFocusListenerHandler H> void removeWindowFocusListener
//JDK1.4    (H this,
//JDK1.4     WindowEvent ?-> void windowGainedFocus = null,
//JDK1.4     WindowEvent ?-> void windowLostFocus = null
//JDK1.4     )  
//JDK1.4  {
//JDK1.4    NiceWindowFocusListener[?] listeners = this.getNiceWindowFocusListeners();
//JDK1.4    if(listeners == null) return;
//JDK1.4    listeners.foreach
//JDK1.4      (NiceWindowFocusListener l =>
//JDK1.4       {
//JDK1.4         if(windowGainedFocus != null && l.getWindowGainedFocus() == windowGainedFocus) l.setWindowGainedFocus(null);
//JDK1.4         if(windowLostFocus != null && l.getWindowLostFocus() == windowLostFocus) l.setWindowLostFocus(null);
//JDK1.4         if(!l.isLoaded()) this.removeNiceWindowFocusListener(l);
//JDK1.4       }
//JDK1.4       );
//JDK1.4  } 

   
//JDK1.4  public <WindowStateListenerHandler H> void removeWindowStateListener
//JDK1.4    (H this,
//JDK1.4     WindowEvent -> void windowStateChanged
//JDK1.4     ) 
//JDK1.4  {
//JDK1.4    NiceWindowStateListener[?] listeners = this.getNiceWindowStateListeners();
//JDK1.4    if(listeners == null) return;
//JDK1.4    listeners.foreach
//JDK1.4      (NiceWindowStateListener l =>
//JDK1.4       {
//JDK1.4         if(l.getWindowStateChanged() == windowStateChanged) l.setWindowStateChanged(null);
//JDK1.4         if(!l.isLoaded()) this.removeNiceWindowStateListener(l);
//JDK1.4       }
//JDK1.4       );
//JDK1.4  }
  
  
//JDK1.4  public <DragSourceMotionListenerHandler H> void removeDragSourceMotionListener
//JDK1.4    (H this,
//JDK1.4     DragSourceDragEvent -> void dragMouseMoved
//JDK1.4     ) 
//JDK1.4  {
//JDK1.4    NiceDragSourceMotionListener[?] listeners = this.getNiceDragSourceMotionListeners();
//JDK1.4    if(listeners == null) return;
//JDK1.4    listeners.foreach
//JDK1.4      (NiceDragSourceMotionListener l =>
//JDK1.4       {
//JDK1.4         if(l.getDragMouseMoved() == dragMouseMoved) l.setDragMouseMoved(null);
//JDK1.4         if(!l.isLoaded()) this.removeNiceDragSourceMotionListener(l);
//JDK1.4       }
//JDK1.4       );
//JDK1.4  }
   