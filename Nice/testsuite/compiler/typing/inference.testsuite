/// Global
class A<FOO>
{
  void poly(FOO) {}
}
class B<BAR> extends A<BAR> {}

/// PASS
  let x = new A();
  x.poly("");

/// FAIL
  let x = new B();
  x.poly("");
  x. /*/// FAIL HERE*/ poly(0);

/// PASS
  /// Toplevel
<T> void foo() {
  let x = new A();
  x.poly("");
}

/// FAIL
  /// Toplevel
<T> void foo() {
  let x = new A();
  x.poly("");
  x. /*/// FAIL HERE*/ poly(0);
}

/// PASS
  /// Toplevel
void foo();
foo() {
  let x = new A();
  x.poly("");
}

/// FAIL
  /// Toplevel
void foo();
foo() {
  let x = new A();
  x.poly("");
  x. /*/// FAIL HERE*/ poly(0);
}

/// PASS
  let l = new ArrayList();
  l.add("...");

/// FAIL
  let l = new ArrayList();
  l.add("...");
  l. /*/// FAIL HERE*/ add(0);

/// PASS
  let l1 = new ArrayList();
  let l2 = new ArrayList();
  l1.add("...");
  l2.add(l1.get(0));
  l2.add(".");

/// FAIL
  let l1 = new ArrayList();
  let l2 = new ArrayList();
  l1.add("...");
  l2.add(l1.get(0));
  l2. /*/// FAIL HERE*/ add(0);


/// PASS
  let l1 = new ArrayList();
  let l2 = new ArrayList();
  ()->void action = () => l2.add(l1.get(0));
  l1.add("...");
  action();
  l2.add(".");

/// FAIL
  let l1 = new ArrayList();
  let l2 = new ArrayList();
  ()->void action = () => l2.add(l1.get(0));
  l1.add("...");
  action();
  l2. /*/// FAIL HERE*/ add(0);

/// FAIL
  var l = new LinkedList();
  l.add("");
  if (l.size == 1)
    {
      l = new LinkedList();
      l./*/// FAIL HERE*/ add(0);
    }
  String s = l.get(0);

/// PASS
  var n = 5;
  let table1 = new HashMap(10);
  for (int i = 0; i <= n; i++) 
    table1["foo_" + i] = i;

  String key; 
  for (each : table1.entrySet) {
    key = each.getKey;
  }

/// PASS
  let L1 = new LinkedList();
  for (var j = 1; j <= 10; j++) L1.add(j);

  LinkedList<int> L2 = new LinkedList(L1);

/// PASS
  let L1 = new LinkedList();
  for (var j = 1; j <= 10; j++)
    L1.add(j);

  let L3 = new LinkedList();
  while (!L1.isEmpty)
    L3.add( L1.removeFirst );

/// PASS
  let L1 = new LinkedList();
  L1.add(999);         
  println( L1[0] );

/// PASS
  let testmap = new HashMap();
   for(s : testmap.keySet())
     {
       String x = s + " => " + testmap[s];
     }

/// PASS
 let testmap = new HashMap();
 for(s : ["1", "2", "3"])
   testmap[s] = Integer.parseInt(s);
 for(s : testmap.keySet())
   println(s + " => " + testmap[s]);

/// PASS
 let testmap = new HashMap();
 for(s : ["1", "2", "3"])
   testmap[s] = Integer.parseInt(s);
 for(String s : testmap.keySet())
   println(s + " => " + testmap[s]);

/// PASS
  let l = new ArrayList();
  (List<String> l0, List<String> l1) = foo(l);
  /// Toplevel
<T,U | U <: T> (List<T>,List<U>) foo(List<U> x) = (new ArrayList(x), x);

/// FAIL
  let l = new ArrayList();
  (List<String> l0, List<String> l1) = foo(l);
  /*/// FAIL HERE */ (List<Number> l2, List<Number> l3) = foo(l);

  /* Without failure above, then we could do:
  l1.add("");
  Number n = l3.get(0); // Bang!
  */

  /// Toplevel
<T,U | U <: T> (List<T>,List<U>) foo(List<U> x) = (new ArrayList(x), x);

/// PASS
   // bug #923443
   byte n = 10;
   let L1 = new LinkedList();
   L1.add(n);

   foo(L1[0]);

  /// Toplevel
void foo(byte) {}
void foo(boolean) {}

/// PASS
   // self-contained test inspired by #923443
   let a = new A();

   int i = 0;
   poly(a, i);

   foo(a);

  /// Toplevel
void foo(A<int>) {}
void foo(A<boolean>) { assert false; }

/// PASS
 let testmap = new HashMap();
 for(i : 1..10)
   testmap[i] = i.toString();
 for(i : testmap.keySet())
   println(i + " => " + testmap[i]);

/// PASS
 // bug #923429
var n = 1;
let nKeys = 10000;

let table1 = new HashMap(nKeys);
let table2 = new HashMap();
for (int i = 0; i <= nKeys; i++)
table1["foo_" + i] = new Cell(value: i);

String key;
int v1;
?Cell c2;

while (n-- > 0)
  for (each : table1.entrySet) {
    key = each.getKey;
    v1 = each.getValue.value;

    if ( (c2 = table2[key]) != null)
      c2.value += v1;
    else
      table2[key] = new Cell(value: v1); //HERE
  }
  /// Toplevel
class Cell { int value; }
toString(Cell c) = c.value.toString;

/// PASS
 // bug #923429 simplified
 let table1 = new HashMap();
 let table2 = new HashMap();

 ?Cell c2;

 for (each : table1.entrySet)
   {
     let key = each.getKey;
     c2 = table2[key];
     table2[key] = new Cell(value: each.getValue.value);
   }
  /// Toplevel

class Cell { int value; }
