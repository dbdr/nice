/**************************************************************************/
/*                                N I C E                                 */
/*             A high-level object-oriented research language             */
/*                        (c) Daniel Bonniot 2000                         */
/*                                                                        */
/*  This program is free software; you can redistribute it and/or modify  */
/*  it under the terms of the GNU General Public License as published by  */
/*  the Free Software Foundation; either version 2 of the License, or     */
/*  (at your option) any later version.                                   */
/*                                                                        */
/**************************************************************************/

/*
   Scoping resolution, variable initialization test
*/

package bossa.syntax;

import nice.tools.ast;
import mlsub.typing.*;

// Interface

Statement analyse(Statement, VarScope, TypeScope, boolean mustReturnAValue);
?Expression analyse(Expression, VarScope, TypeScope);

TypeMaper typeMaper(SymbolTable<TypeSymbol>,TypeScope) = 
  native new TypeMaper(SymbolTable, TypeScope);

// Implementation

Info buildInfo(VarScope varScope, TypeScope typeScope);
buildInfo(varScope, typeScope)
{
  Info info = new Info();
  info.vars = symbolTable();
  info.typeVars = symbolTable();
  info.globalVarScope = varScope;
  info.globalTypeScope = typeScope;
  info.typeMap = typeMaper(info.typeVars, typeScope);
  info.flags = 0;
  info.flagsStack = new Vector();

  return info;
}

analyse(s@Statement, varScope, typeScope, mustReturnAValue)
{
  Info info = buildInfo(varScope, typeScope);

  try{
    analyse(s, info);
    
    if (mustReturnAValue && !info.getUnreachable())
      bossa.util.User.error(s, "Missing return statement");
  }
  catch(bossa.util.UserError e){
    nice.tools.compiler.OutputMessages.error(e.getMessage());
  }
  return s;
}

analyse(e@Expression, varScope, typeScope) = 
    analyse(e, buildInfo(varScope, typeScope));

java.util.List lookup(VarScope scope, ?LocatedString i)
= native java.util.List VarScope.lookup(LocatedString);

class Info
{
  SymbolTable<VarSymbol> vars;
  SymbolTable<TypeSymbol> typeVars;

  VarScope globalVarScope;
  TypeScope globalTypeScope;

  /* bit 0: point not reachable 
  */
  int flags; 
  boolean getUnreachable() = (this.flags & 1) != 0;
  void setUnreachable() { this.flags |= 1; }

  Stack<int> flagsStack;

  void beginInner(boolean reset)
  {
    this.flagsStack.push(this.flags);
    if (reset)
      this.flags = 0;
  }

  void endInner()
  {
    this.flags = this.flagsStack.pop();
  }

  void beginCases()
  {
    this.flagsStack.push(this.flags);
    this.flagsStack.push(-1);
  }
  
  void otherCase()
  {
    int prevResult = this.flagsStack.pop();
    int outer = this.flagsStack.top();
    this.flagsStack.push(this.flags & prevResult);
    this.flags = outer;
  }

  void endCases()
  {
    this.flags &= this.flagsStack.pop();
    this.flagsStack.pop();
  }

  // Abstract type for uniform lookup in both scopes
  // Shall probably go away sometime (at least the TypeMaper)
  TypeMap typeMap;

  void begin()
  {
    this.vars.begin();
    this.typeVars.begin();
  }

  void end()
  {
    this.vars.end();
    this.typeVars.end();
  }

  ?VarSymbol lookup(String name) = this.vars[name];

  JavaList<VarSymbol> globalLookup(LocatedString name) = 
    javaList(this.globalVarScope.lookup(name));

  ?TypeSymbol lookupType(LocatedString name)
  {
    ?TypeSymbol res = this.typeVars[name.toString()];
    if (res != null)
      return res;
    else
      return this.globalTypeScope.lookup(name);
  }

  void addVar(PolySymbol symbol)
  {
    symbol.type = notNull(symbol.syntacticType).resolve(this.typeMap);
    this.vars[symbol.name.toString()] = symbol;
  }

  void addVar(MonoSymbol symbol)
  {
    symbol.type = notNull(symbol.syntacticType).resolve(this.typeMap);
    this.vars[symbol.name.toString()] = symbol;
  }

  void addVars(Sequence<?MonoSymbol> symbols) = 
    symbols.iter(fun(?MonoSymbol s)=>this.addVar(notNull(s)));
  
  void addTypeVars(Sequence<?TypeSymbol> symbols) = 
    symbols.iter(fun(?TypeSymbol s)=>this.typeVars[notNull(s).toString()]=notNull(s));
}

void setInitialized(?Expression, Info);
setInitialized(e, i) {}
setInitialized(e@SymbolExp, i) {}

?Expression analyse(?Expression, Info);
void analyse(?Statement, Info);

/****************************************************************
 * Expressions
 ****************************************************************/

analyse(e@Expression, i) = e;
analyse(@null(Expression), info) = null;

analyse(e@AssignExp, i)
{
  e.value = analyse(e.value, i);
  e.to = analyse(e.to, i);
  setInitialized(e.to, i);
  return e;
}

void analyseExps(?Expression[] exps, Info info)
{
  for (int i = 0; i < exps.length; i++)
    exps[i] = analyse(exps[i], info);
}

void analyse(Arguments, Info);
analyse(args@Arguments, info)
{
  for (int i = 0; i < args.size(); i++)
    args.setExp(i, analyse(args.getExp(i), info));
}

void markAsCallFun(Expression, boolean);
markAsCallFun(e, infix) {}
markAsCallFun(e@IdentExp, infix)
{
  e.infix = infix;
  e.alwaysOverloadedSymbol = true;
}

void markAsCallFirstArg(Expression);
markAsCallFirstArg(e) {}
markAsCallFirstArg(e@IdentExp)
{
  e.enableClassExp = true;
}

analyse(e@CallExp, info)
{
  Arguments args = notNull(e.arguments);

  if (e.infix)
    markAsCallFirstArg(notNull(args.getExp(0)));

  args.analyse(info);

  if (e.infix)
    {
      e.declaringClass = args.staticClass();
      
      if (e.declaringClass != null)
	{
	  ?LocatedString funName = identString(e.function);
	  if (funName == null)
	    bossa.util.Internal.error(e.function, 
				      "This is not a valid class member");
	  
	  java.util.List possibilities = JavaMethod.findJavaMethods
	    (e.declaringClass, funName.toString(), args.size());

	  if (possibilities.size() == 0)
	    bossa.util.User.error(e, "class " + notNull(e.declaringClass).getName() +
				  " has no method or field " + funName);
	  
	  e.function = new OverloadedSymbolExp(possibilities, funName);

	  return e;
	}
      
      PackageExp pkg = args.packageExp();
      if (pkg != null)
	{
	  LocatedString nextComponent = identString(e.function);

	  if (nextComponent == null)
	    throw unknownIdent(notNull(pkg.locatedName()));

	  return ClassExp.create(pkg, nextComponent);
	}
    }

  boolean cannotReturn = e.isCallTo("throw");

  markAsCallFun(notNull(e.function), e.infix);
  e.function = analyse(e.function, info);
  
  if (cannotReturn)
    info.setUnreachable();

  return e;
}

analyse(e@FunExp, info)
{
  info.beginInner(true);
  info.begin();

  if (e.constraint != Constraint.True)
    {
      e.cst = notNull(e.constraint).resolveToLowlevel();
      addTypeVars(info, notNull(notNull(e.cst).binders()));
    }
  e.constraint = null;

  if (e.formals != null)
    addVars(info, notNull(e.formals));

  analyse(e.body, info);
  if (!info.getUnreachable() 
      && !nice.tools.code.Types.isVoid(e.inferredReturnType()))
    bossa.util.User.error(e, "Missing return statement");

  info.end();
  info.endInner();
  return e;
}

analyse(e@IdentExp, info)
{
  if (!e.infix) // infix symbols can only come from the global scope
    {
      ?VarSymbol s = info.lookup(e.ident.toString());
      if (s != null)
	if (!e.alwaysOverloadedSymbol)
	  return new SymbolExp(s, e.location());
	else
	  return new OverloadedSymbolExp(s, e.ident);
    }

  JavaList<VarSymbol> symbols;
  if (e.infix)
    symbols = javaList(notNull(Node.getGlobalScope()).lookup(e.ident));
  else
    symbols = info.globalLookup(notNull(e.ident));

  if (symbols != null && symbols.size() > 0)
    if (!e.alwaysOverloadedSymbol() && symbols.size() == 1)
      return new SymbolExp(symbols[0]);
    else
      return new OverloadedSymbolExp(symbols.impl, e.ident);

  if (e.enableClassExp)
    return ClassExp.create(e.ident);

  //if (e.infix)
    //return e;

  if (true) throw unknownIdent(notNull(e.ident));
  return null; // work-around pb with non-reachable code
}

analyse(e@IfExp, info)
{
  e.condition = analyse(e.condition, info);

  info.beginCases();
  e.thenExp = analyse(e.thenExp, info);
  e.thenUnreachable = info.getUnreachable();

  info.otherCase();
  e.elseExp = analyse(e.elseExp, info);
  e.elseUnreachable = info.getUnreachable();

  info.endCases();
  return e;
}

analyse(e@IncrementExp, info)
{
  e.variable = analyse(e.variable, info);
  return e;
}

analyse(e@LiteralArrayExp, info)
{
  analyseExps(notNull(e.elements), info);
  return e;
}

analyse(e@NewArrayExp, info)
{
  e.resolveTC(info.typeMap);
  analyseExps(notNull(e.knownDimensions), info);
  return e;
}

analyse(e@NewExp, info)
{
  notNull(e.arguments).analyse(info);
  e.resolve(info.typeMap);
  return e;
}

analyse(e@StatementExp, info)
{
  analyse(e.statement, info);
  return e;
}

analyse(c@ConstantExp, info)
{
  if (c.type != null)
    return c;
    
  ?TypeSymbol s = info.lookupType(notNull(c.className));
    
  if (s == null)
    bossa.util.Internal.error
      ("Base type " + c.className + " was not found in the standard library");

  ?TypeConstructor tc = TypeConstructor.fromTypeSymbol(notNull(s));
  if (tc == null)
    bossa.util.Internal.error("Base type " + c.className + " is not valid");
  
  c.type = new mlsub.typing.Polytype
    (Monotype.sure(new mlsub.typing.MonotypeConstructor(tc, null)));

  return c;
}

analyse(e@TupleExp, info)
{
  analyseExps(notNull(e.expressions), info);
  return e;
}

/****************************************************************
 * Statements
 ****************************************************************/

analyse(s@Statement, info) {}
analyse(s@null(Statement), info) {}

analyse(decl@Block.LocalVariable, info)
{
  if (decl.value != null)
    decl.value = analyse(decl.value, info);
  info.addVar(notNull(decl.left));
}

analyse(decl@Block.LocalFunction, info)
{
  if (decl.value != null)
    decl.value = analyse(decl.value, info);
  info.addVar(notNull(decl.left));
}

analyse(b@Block, info)
{
  info.begin();
  javaList(notNull(b.locals)).iter(fun(Block.LocalDeclaration l) => analyse(l, info));
  notNull(b.statements).iter(fun(?Statement s)=>{
    if (info.getUnreachable())
      bossa.util.User.error(s, "This statement is never executed");
    analyse(s, info);
  });
  info.end();
}

analyse(s@ExpressionStmt, info)
{
  s.exp = analyse(s.exp, info);
}

analyse(l@LoopStmt, info)
{
  info.beginInner(false);
  l.whileExp = analyse(l.whileExp, info);
  analyse(l.loopBody, info);
  analyse(l.iterationStatements, info);
  info.endInner();
}

analyse(r@ReturnStmt, info)
{
  r.value = analyse(r.value, info);
  info.setUnreachable();
}

analyse(t@TryStmt, info)
{
  info.beginCases();
  analyse(t.body, info);

  javaList(notNull(t.catches)).iter(fun(TryStmt$Catch c)=>{
    info.otherCase();
    info.begin();
    info.addVar(notNull(c.exnVar));
    c.t = notNull(c.tc).resolveToTC(info.typeMap);
    c.tc = null;
    analyse(c.body, info);
    info.end();
  });
  info.endCases();
  analyse(t.finallyBody, info);
}

// Local Variables:
// nice-xprogram: "nicec -d \"$HOME/Nice/classes\" --sourcepath=\"$HOME/Nice/src\" --classpath=\"$HOME/Nice/classes\""
// End:
