nice (0.7.1) unstable; urgency=low

  * Made "instanceof" work with classes defined in the same package.
  * Enhanced error message for invalid calls to anonymous functions.
  * Correctly infer the return type of all anonymous functions.
  * Bugfixes (break statement, ...).

 --

nice (0.7.0) unstable; urgency=low

  * Added the possibility to call "super" from a method implementation.
  * Added support for transient and volatile fields.

 -- Daniel Bonniot <bonniot@users.sourceforge.net>  Tue, 16 Jul 2002 12:59:47 +0200

nice (0.6) unstable; urgency=low

  * First stable version, based on 0.5.6
  * Fixed an error message for incorrect calls to anonymous functions.

 -- Daniel Bonniot <bonniot@users.sourceforge.net>  Thu, 11 Jul 2002 10:52:52 +0200

nice (0.5.6) unstable; urgency=low

  * Added the ".class" construct.
  * Completed the "instanceof" construct.
  * Calling new T[size] where T is a type variable now correctly returns 
    an array with optional element type. It can be filled with non-null values
    using the 'fill' function, e.g. 
        fill(new T[size], int i => f(x[i]))

 -- Daniel Bonniot <bonniot@users.sourceforge.net>  Sat,  6 Jul 2002 12:44:51 +0200

nice (0.5.5) unstable; urgency=low

  * Merged --classpath and --packagepath options into --classpath.
    This is simpler, and the behaviour is more logical.
  * The compiler is now reentrant. This should not make any difference
    when running from the command-line, but this is important to allow
    tools written in Java or Nice (like the Ant task, the testsuite, 
    an IDE) to call the compiler repetively, without starting a new JVM.
  * Fixed several bugs (export of optional functional types, ...).

 -- Daniel Bonniot <bonniot@users.sourceforge.net>  Fri, 21 Jun 2002 09:18:20 +0200

nice (0.5.4) unstable; urgency=low

  * Added short syntax for anonymous functions:
      int i => i+1          /* function of one argument */
      (int i, int j) => i+j /* function of several arguments */
  * Renamed `iter` to `foreach`. `iter` is still accepted, 
    but will probably be removed sometime in the future.
    Together with the syntax change for anonymous functions,
    this gives a nice and user-friendly syntax for iterations:
    
      names.foreach(String name => println(name));

  * Anonymous function cannot appear where a statement is expected 
    (some expressions can). This is good since an anonymous function which 
    is not called cannot have side-effects, and therefore this case was
    meaningless and probably buggy.
  * Fixed inference for possibly null variables in some complex cases.
  * Other bugfixes (valid error message when trying to implement a function).

 -- Daniel Bonniot <daniel@blanche>  Thu, 13 Jun 2002 16:30:27 +0200

nice (0.5.3) unstable; urgency=low

  * Testing a variable against null in a while or for loop condition now 
    allows to use it as non-null, until is it assigned a possibly null value.
  * Added many mathematical functions (sin, cos, round, max, min, ...). 
    This makes it unnecessary to prefix them with (java.lang.)Math.
  * It is now possible to use "." (current directory) in 
    the --classpath argument (this needed a workaround for 
    a probable bug in Sun's URLClassLoader, at least in 1.3).
  * Other bugfixes (creating arrays of "exotic" types, using arrays in field 
    initializers).

 -- Daniel Bonniot <bonniot@users.sourceforge.net>  Thu, 30 May 2002 12:57:46 +0200

nice (0.5.2) unstable; urgency=low

  * Calls to constructors now require using the fields' names.
  * Produce a meaningful message when a field is used without using
    an object to load it from.
  * Fixed parsing problem with (x.f)(e) as a statement.
  * Allow classpath to be set for external java classes without
    requiring to include Nice's bootstrap classes.
  * Functions are generated in a class "<packagename>.fun", so that
    they can be called from code written in Java.

 -- Daniel Bonniot <bonniot@users.sourceforge.net>  Tue,  7 May 2002 15:23:53 +0200

nice (0.5.1) unstable; urgency=low

  * Constructors now take the initial values of the object's fields as
    named arguments. A field declaration (inside a class declaration)
    now accepts an optional value after "=" (like in Java). This value 
    is used as the default if the field is not mentioned in a call to 
    the constructor. A field with no default value must be mentioned 
    in every call to the constructor.
  * Compile properly functions declared inside abstract interfaces.
  * Allow optional parameters to be used across modules.

 -- Daniel Bonniot <bonniot@users.sourceforge.net>  Mon, 29 Apr 2002 19:07:24 +0200

nice (0.5) unstable; urgency=low

  * Recognise the standard arrow notation for functional types
      int->int  (int,int)->int  (int->int)->int
    The old notation fun(int)(int) is deprecated and will be removed
    before version 1.0
  * Assigning a possibly null value to a variable of non-null type
    now produces an error instead of a warning.
  * Fixes bug that considered that 
      int a = 10, b;
    initializes both a and b to 10.
  * Fixed variable initialization analysis for do-while loops.
  * Make the compiler compatible with JDK 1.4
  * Fixed bug on MS-Windows with archive creation because of the 
    case-insensivity of the file system.
  * Fixed creation of archive from up-to-date packages stored in jar.
  * Accept anonymous functions that do nothing.
  * Editor (emacs) mode is now driven by command-line instead of inspecting
    the EMACS environment variable. This works around a bug in emacs 21.2.1
    and might be more portable. Also makes it easier to write a nice-mode
    for other editors without changing the existing code or script.

 -- Daniel Bonniot <bonniot@users.sourceforge.net>  Thu, 18 Apr 2002 14:44:13 +0200

nice (0.0.020405) unstable; urgency=low

  * Accepts constants:
      final String s1 = "Java style";
      final s3 = "The type of constants can be omitted";
  * More compatibility with Java:
    - checks that all statements are reachable
    - checks that local variables are assigned before use
    - classes can be declared public or private
    - ...
    More than half of the Jacks (java compiler testsuite) tests now pass!
    Most failures come from the difference in the syntax of method declaration.
  * Arrays of void values are forbidden. They most probably originate from
    a bug in the source program.
  * Better handling of inhomogenous tuples with native types (e.g. <int, long>)
  * Better wrapping/unwrapping code for arrays used as Collections.
  * Bugfixes for some polymorphic operations on arrays.
  * Bugfixed the bitshift operators >>, >>> and <<.

 -- Daniel Bonniot <bonniot@users.sourceforge.net>  Fri,  5 Apr 2002 13:01:17 +0200

nice (0.0.020226) unstable; urgency=low

  * Fixed bug that prevented using "this" in overriden native methods.
  * Better error messages for method calls with wrong number of arguments.
  * Accept methods with no implementation when their domain is empty.
  * Abstract interfaces are fully qualified just like classes and 
    correctly list their super-interfaces in the package interface.
    This really makes it possible to use them across packages.
  * Various other bugfixes.

 -- Daniel Bonniot <bonniot@users.sourceforge.net>  Tue, 26 Feb 2002 16:06:00 +0100

nice (0.0.020205) unstable; urgency=low

  * Allow multiple variables to be defined together, as in:
  	int x = 1, y;
  * Allow variable declaration in tuple affectation:
  	(int x, int y) = f(0);
  * Added 'break' and 'continue' statements.
  * Implemented 'do' loops.
  * Allow overriding of native java methods. It is now possible to 
    define a subclass of a java class or interface and override the methods.
  * Changed compilation scheme for method alternatives. This results in 
    shorter class files and more intuitive stack traces.

 -- Daniel Bonniot <bonniot@users.sourceforge.net>  Tue,  5 Feb 2002 13:15:03 +0100

nice (0.0.020105) unstable; urgency=low

  * Allowed to change the type of native class fields.
    This allows in particular to use System.out.println() and such again.
  * Fixed type of if expressions in the presence of non-nullness inference.

 -- Daniel Bonniot <bonniot@users.sourceforge.net>  Sat,  5 Jan 2002 14:50:37 +0100

nice (0.0.020102) unstable; urgency=low

  * Made nicec smart about when a local variable might be null.
  * Added the 'instanceof' and '~' (bitwise complement) keywords.
  * Do not stop at the first syntax or type error in more situations.
  * Ehanced error messages.
  * Emacs mode: allow to interactively set the compiler's location 
    (the string variable 'nice-program').

 -- Daniel Bonniot <bonniot@users.sourceforge.net>  Wed,  2 Jan 2002 20:31:31 +0100

nice (0.0.011219) unstable; urgency=low

  * Initial Release.

 -- Daniel Bonniot <bonniot@users.sourceforge.net>  Tue, 18 Dec 2001 23:23:32 +0100


