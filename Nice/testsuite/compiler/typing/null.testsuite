/// COMMENT Test typing related to nullness markers.
/// PASS
  /// toplevel
<T> void nonnull(!T);

nonnull(String x) {}
nonnull(x) {}

/// PASS
  ?int i = f();
  /// Toplevel

<T> ?T f(?T s = null, !T?->!T i = null) = s;

/// PASS
  /// Toplevel
void foo()
{
  javax.swing.JFrame f = new javax.swing.JFrame().init();
}

<java.awt.Component T> T init
  (T this,
   ?String propertyName = null,
   java.awt.event.ComponentEvent ?-> void componentHidden = null)
{                            
  return this;
}

/// PASS
  f(null, null);
  /// Toplevel
void f(?String, int ?-> int) {}

/// FAIL
  /* /// FAIL HERE */ f(null);
  /// Toplevel
void f(?String) {}
void f(?java.io.File) {}

/// PASS
  // Checks that ! is the minimum amond nullness markers.
  /// Toplevel
interface Method <R,A> {
   R call(A a);
}

abstract class OOMemoize<R,A> implements Method<R,A> {
   HashMap<A,R> table = new HashMap();

   R protomethod(A a);
}

<R,A> call(OOMemoize this, a){
   if (this.table.containsKey(a))
     return notNull(this.table.get(a));
   else {
      let R m = this.protomethod(a);
      this.table.put(a,m);
      return m;
   }
}

/// PASS
  /// package a
  /// Toplevel
<T> !T foo(T x)
{
  assert x != null;
  return x;
}
  /// package b import a
  String s = foo("");

/// PASS
  /// Toplevel
<W> !W foo(W x, !W y) = y;

/// PASS
  /// Toplevel
<W> !W foo(!W x, W y) = x;

/// PASS
  /// package a
  /// Toplevel
<T> !T foo(T x, !T y) = x != null ? x : y;
  /// package b import a
  String s = foo(null, "");
