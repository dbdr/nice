/// PASS
  // A fonction A->B can be used where A->void is expected.

  List<String> l = new LinkedList();
  StringBuffer buffer = new StringBuffer( );
  l.add( "foo" );
  l.add( "bar" );
  l.foreach( (String s) => buffer.append( s ) );

  assert buffer.toString().equals("foobar");

/// PASS
  foo(0);
  foo(1);
  /// Toplevel
void fooZero() {}

void foo(int x)
{
  if (x == 0)
    return fooZero();

  // do something else
}

/// PASS
  let a = new A();
  a.add(1);
  a.add(0);
  /// Toplevel
class A
{
  StringBuffer s = new StringBuffer();

  void add(int x)
  {
    if (x == 0)
      return s.append("ZERO\n");

    // do something complex
  }
}

/// PASS
  /// Toplevel
void foo(int i) {}
void goo() = foo(3);

/// FAIL
  void /*///FAIL HERE*/ x;

/// FAIL
  /// Toplevel
var void /*///FAIL HERE*/ x = println("");

/// FAIL
  /// Toplevel
void f(/*///FAIL HERE*/ void x) {}

/// FAIL
  /// Toplevel
void f(/*///FAIL HERE*/ void) {}

/// PASS
  /// Toplevel
void f() = 1;

/// PASS
  /// Toplevel
void f() = true;

/// PASS
  /// Toplevel
boolean doSomethingAndReturnAStatusBoolean() = false;

void f() = doSomethingAndReturnAStatusBoolean();

/// PASS
  /// Toplevel
  void f() = null;

/// PASS
  /// Toplevel
  void foo() = bar();
  ?String bar() = "abc";

/// PASS
  /// Toplevel
  void foo() { if (1 == 2) return bar(); }
  ?String bar() = "abc";

/// FAIL
  let /*///FAIL HERE*/ x = foo();
  /// Toplevel
  void foo() {}

/// FAIL
  var /*///FAIL HERE*/ x = foo();
  /// Toplevel
  void foo() {}
