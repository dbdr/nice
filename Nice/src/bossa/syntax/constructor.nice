/**************************************************************************/
/*                                N I C E                                 */
/*             A high-level object-oriented research language             */
/*                        (c) Daniel Bonniot 2004                         */
/*                                                                        */
/*  This program is free software; you can redistribute it and/or modify  */
/*  it under the terms of the GNU General Public License as published by  */
/*  the Free Software Foundation; either version 2 of the License, or     */
/*  (at your option) any later version.                                   */
/*                                                                        */
/**************************************************************************/

package bossa.syntax;

import bossa.util.*;
//import mlsub.typing.Constraint;
//import mlsub.typing.Monotype;

/**
   An object constructor.

 */
abstract class Constructor extends MethodDeclaration
{
  NiceClass classe;
  final boolean isDefault;

  gnu.expr.Expression getInitializationCode(boolean implicitThis);

  void addConstructorCallSymbol()
  {
    let type = new mlsub.typing.Polytype(this.getType().getConstraint(),
       new mlsub.typing.FunType(this.getArgTypes(), nice.tools.typing.PrimitiveType.voidType));
    classe.addConstructorCallSymbol(createConstructorCallSymbol(this, name, type));
  }

  printInterface(s)
  { 
    throw new Error("Should not be called");
  }

  explainWhyMatchFails(arguments)
  {
    if (! isDefault)
      return super;

    String name = classe.getName().toString();

    StringBuffer res = new StringBuffer();
    res.append("Class ").append(name);

    //Arguments where none expected
    if (parameters.size == 0)
      {
        res.append(" has no fields. Therefore its constructor takes no arguments.");
        return res.toString();
      }

    //No such field
    List<String> nonmatching = notNull(arguments).noMatchByName(parameters);
    if (!nonmatching.isEmpty())
      {
        res.append(" has no field named "+nonmatching[0]);
        return res.toString();
      }

    //Required fields missing, or else too many arguments
    // - three different messages depending on whether
    //an explanation of the syntax is necessary
    res = new StringBuffer();
    List<FormalParameters.Parameter> missing = notNull(arguments).missingArgs(parameters);
    List<FormalParameters.Parameter> fieldsToList;

    if (notNull(arguments).size() == 0)
      {
        res.append("Fields of class ").append(name)
          .append(" require initial values.\n");
        res.append(this.syntaxExample())
          .append("Class ").append(name).append(" has the following fields:\n");
        fieldsToList = parameters.asList();
      }
    else if (missing.size() > 0)
      {
        res.append("The following fields require initial values:\n");
        fieldsToList = missing;
      }
    else
      {
        res.append("Too many arguments when constructing new instance of class ")
          .append(name)
          .append(".\n")
          .append("The constructor accepts the following arguments:\n" );
        fieldsToList = parameters.asList();
      }
    for (field : fieldsToList)
      {
        res.append("  ")
          .append(field)
          .append("\n");
      }
    return res.toString();

  }

  private String syntaxExample()
  {
    String name = classe.getName().toString();
    StringBuffer res = new StringBuffer();
    res.append("Use the following syntax:\n")
      .append("  new ").append(name).append("(");

    let Iterator<FormalParameters.Parameter> params = parameters.getRequiredParameters().iterator();
    int paramCount = 0;
    int len = name.length();
    while(params.hasNext())
      {
        FormalParameters.Parameter param = params.next();
        if (paramCount != 0)
          res.append(", ");
        if (paramCount == 3 && params.hasNext())
          {
            res.append('\n');
            for(int i = 0; i < len; i++) {res.append(' ');}
            res.append("        ");
            paramCount = 0;
          }
        if (param instanceof FormalParameters.NamedParameter)
          res.append(param.getName()).append(": value");
        else
          res.append("value");
        paramCount++;
      }
    res.append(")\n\n");
    return res.toString();
  }
}