
/**************************************************************************/
/*                                                                        */
/*  This program is free software; you can redistribute it and/or modify  */
/*  it under the terms of the GNU General Public License as published by  */
/*  the Free Software Foundation; either version 2 of the License, or     */
/*  (at your option) any later version.                                   */
/*                                                                        */
/**************************************************************************/


package nice.ui.common;



/**
 * DECLARATION of methods to remove nice.ui.swing.NiceListener from nice.ui.swing.NiceListenerHandler
 */

public <AncestorListenerHandler H> void removeNiceAncestorListener(H,NiceAncestorListener);
public <CaretListenerHandler H> void removeNiceCaretListener(H,NiceCaretListener);
public <CellEditorListenerHandler H> void removeNiceCellEditorListener(H,NiceCellEditorListener);
public <ChangeListenerHandler H> void removeNiceChangeListener(H,NiceChangeListener);
public <DocumentListenerHandler H> void removeNiceDocumentListener(H,NiceDocumentListener);
public <HyperlinkListenerHandler H> void removeNiceHyperlinkListener(H,NiceHyperlinkListener);
public <InternalFrameListenerHandler H> void removeNiceInternalFrameListener(H,NiceInternalFrameListener);
public <ListDataListenerHandler H> void removeNiceListDataListener(H,NiceListDataListener);
public <ListSelectionListenerHandler H> void removeNiceListSelectionListener(H,NiceListSelectionListener);
public <MenuDragMouseListenerHandler H> void removeNiceMenuDragMouseListener(H,NiceMenuDragMouseListener);
public <MenuKeyListenerHandler H> void removeNiceMenuKeyListener(H,NiceMenuKeyListener);
public <MenuListenerHandler H> void removeNiceMenuListener(H,NiceMenuListener);
public <PopupMenuListenerHandler H> void removeNicePopupMenuListener(H,NicePopupMenuListener);
public <TableColumnModelListenerHandler H> void removeNiceTableColumnModelListener(H,NiceTableColumnModelListener);
public <TableModelListenerHandler H> void removeNiceTableModelListener(H,NiceTableModelListener);
public <TreeExpansionListenerHandler H> void removeNiceTreeExpansionListener(H,NiceTreeExpansionListener);
public <TreeWillExpandListenerHandler H> void removeNiceTreeWillExpandListener(H,NiceTreeWillExpandListener);
public <TreeModelListenerHandler H> void removeNiceTreeModelListener(H,NiceTreeModelListener);
public <TreeSelectionListenerHandler H> void removeNiceTreeSelectionListener(H,NiceTreeSelectionListener);
public <UndoableEditListenerHandler H> void removeNiceUndoableEditListener(H,NiceUndoableEditListener);



/**
 * DEFINITION of methods to remove nice.ui.awt.NiceListener from nice.ui.awt.NiceListenerHandler
 */

removeNiceActionListener(javax.swing.AbstractButton this,listener) = this.removeActionListener(listener);
removeNiceActionListener(javax.swing.JFileChooser this,listener) = this.removeActionListener(listener);
removeNiceActionListener(javax.swing.Timer this,listener) = this.removeActionListener(listener);
removeNiceActionListener(javax.swing.DefaultButtonModel this,listener) = this.removeActionListener(listener);
removeNiceActionListener(javax.swing.JComboBox this,listener) = this.removeActionListener(listener);
removeNiceActionListener(javax.swing.JTextField this,listener) = this.removeActionListener(listener);
removeNiceAdjustmentListener(javax.swing.JScrollBar this,listener) = this.removeAdjustmentListener(listener);
removeNiceItemListener(javax.swing.AbstractButton this,listener) = this.removeItemListener(listener);
removeNiceItemListener(javax.swing.DefaultButtonModel this,listener) = this.removeItemListener(listener);
removeNiceItemListener(javax.swing.JComboBox this,listener) = this.removeItemListener(listener);
removeNiceAncestorListener(javax.swing.JComponent this,listener) = this.removeAncestorListener(listener);
removeNiceCaretListener(javax.swing.text.JTextComponent this,listener) = this.removeCaretListener(listener);
removeNiceCellEditorListener(javax.swing.AbstractCellEditor this,listener) = this.removeCellEditorListener(listener);
removeNiceChangeListener(javax.swing.AbstractButton this,listener) = this.removeChangeListener(listener);
removeNiceChangeListener(javax.swing.JSlider this,listener) = this.removeChangeListener(listener);
removeNiceChangeListener(javax.swing.JProgressBar this,listener) = this.removeChangeListener(listener);
removeNiceChangeListener(javax.swing.DefaultSingleSelectionModel this,listener) = this.removeChangeListener(listener);
removeNiceChangeListener(javax.swing.DefaultBoundedRangeModel this,listener) = this.removeChangeListener(listener);
removeNiceChangeListener(javax.swing.DefaultButtonModel this,listener) = this.removeChangeListener(listener);
removeNiceChangeListener(javax.swing.text.DefaultCaret this,listener) = this.removeChangeListener(listener);
removeNiceChangeListener(javax.swing.JViewport this,listener) = this.removeChangeListener(listener);
removeNiceChangeListener(javax.swing.JTabbedPane this,listener) = this.removeChangeListener(listener);
removeNiceDocumentListener(javax.swing.text.AbstractDocument this,listener) = this.removeDocumentListener(listener);
removeNiceHyperlinkListener(javax.swing.JEditorPane this,listener) = this.removeHyperlinkListener(listener);
removeNiceInternalFrameListener(javax.swing.JInternalFrame this,listener) = this.removeInternalFrameListener(listener);
removeNiceListDataListener(javax.swing.AbstractListModel this,listener) = this.removeListDataListener(listener);
removeNiceListSelectionListener(javax.swing.JList this,listener) = this.removeListSelectionListener(listener);
removeNiceListSelectionListener(javax.swing.DefaultListSelectionModel this,listener) = this.removeListSelectionListener(listener);
removeNiceMenuDragMouseListener(javax.swing.JMenuItem this,listener) = this.removeMenuDragMouseListener(listener);
removeNiceMenuKeyListener(javax.swing.JMenuItem this,listener) = this.removeMenuKeyListener(listener);
removeNiceMenuListener(javax.swing.JMenu this,listener) = this.removeMenuListener(listener);
removeNicePopupMenuListener(javax.swing.JPopupMenu this,listener) = this.removePopupMenuListener(listener);
removeNiceTreeExpansionListener(javax.swing.JTree this,listener) = this.removeTreeExpansionListener(listener);
removeNiceTreeWillExpandListener(javax.swing.JTree this,listener) = this.removeTreeWillExpandListener(listener);
removeNiceTreeModelListener(javax.swing.tree.DefaultTreeModel this,listener) = this.removeTreeModelListener(listener);
removeNiceTreeSelectionListener(javax.swing.JTree this,listener) = this.removeTreeSelectionListener(listener);
removeNiceTreeSelectionListener(javax.swing.tree.DefaultTreeSelectionModel this,listener) = this.removeTreeSelectionListener(listener);

//JDK1.4  removeNicePopupMenuListener(javax.swing.JComboBox this,listener) = this.removePopupMenuListener(listener);
//JDK1.4  removeNiceChangeListener(javax.swing.AbstractSpinnerModel this,listener) = this.removeChangeListener(listener);
//JDK1.4  removeNiceChangeListener(javax.swing.JSpinner this,listener) = this.removeChangeListener(listener);


removeNiceVetoableChangeListener(javax.swing.JComponent this,listener)
{
	this.removeVetoableChangeListener(listener);
	//this.removeInAccessibleListener(listener,vetoableChangeListeners);
}

removeNicePropertyChangeListener(javax.swing.AbstractAction this,listener)
{
	this.removePropertyChangeListener(listener);
	//this.removeInAccessibleListener(listener,propertyChangeListeners);
}

removeNicePropertyChangeListener(javax.swing.tree.DefaultTreeSelectionModel this,listener)
{
	this.removePropertyChangeListener(listener);
	//this.removeInAccessibleListener(listener,propertyChangeListeners);
}

removeNicePropertyChangeListener(javax.swing.table.TableColumn this,listener)
{
	this.removePropertyChangeListener(listener);
	//this.removeInAccessibleListener(listener,propertyChangeListeners);
}

removeNiceTableModelListener(javax.swing.table.TableModel this,listener)
{
	this.removeTableModelListener(listener);
	//this.removeInAccessibleListener(listener,tableModelListeners);
}

removeNiceTableColumnModelListener(javax.swing.table.TableColumnModel this,listener)
{
	this.removeColumnModelListener(listener);
	//this.removeInAccessibleListener(listener,tableColumnModelListeners);
}

removeNiceChangeListener(javax.swing.MenuSelectionManager this,listener)
{
	this.removeChangeListener(listener);
	//this.removeInAccessibleListener(listener,changeListeners);
}

removeNiceChangeListener(javax.swing.colorchooser.DefaultColorSelectionModel this,listener)
{
	this.removeChangeListener(listener);
	//this.removeInAccessibleListener(listener,changeListeners);
}

removeNiceUndoableEditListener(javax.swing.undo.UndoableEditSupport this,listener)
{
	this.removeUndoableEditListener(listener);
	//this.removeInAccessibleListener(listener,undoableEditListeners);
}


 

/**
 * DEFINITION of functions to remove all nice.ui.swing.NiceListener 
 * from all nice.ui.swing.NiceListenerHandler
 */
 
public <AncestorListenerHandler H> void removeAncestorListener
  (H this,
   AncestorEvent ?-> void ancestorAdded = null,
   AncestorEvent ?-> void ancestorMoved = null,
   AncestorEvent ?-> void ancestorRemoved = null
   )
{
	NiceAncestorListener[?] listeners = this.getNiceAncestorListeners();
  if(listeners == null) return;
  listeners.foreach
    (NiceAncestorListener l =>
     {
       if(ancestorAdded != null && l.getAncestorAdded() == ancestorAdded) l.setAncestorAdded(null);
       if(ancestorMoved != null && l.getAncestorMoved() == ancestorMoved) l.setAncestorMoved(null);
       if(ancestorRemoved != null && l.getAncestorRemoved() == ancestorRemoved) l.setAncestorRemoved(null);
     }
     );
}
 
public <CaretListenerHandler H> void removeCaretListener
  (H this,
   CaretEvent -> void caretUpdate
   ) 
{
	NiceCaretListener[?] listeners = this.getNiceCaretListeners();
  if(listeners == null) return;
  listeners.foreach
    (NiceCaretListener l =>
     {
       if(l.getCaretUpdate() == caretUpdate) l.setCaretUpdate(null);
     }
     );
}
 
public <CellEditorListenerHandler H> void removeCellEditorListener
  (H this,
   ChangeEvent ?-> void editingCanceled = null,
   ChangeEvent ?-> void editingStopped = null
   )
{
	NiceCellEditorListener[?] listeners = this.getNiceCellEditorListeners();
  if(listeners == null) return;
  listeners.foreach
    (NiceCellEditorListener l =>
     {
       if(editingCanceled != null && l.getEditingCanceled() == editingCanceled) l.setEditingCanceled(null);
       if(editingStopped != null && l.getEditingStopped() == editingStopped) l.setEditingStopped(null);
     }
     );
}
 
public <ChangeListenerHandler H> void removeChangeListener
  (H this,
   ChangeEvent -> void stateChanged
   ) 
{
	NiceChangeListener[?] listeners = this.getNiceChangeListeners();
  if(listeners == null) return;
  listeners.foreach
    (NiceChangeListener l =>
     {
       if(l.getStateChanged() == stateChanged) l.setStateChanged(null);
     }
     );
} 
 
public <DocumentListenerHandler H> void removeDocumentListener
  (H this,
   DocumentEvent ?-> void changedUpdate = null,
   DocumentEvent ?-> void insertUpdate = null,
   DocumentEvent ?-> void removeUpdate = null
   ) 
{
	NiceDocumentListener[?] listeners = this.getNiceDocumentListeners();
  if(listeners == null) return;
  listeners.foreach
    (NiceDocumentListener l =>
     {
       if(changedUpdate != null && l.getChangedUpdate() == changedUpdate) l.setChangedUpdate(null);
       if(insertUpdate != null && l.getInsertUpdate() == insertUpdate) l.setInsertUpdate(null);
       if(removeUpdate != null && l.getRemoveUpdate() == removeUpdate) l.setRemoveUpdate(null);
     }
     );
} 
 
public <HyperlinkListenerHandler H> void removeHyperlinkListener
  (H this,
   HyperlinkEvent -> void hyperlinkUpdate
   )
{
	NiceHyperlinkListener[?] listeners = this.getNiceHyperlinkListeners();
  if(listeners == null) return;
  listeners.foreach
    (NiceHyperlinkListener l =>
     {
       if(l.getHyperlinkUpdate() == hyperlinkUpdate) l.setHyperlinkUpdate(null);
     }
     );
}  
 
public <InternalFrameListenerHandler H> void removeInternalFrameListener
  (H this,
   InternalFrameEvent ?-> void internalFrameActivated = null,
   InternalFrameEvent ?-> void internalFrameClosed = null,
   InternalFrameEvent ?-> void internalFrameClosing = null,
   InternalFrameEvent ?-> void internalFrameDeactivated = null,
   InternalFrameEvent ?-> void internalFrameDeiconified = null,
   InternalFrameEvent ?-> void internalFrameIconified = null,
   InternalFrameEvent ?-> void internalFrameOpened = null
   ) 
{
	NiceInternalFrameListener[?] listeners = this.getNiceInternalFrameListeners();
  if(listeners == null) return;
  listeners.foreach
    (NiceInternalFrameListener l =>
     {
       if(internalFrameActivated != null && l.getInternalFrameActivated() == internalFrameActivated) l.setInternalFrameActivated(null);
       if(internalFrameClosed != null && l.getInternalFrameClosed() == internalFrameClosed) l.setInternalFrameClosed(null);
       if(internalFrameClosing != null && l.getInternalFrameClosing() == internalFrameClosing) l.setInternalFrameClosing(null);
       if(internalFrameDeactivated != null && l.getInternalFrameDeactivated() == internalFrameDeactivated) l.setInternalFrameDeactivated(null);
       if(internalFrameDeiconified != null && l.getInternalFrameDeiconified() == internalFrameDeiconified) l.setInternalFrameDeiconified(null);
       if(internalFrameIconified != null && l.getInternalFrameIconified() == internalFrameIconified) l.setInternalFrameIconified(null);
       if(internalFrameOpened != null && l.getInternalFrameOpened() == internalFrameOpened) l.setInternalFrameOpened(null);
     }
     );
} 
 
public <ListDataListenerHandler H> void removeListDataListener
  (H this,
   ListDataEvent ?-> void contentsChanged = null,
   ListDataEvent ?-> void intervalAdded = null,
   ListDataEvent ?-> void intervalRemoved = null
   ) 
{
	NiceListDataListener[?] listeners = this.getNiceListDataListeners();
  if(listeners == null) return;
  listeners.foreach
    (NiceListDataListener l =>
     {
       if(contentsChanged != null && l.getContentsChanged() == contentsChanged) l.setContentsChanged(null);
       if(intervalAdded != null && l.getIntervalAdded() == intervalAdded) l.setIntervalAdded(null);
       if(intervalRemoved != null && l.getIntervalRemoved() == intervalRemoved) l.setIntervalRemoved(null);
     }
     );
} 
 
public <ListSelectionListenerHandler H> void removeListSelectionListener
  (H this,
   ListSelectionEvent -> void listSelectionValueChanged
   )  
{
	NiceListSelectionListener[?] listeners = this.getNiceListSelectionListeners();
  if(listeners == null) return;
  listeners.foreach
    (NiceListSelectionListener l =>
     {
       if(l.getListSelectionValueChanged() == listSelectionValueChanged) l.setListSelectionValueChanged(null);
     }
     );
}  
 
public <MenuDragMouseListenerHandler H> void removeMenuDragMouseListener
  (H this,
   MenuDragMouseEvent ?-> void menuDragMouseDragged = null,
   MenuDragMouseEvent ?-> void menuDragMouseEntered = null,
   MenuDragMouseEvent ?-> void menuDragMouseExited = null,
   MenuDragMouseEvent ?-> void menuDragMouseReleased = null
   )
{
	NiceMenuDragMouseListener[?] listeners = this.getNiceMenuDragMouseListeners();
  if(listeners == null) return;
  listeners.foreach
    (NiceMenuDragMouseListener l =>
     {
       if(menuDragMouseDragged != null && l.getMenuDragMouseDragged() == menuDragMouseDragged) l.setMenuDragMouseDragged(null);
       if(menuDragMouseEntered != null && l.getMenuDragMouseEntered() == menuDragMouseEntered) l.setMenuDragMouseEntered(null);
       if(menuDragMouseExited != null && l.getMenuDragMouseExited() == menuDragMouseExited) l.setMenuDragMouseExited(null);
       if(menuDragMouseReleased != null && l.getMenuDragMouseReleased() == menuDragMouseReleased) l.setMenuDragMouseReleased(null);
     }
     );
}    
 
public <MenuKeyListenerHandler H> void removeMenuKeyListener
  (H this,
   MenuKeyEvent ?-> void menuKeyPressed = null,
   MenuKeyEvent ?-> void menuKeyReleased = null,
   MenuKeyEvent ?-> void menuKeyTyped = null
   )
{
	NiceMenuKeyListener[?] listeners = this.getNiceMenuKeyListeners();
  if(listeners == null) return;
  listeners.foreach
    (NiceMenuKeyListener l =>
     {
       if(menuKeyPressed != null && l.getMenuKeyPressed() == menuKeyPressed) l.setMenuKeyPressed(null);
       if(menuKeyReleased != null && l.getMenuKeyReleased() == menuKeyReleased) l.setMenuKeyReleased(null);
       if(menuKeyTyped != null && l.getMenuKeyTyped() == menuKeyTyped) l.setMenuKeyTyped(null);
     }
     );
}
 
public <MenuListenerHandler H> void removeMenuListener
  (H this,
   MenuEvent ?-> void menuCanceled = null,
   MenuEvent ?-> void menuDeselected = null,
   MenuEvent ?-> void menuSelected = null
   )
{
	NiceMenuListener[?] listeners = this.getNiceMenuListeners();
  if(listeners == null) return;
  listeners.foreach
    (NiceMenuListener l =>
     {
       if(menuCanceled != null && l.getMenuCanceled() == menuCanceled) l.setMenuCanceled(null);
       if(menuDeselected != null && l.getMenuDeselected() == menuDeselected) l.setMenuDeselected(null);
       if(menuSelected != null && l.getMenuSelected() == menuSelected) l.setMenuSelected(null);
     }
     );
}    
 
public <PopupMenuListenerHandler H> void removePopupMenuListener
  (H this,
   PopupMenuEvent ?-> void popupMenuCanceled = null,
   PopupMenuEvent ?-> void popupMenuWillBecomeInvisible = null,
   PopupMenuEvent ?-> void popupMenuWillBecomeVisible = null
   )
{
	NicePopupMenuListener[?] listeners = this.getNicePopupMenuListeners();
  if(listeners == null) return;
  listeners.foreach
    (NicePopupMenuListener l =>
     {
       if(popupMenuCanceled != null && l.getPopupMenuCanceled() == popupMenuCanceled) l.setPopupMenuCanceled(null);
       if(popupMenuWillBecomeInvisible != null && l.getPopupMenuWillBecomeInvisible() == popupMenuWillBecomeInvisible) l.setPopupMenuWillBecomeInvisible(null);
       if(popupMenuWillBecomeVisible != null && l.getPopupMenuWillBecomeVisible() == popupMenuWillBecomeVisible) l.setPopupMenuWillBecomeVisible(null);
     }
     );
}
 
public <TableColumnModelListenerHandler H> void removeTableColumnModelListener
  (H this,
   TableColumnModelEvent ?-> void columnAdded = null,
   TableColumnModelEvent ?-> void columnMoved = null,
   TableColumnModelEvent ?-> void columnRemoved = null,
   ListSelectionEvent ?-> void columnSelectionChanged = null,
   ChangeEvent ?-> void columnMarginChanged = null
   ) 
{
	NiceTableColumnModelListener[?] listeners = this.getNiceTableColumnModelListeners();
  if(listeners == null) return;
  listeners.foreach
    (NiceTableColumnModelListener l =>
     {
       if(columnAdded != null && l.getColumnAdded() == columnAdded) l.setColumnAdded(null);
       if(columnMoved != null && l.getColumnMoved() == columnMoved) l.setColumnMoved(null);
       if(columnRemoved != null && l.getColumnRemoved() == columnRemoved) l.setColumnRemoved(null);
       if(columnSelectionChanged != null && l.getColumnSelectionChanged() == columnSelectionChanged) l.setColumnSelectionChanged(null);
       if(columnMarginChanged != null && l.getColumnMarginChanged() == columnMarginChanged) l.setColumnMarginChanged(null);
     }
     );
}      
 
public <TableModelListenerHandler H> void removeTableModelListener
  (H this,
   TableModelEvent -> void tableChanged
   )  
{
	NiceTableModelListener[?] listeners = this.getNiceTableModelListeners();
  if(listeners == null) return;
  listeners.foreach
    (NiceTableModelListener l =>
     {
       if(l.getTableChanged() == tableChanged) l.setTableChanged(null);
     }
     );
}    
 
public <TreeExpansionListenerHandler H> void removeTreeExpansionListener
  (H this,
   TreeExpansionEvent ?-> void treeCollapsed = null,
   TreeExpansionEvent ?-> void treeExpanded = null
   ) 
{
	NiceTreeExpansionListener[?] listeners = this.getNiceTreeExpansionListeners();
  if(listeners == null) return;
  listeners.foreach
    (NiceTreeExpansionListener l =>
     {
       if(treeCollapsed != null && l.getTreeCollapsed() == treeCollapsed) l.setTreeCollapsed(null);
       if(treeExpanded != null && l.getTreeExpanded() == treeExpanded) l.setTreeExpanded(null);
     }
     );
} 
 
public <TreeModelListenerHandler H> void removeTreeModelListener
  (H this,
   TreeModelEvent ?-> void treeNodesChanged = null,
   TreeModelEvent ?-> void treeNodesInserted = null,
   TreeModelEvent ?-> void treeNodesRemoved = null,
   TreeModelEvent ?-> void treeStructureChanged = null
   ) 
{
	NiceTreeModelListener[?] listeners = this.getNiceTreeModelListeners();
  if(listeners == null) return;
  listeners.foreach
    (NiceTreeModelListener l =>
     {
       if(treeNodesChanged != null && l.getTreeNodesChanged() == treeNodesChanged) l.setTreeNodesChanged(null);
       if(treeNodesInserted != null && l.getTreeNodesInserted() == treeNodesInserted) l.setTreeNodesInserted(null);
       if(treeNodesRemoved != null && l.getTreeNodesRemoved() == treeNodesRemoved) l.setTreeNodesRemoved(null);
       if(treeStructureChanged != null && l.getTreeStructureChanged() == treeStructureChanged) l.setTreeStructureChanged(null);
     }
     );
}
 
public <TreeSelectionListenerHandler H> void removeTreeSelectionListener
  (H this,
   TreeSelectionEvent -> void treeSelectionValueChanged
   ) 
{
	NiceTreeSelectionListener[?] listeners = this.getNiceTreeSelectionListeners();
  if(listeners == null) return;
  listeners.foreach
    (NiceTreeSelectionListener l =>
     {
       if(l.getTreeSelectionValueChanged() == treeSelectionValueChanged) l.setTreeSelectionValueChanged(null);
     }
     );
}  
 
public <TreeWillExpandListenerHandler H> void removeTreeWillExpandListener
  (H this,
   TreeExpansionEvent ?-> void treeWillCollapse = null,
   TreeExpansionEvent ?-> void treeWillExpand = null
   )  
{
	NiceTreeWillExpandListener[?] listeners = this.getNiceTreeWillExpandListeners();
  if(listeners == null) return;
  listeners.foreach
    (NiceTreeWillExpandListener l =>
     {
       if(treeWillCollapse != null && l.getTreeWillCollapse() == treeWillCollapse) l.setTreeWillCollapse(null);
       if(treeWillExpand != null && l.getTreeWillExpand() == treeWillExpand) l.setTreeWillExpand(null);
     }
     );
} 
 
public <UndoableEditListenerHandler H> void removeUndoableEditListener
  (H this,
   UndoableEditEvent -> void undoableEditHappened
   ) 
{
	NiceUndoableEditListener[?] listeners = this.getNiceUndoableEditListeners();
  if(listeners == null) return;
  listeners.foreach
    (NiceUndoableEditListener l =>
     {
       if(l.getUndoableEditHappened() == undoableEditHappened) l.setUndoableEditHappened(null);
     }
     );
}