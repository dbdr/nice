nice (0.7.7) unstable; urgency=low

  * The '@' in '@null' patterns is deprecated, '@' should be omitted.
  * Method can also dispatch on integer and character literals, but there is
    always a default case required. An example:
      long fac(long n);
      fac(n@0) = 1;
      fac(n@long) = n*fac(n-1);
    Another example using the shorter syntax:
      int fib(int n);
      fib(1) = 1;
      fib(2) = 1;
      fib(n) = fib(n-2) + fib(n-1);
  * Methods taking a boolean parameter can now dispatch on the cases
    'true' and 'false':
      boolean not(boolean);
      not(true) = false;
      not(false) = true;
  * The 'fun' keyword is deprecated now, you can leave it away.
  * New policy for typing calls to Java methods. By default, the typing
    is more convenient, considering arguments as possibly null, and 
    results as non-null. With the '-- strict' compiler option, use a stricter
    heuristics.
    Additionally, arrays are always considered to have non-null component 
    types.
    Final fields are considered non-null.
  * Static native methods are not (wrongly) imported in the global name space
    anymore. One can just use them as in Java, by prefixing with the class 
    name:
      String s = Integer.toHexString(100);
    It's now also possible to refer to static methods as anonymous functions:
      String[] s = integerArray.map(Integer.toHexString);
  * Allow the ?(T->U) syntax for optional functional types as an alternative
    to T ?-> U, and void -> Type as an alternative to () -> Type.
  * Added the 'concat' function on arrays.
  * Faster compilation for large projects with many classes.
  * Bugfixes (anonymous functions inside functionals with constracts,
    typechecking loop tests, other fixes to reduce the difference between
    what the parser accepts and the compiler can handle, ...).

 --

nice (0.7.6) unstable; urgency=low

  * Implemented optional parameters' default value refering to 
    previous parameters, like 'to' in the following example:
      <T> T[] slice(T[] array, int from = 0, int to = array.length - 1);
  * Added syntax for multiple comparisons (thanks to Arjan Boeijink):
      if (0 < i < N) ...
  * Fixed several issues with generic collections.
    In particular, for List<int> there was an ambiguity between 
      remove(int) and remove(T) (since T=int).
    Therefore we renamed remove(int) into removeAt(int).
  * Added float(_) and char(_) primitives for value conversion.
  * Allows anonymous functions to be made of one statement without braces:
      (char c => if (Character.isLetter(c)) wordBuffer.append(c))
      (char c => assert c != 'Z')
  * Method type parameters can be constrained to be non null by prefixing
    with the ! character, just like class type parameters.
  * 'this' can now be left implicit even in implementations of methods
    declared externally to a class.
  * Parser support for public-read and private-write fields (experimental).
  * Performance improvement for anonymous functions and for polymorphic 
    usage of arrays.
  * Improved references to source lines in the bytecode (stack traces).
  * Bugfixes (using anonymous functions while overriding native methods, 
    automatic array conversions in polymorphic code, nested literal primitive 
    arrays, mutually dependant packages, ...).
  * For convenience of command-line tools (shells) with automatic completion, 
    we allow a directory name instead of the corresponding package name.
    That is, we replace '/' (which is illegal in package names) by '.'.
    It is therefore possible to type 'nicec my/package/'.

 -- Daniel Bonniot <bonniot@users.sourceforge.net>  Tue, 21 Jan 2003 17:20:36 +0100

nice (0.7.5) unstable; urgency=low

  * Addition of design by contract: assertions, pre- and post-conditions.
  * A class type parameter can now be constrained to be a non-option type,
    by prefixing it with the ! character:
      class Elem<!A> { ... }
  * Addition of the || operator on optional values:
      e1 || e2
    evalues e1 and returns its value if it is not null (without evaluating e2).
    If e1 evaluates to null it returns the value of e2.
    It is equivalent to e1 != null ? e1 : e2, except e1 is not evaluated twice.
    This operator is handy to sequence expression to produce a value:
      find(n@Node, elem) = find(n.left, elem) || find(n.right, elem);
  * New numeric narrowing functions: int(x), short(x) and byte(x),
    equivalent to Java's (int), (short) and (byte).
  * Short anonymous functions made of one assignment now return void. Allows:
      [1,2,3].foreach(int j => i += j);
    instead of 
      [1,2,3].foreach(int j => { i += j; });
  * Arrays created with 0 elements have a non-option component type:
      String[] s0 = new String[0];
      ?String[] s1 = new String[1];
    They can still be used with option component type:
      ?String[] s0 = new String[0];
  * Changed suffix notation for multiple-dimension array types, to match 
    initialization. Dimensions are listed in order, instead of reverse order.
    For instance,
      String[][?]
    is the type of a non-null array of optional arrays of strings.
  * Changed typing for creation of arrays with multiple dimensions.
    The dimensions that are not initialized are given an option type:
      String[][?] s = new String[1][];
    This accounts for the fact that s[0] == null, thus ensuring type safety.
  * Forbade @null patterns for method arguments that cannot be null.
  * Report duplicate implementations of a method with the same patterns.
  * Bugfixes (compilation of tuples with primitive types using subtyping,
    clotures, returning a value inside try/finally or synchronized, ...).
  * Fixed the nicec script on Max OS X, when gcj is not present.

 -- Daniel Bonniot <bonniot@users.sourceforge.net>  Wed, 20 Nov 2002 13:32:55 +0100

nice (0.7.4) unstable; urgency=low

  * Added support for Generic Java types. This allows in particular to use 
    java.util.* collections with parameterized types (e.g. List<String>).
    These replace the previous (very partial) collections from nice.lang.
    Functionals on collections (foreach, map, has, ...) are applicable
    to java.util Collections.
  * Allow class type parameters to be constrained:
      class MyClass<Bound P> { ...}
    This allow MyClass to be instantiated only on subtypes of Bound
    in the constructor and the class methods.
  * Fixed error message for calling new on an interface or Java abstract
    class, and when a class or interface (indirectly) implements itself.
  * Allow the <T> syntax to introduce type variables, in addition to
    <Any T> (that is, any is optional). This is consistent with GJ, 
    and the syntax for class type parameters.
  * Improved overloading resolution when used on functions with optional
    arguments.
  * Removed the old syntax <T1, T2> for tuples. Use (T1, T2) instead.
  * Bugfixes (forward reference to constructor in field initializer,
    anonymous functions in field initializer, override of void native method,
    tuples, ...).

 -- Daniel Bonniot <bonniot@users.sourceforge.net>  Tue,  1 Oct 2002 14:51:21 +0200

nice (0.7.3) unstable; urgency=low

  * Allow subclasses of Java classes to call any of the super-constructors,
    not just the no-arg one. The arguments of the super-constructor used are
    just the first, not-named arguments of the automatic constructor.
  * The 'main(args) { ... }' syntax for the main function is deprecated.
    Please use instead: 'void main(String[] args) { ... }'
  * Improved compilation speed, especially for programs using many classes
    (up to 2x faster).
  * Fixed implicit access to fields of the current class in ambiguous
    situations, and when overriding native methods.
  * Other fixes (issue with recompilation of up-to-date packages, ...)

 -- Daniel Bonniot <bonniot@users.sourceforge.net>  Wed,  4 Sep 2002 08:04:47 +0200

nice (0.7.2) unstable; urgency=low

  * Implemented synchronized statements.
  * Implemented bitwise complement and "get bit" on long integers.
  * Allow Nice classes and interfaces to implement and extend java interfaces
    without pretending they are classes.
  * Allow to declare that existing classes implement new abstract interfaces.

 -- Daniel Bonniot <bonniot@users.sourceforge.net>  Fri, 23 Aug 2002 12:51:21 +0200

nice (0.7.1) unstable; urgency=low

  * Fields can be accessed without specifying "this".
  * The default syntax for tuple types is now (T1, ..., Tn)
  * Made "instanceof" work with classes defined in the same package.
  * Enhanced error message for invalid calls to anonymous functions.
  * Correctly infer the return type of all anonymous functions.
  * Generate better code when using anonymous functions.
  * Bugfixes (break statement, anonymous functions used in global variables
              inside complex expressions, polymorphic arrays used
	      across packages, super, ...).

 -- Daniel Bonniot <bonniot@users.sourceforge.net>  Fri,  2 Aug 2002 09:29:19 +0200

nice (0.7.0) unstable; urgency=low

  * Added the possibility to call "super" from a method implementation.
  * Added support for transient and volatile fields.

 -- Daniel Bonniot <bonniot@users.sourceforge.net>  Tue, 16 Jul 2002 12:59:47 +0200

nice (0.6) unstable; urgency=low

  * First stable version, based on 0.5.6
  * Fixed an error message for incorrect calls to anonymous functions.

 -- Daniel Bonniot <bonniot@users.sourceforge.net>  Thu, 11 Jul 2002 10:52:52 +0200

nice (0.5.6) unstable; urgency=low

  * Added the ".class" construct.
  * Completed the "instanceof" construct.
  * Calling new T[size] where T is a type variable now correctly returns 
    an array with optional element type. It can be filled with non-null values
    using the 'fill' function, e.g. 
        fill(new T[size], int i => f(x[i]))

 -- Daniel Bonniot <bonniot@users.sourceforge.net>  Sat,  6 Jul 2002 12:44:51 +0200

nice (0.5.5) unstable; urgency=low

  * Merged --classpath and --packagepath options into --classpath.
    This is simpler, and the behaviour is more logical.
  * The compiler is now reentrant. This should not make any difference
    when running from the command-line, but this is important to allow
    tools written in Java or Nice (like the Ant task, the testsuite, 
    an IDE) to call the compiler repetively, without starting a new JVM.
  * Fixed several bugs (export of optional functional types, ...).

 -- Daniel Bonniot <bonniot@users.sourceforge.net>  Fri, 21 Jun 2002 09:18:20 +0200

nice (0.5.4) unstable; urgency=low

  * Added short syntax for anonymous functions:
      int i => i+1          /* function of one argument */
      (int i, int j) => i+j /* function of several arguments */
  * Renamed `iter` to `foreach`. `iter` is still accepted, 
    but will probably be removed sometime in the future.
    Together with the syntax change for anonymous functions,
    this gives a nice and user-friendly syntax for iterations:
    
      names.foreach(String name => println(name));

  * Anonymous function cannot appear where a statement is expected 
    (some expressions can). This is good since an anonymous function which 
    is not called cannot have side-effects, and therefore this case was
    meaningless and probably buggy.
  * Fixed inference for possibly null variables in some complex cases.
  * Other bugfixes (valid error message when trying to implement a function).

 -- Daniel Bonniot <daniel@blanche>  Thu, 13 Jun 2002 16:30:27 +0200

nice (0.5.3) unstable; urgency=low

  * Testing a variable against null in a while or for loop condition now 
    allows to use it as non-null, until is it assigned a possibly null value.
  * Added many mathematical functions (sin, cos, round, max, min, ...). 
    This makes it unnecessary to prefix them with (java.lang.)Math.
  * It is now possible to use "." (current directory) in 
    the --classpath argument (this needed a workaround for 
    a probable bug in Sun's URLClassLoader, at least in 1.3).
  * Other bugfixes (creating arrays of "exotic" types, using arrays in field 
    initializers).

 -- Daniel Bonniot <bonniot@users.sourceforge.net>  Thu, 30 May 2002 12:57:46 +0200

nice (0.5.2) unstable; urgency=low

  * Calls to constructors now require using the fields' names.
  * Produce a meaningful message when a field is used without using
    an object to load it from.
  * Fixed parsing problem with (x.f)(e) as a statement.
  * Allow classpath to be set for external java classes without
    requiring to include Nice's bootstrap classes.
  * Functions are generated in a class "<packagename>.fun", so that
    they can be called from code written in Java.

 -- Daniel Bonniot <bonniot@users.sourceforge.net>  Tue,  7 May 2002 15:23:53 +0200

nice (0.5.1) unstable; urgency=low

  * Constructors now take the initial values of the object's fields as
    named arguments. A field declaration (inside a class declaration)
    now accepts an optional value after "=" (like in Java). This value 
    is used as the default if the field is not mentioned in a call to 
    the constructor. A field with no default value must be mentioned 
    in every call to the constructor.
  * Compile properly functions declared inside abstract interfaces.
  * Allow optional parameters to be used across modules.

 -- Daniel Bonniot <bonniot@users.sourceforge.net>  Mon, 29 Apr 2002 19:07:24 +0200

nice (0.5) unstable; urgency=low

  * Recognise the standard arrow notation for functional types
      int->int  (int,int)->int  (int->int)->int
    The old notation fun(int)(int) is deprecated and will be removed
    before version 1.0
  * Assigning a possibly null value to a variable of non-null type
    now produces an error instead of a warning.
  * Fixes bug that considered that 
      int a = 10, b;
    initializes both a and b to 10.
  * Fixed variable initialization analysis for do-while loops.
  * Make the compiler compatible with JDK 1.4
  * Fixed bug on MS-Windows with archive creation because of the 
    case-insensivity of the file system.
  * Fixed creation of archive from up-to-date packages stored in jar.
  * Accept anonymous functions that do nothing.
  * Editor (emacs) mode is now driven by command-line instead of inspecting
    the EMACS environment variable. This works around a bug in emacs 21.2.1
    and might be more portable. Also makes it easier to write a nice-mode
    for other editors without changing the existing code or script.

 -- Daniel Bonniot <bonniot@users.sourceforge.net>  Thu, 18 Apr 2002 14:44:13 +0200

nice (0.0.020405) unstable; urgency=low

  * Accepts constants:
      final String s1 = "Java style";
      final s3 = "The type of constants can be omitted";
  * More compatibility with Java:
    - checks that all statements are reachable
    - checks that local variables are assigned before use
    - classes can be declared public or private
    - ...
    More than half of the Jacks (java compiler testsuite) tests now pass!
    Most failures come from the difference in the syntax of method declaration.
  * Arrays of void values are forbidden. They most probably originate from
    a bug in the source program.
  * Better handling of inhomogenous tuples with native types (e.g. <int, long>)
  * Better wrapping/unwrapping code for arrays used as Collections.
  * Bugfixes for some polymorphic operations on arrays.
  * Bugfixed the bitshift operators >>, >>> and <<.

 -- Daniel Bonniot <bonniot@users.sourceforge.net>  Fri,  5 Apr 2002 13:01:17 +0200

nice (0.0.020226) unstable; urgency=low

  * Fixed bug that prevented using "this" in overriden native methods.
  * Better error messages for method calls with wrong number of arguments.
  * Accept methods with no implementation when their domain is empty.
  * Abstract interfaces are fully qualified just like classes and 
    correctly list their super-interfaces in the package interface.
    This really makes it possible to use them across packages.
  * Various other bugfixes.

 -- Daniel Bonniot <bonniot@users.sourceforge.net>  Tue, 26 Feb 2002 16:06:00 +0100

nice (0.0.020205) unstable; urgency=low

  * Allow multiple variables to be defined together, as in:
  	int x = 1, y;
  * Allow variable declaration in tuple affectation:
  	(int x, int y) = f(0);
  * Added 'break' and 'continue' statements.
  * Implemented 'do' loops.
  * Allow overriding of native java methods. It is now possible to 
    define a subclass of a java class or interface and override the methods.
  * Changed compilation scheme for method alternatives. This results in 
    shorter class files and more intuitive stack traces.

 -- Daniel Bonniot <bonniot@users.sourceforge.net>  Tue,  5 Feb 2002 13:15:03 +0100

nice (0.0.020105) unstable; urgency=low

  * Allowed to change the type of native class fields.
    This allows in particular to use System.out.println() and such again.
  * Fixed type of if expressions in the presence of non-nullness inference.

 -- Daniel Bonniot <bonniot@users.sourceforge.net>  Sat,  5 Jan 2002 14:50:37 +0100

nice (0.0.020102) unstable; urgency=low

  * Made nicec smart about when a local variable might be null.
  * Added the 'instanceof' and '~' (bitwise complement) keywords.
  * Do not stop at the first syntax or type error in more situations.
  * Ehanced error messages.
  * Emacs mode: allow to interactively set the compiler's location 
    (the string variable 'nice-program').

 -- Daniel Bonniot <bonniot@users.sourceforge.net>  Wed,  2 Jan 2002 20:31:31 +0100

nice (0.0.011219) unstable; urgency=low

  * Initial Release.

 -- Daniel Bonniot <bonniot@users.sourceforge.net>  Tue, 18 Dec 2001 23:23:32 +0100


