/// COMMENT Tests the method coverage test.

/// PASS
  /// TOPLEVEL

abstract interface Abstract {}

// These methods are covered, because no concrete class implements Abstract
<Abstract A> void method1(A);
<Abstract A> void method2(A, String);

/// FAIL
  /// TOPLEVEL
void method3(String->String);

/// PASS
  /// TOPLEVEL
void method3(String->String);
method3(f) {} // this case is mandatory to cover method3

/// FAIL
  /// TOPLEVEL
void method3(String);
method3(String f) {} // this case is mandatory to cover method3
method3(/*/// FAIL HERE */null) {}

/// FAIL
  new B().foo("");
  /// Toplevel
abstract interface I<T> {
  void /*/// FAIL HERE */ foo(T);
}

class A<T> implements I<T> {
  int x;
  foo(t) { this.x = 0; }
}

class B<T> implements I<T> {
  // Missing implementation of foo.
}

/// FAIL
  new B().foo("");
  /// Toplevel
abstract interface I<T> {
  void /*/// FAIL HERE */ foo(T);
}

class A implements I<String> {
  foo(t) { this.bar(); }
}
void bar(A a) {}


class B<T> implements I<T> {
  // Missing implementation of foo.
}

/// FAIL
  new B().foo(0);
  /// Toplevel
abstract interface I<T> {
  void /*/// FAIL HERE */ foo(T);
}

class A implements I<String> {
  foo(t) { this.bar(); }
}
void bar(A a) {}

class B implements I<int> {
  // Missing implementation of foo.
}
