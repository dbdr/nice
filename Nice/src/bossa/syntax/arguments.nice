/**************************************************************************/
/*                                N I C E                                 */
/*             A high-level object-oriented research language             */
/*                        (c) Daniel Bonniot 2004                         */
/*                                                                        */
/*  This program is free software; you can redistribute it and/or modify  */
/*  it under the terms of the GNU General Public License as published by  */
/*  the Free Software Foundation; either version 2 of the License, or     */
/*  (at your option) any later version.                                   */
/*                                                                        */
/**************************************************************************/

package bossa.syntax;

import bossa.util.*;

/**
   Arguments of a function call.

 */
public class Arguments
{
  List<Argument> arguments;

  /** Hold real parameter, after default parameters
      and parameter reordering has been done.
  */
  Expression[?] computedExpressions = null;

  java.util.Map<VarSymbol, Expression[]> applicationExpressions = new java.util.HashMap();
  // Map actual arguments to formal arguments. Indexes are 1-based.
  java.util.Map<VarSymbol, int[]> usedArguments = new java.util.HashMap();
  
  java.util.Map<VarSymbol,mlsub.typing.Polytype> types = new java.util.HashMap();

  public void addReceiver(Expression value)
  {
    arguments.add(0, new Argument(value: value));
  }

  void add(Expression arg, ?LocatedString name)
  {
    arguments.add(new Argument(value: arg, name: name));
  }

  int size()
  {
    if (computedExpressions != null)
      return notNull(computedExpressions).length;
    else
      return arguments.size();
  }
  
  Argument get(int num)
  {
    return arguments[num];
  }
  
  Expression getExp(int num)
  {
    if (computedExpressions != null)
      return notNull(computedExpressions)[num];
    else
      return arguments[num].value;
  }

  void setExp(int num, Expression value)
  {
    arguments[num].value = value;
  }

  void noOverloading()
  {
    for (arg : arguments)
      arg.noOverloading();
  }
  
  void computeTypes()
  {
    for (arg : arguments)
      arg.value.getType();
  }
  
  Expression[] inOrder()
  {
    return arguments.mapToArray(Argument arg => arg.value);
  }
  
  ?gnu.bytecode.ClassType staticClass()
  {
    let res = this.getExp(0).staticClass();
    
    if (res != null)
      // the first argument was fake, remove it
      arguments.removeAt(0);
    
    return res;
  }
  
  Expression[?] getExpressions(VarSymbol s) = applicationExpressions.get(s);
  
  int[?] getUsedArguments(VarSymbol s) = usedArguments.get(s);

  boolean usedReordering(VarSymbol s)
  {
    let map = this.getUsedArguments(s);

    if (map == null)
      return false;

    for (int i = 0; i < map.length; i++)
      if (map[i] != i+1)
	return true;

    return false;
  }

  /**
     return true if there are arity non-tagged arguments.
  */
  boolean plainApplication(int arity, VarSymbol symbol)
  {
    if (arguments.size() != arity)
      return false;

    if (arguments.any(Argument arg => arg.name != null))    
      return false;

    applicationExpressions.put(symbol, this.inOrder());
    return true;
  }

  List<String> getNames()
  {
    List<String> res = new ArrayList();
    for (arg : arguments)
      if (arg.name != null)
        res.add(notNull(arg.name).toString());
 
    return res;
  }

  toString() = "(" + Util.map("", ", ", "", arguments) + ")";

  public String toStringInfix()
  {
    StringBuffer res = new StringBuffer("(");
    for (int i = 1; i<arguments.size(); i++)
      res.append(arguments[i].toString() + 
		 (i + 1 < arguments.size() ? ", " : ""));
    return res.append(")").toString();
  }

  public String printTypes()
  {
    StringBuffer res = new StringBuffer("(");
    for (int i = 0; i<arguments.size(); i++)
      res.append(arguments[i].printType() + 
		 (i + 1 < arguments.size() ? ", " : ""));
    return res.append(")").toString();
  }
}

public Arguments createArguments(Argument[] args)
{
  return new Arguments(arguments: new ArrayList(args));
}

public class Argument
{
  private Expression value;
  ?LocatedString name = null;

  void noOverloading()
  {
    value = value.noOverloading();
  }

  toString() = (name == null ? "" : notNull(name) + ":" ) + value;

  String printType() = (name==null ? "" : notNull(name) + ":") + value.getType();
}
