/****************************************************************************
 *                                 N I C E                                  *
 *              A high-level object-oriented research language              *
 *                         (c) Daniel Bonniot 2003                          *
 *                                                                          *
 *  This package is free software; you can redistribute it and/or modify    *
 *  it under the terms of the GNU General Public License as published by    *
 *  Free Software Foundation; either version 2 of the License, or (at your  *
 *  option) any later version.                                              *
 *                                                                          *
 *  As a special exception, the copyright holders of this library give you  *
 *  permission to link this library with independent modules to produce an  *
 *  executable, regardless of the license terms of these independent        *
 *  modules, and to copy and distribute the resulting executable under      *
 *  terms of your choice.                                                   *
 ****************************************************************************/

/**
   This file is part of the nice.lang package, which is imported
   automatically by any Nice package.
   In addition, this prelude file is read before any other file
   in the nice.lang package. Definitions that need to be read
   early, like native types, should therefore be in this file.
   It is best to reserve this file for such uses.
   
   @version $Date$
   @author Daniel Bonniot
 */

package nice.lang;

/****************************************************************
 * Nullness markers
 ****************************************************************/

abstract class Maybe<+T> = native;
final class Sure<+T> extends Maybe<T> = native;
final class Null<+T> extends Maybe<T> = native;

/**
 * Assert that a <code>value</code> is not <code>null</code>.
 * Throws java.lang.AssertionError if assertions are enabled and the argument is <code>null</code>.
 */
<T> !T notNull(?T value)
{
  assert(value != null);
  return cast(value);
}

/**
 * Tell the compiler that the <code>value</code> might be <code>null</code>.<br>
 * Useful to check if the variable is <code>null</code>
 * without issuing a compile-time warning: <code>if( maybeNull( var ) == null )</code>.<br>
 * The need for this method might arise in particular when using
 * existing Java libraries. Nice often thinks that Java method
 * would not return a <code>null</code> value, and it is not always practical
 * to write a retyping for the method.<br>
 * See also the "Option types" chapter of the Nice manual.
 */
<T> ?T maybeNull(!T value) = value;

/****************************************************************
 * Primitive types
 ****************************************************************/

final abstract class void = native;

final class boolean implements BooleanAlgebra, Comparable = native;

class Number implements Comparable = native java.lang.Number;
class double extends Number = native;
class float  extends double = native;

class long   extends float  = native;
class int    extends long   = native;
class short  extends int    = native;
class byte   extends short  = native;

final class char = native;

double doubleValue(Number) = native double Number.doubleValue();

class Throwable = native java.lang.Throwable;
class Type = native;

/*
   Allows to consider any nice object as an instance of java.lang.Object
   @deprecated object(...) is not needed any more: any value is an Object.
*/
<T> ?Object object(T x) = x;

/** Unsafe cast operator. UNSAFE! */
<T, U> U cast(T) = inline nice.lang.inline.Nop();

/****************************************************************
 * Basic functions
 ****************************************************************/

<T> boolean `==`(T,T) = inline nice.lang.inline.ReferenceOp("==");
<T> boolean `!=`(T,T) = inline nice.lang.inline.ReferenceOp("!=");

boolean `==`(char, char) = inline nice.lang.inline.CompOp("iEq");
boolean `!=`(char, char) = inline nice.lang.inline.CompOp("iNe");


<T> boolean equals(!T,!T) = native boolean Object.equals(Object);
<T> boolean equals(?T a, ?T b)
{
  if (a != null && b != null)
    return a.equals(b);
  else
    return a==b;  // true iff both null
}

<T> int hashCode(!T) = native int Object.hashCode();

<T> String toString(!T) = native String Object.toString();
<T> String valueOf(T) = native String String.valueOf(Object);
<T> Class<!T> getClass(!T) = native Class Object.getClass();

<T> void wait(!T) = native void Object.wait();
<T> void wait(!T, long) = native void Object.wait(long);
<T> void wait(!T, long, int) = native void Object.wait(long, int);
<T> void notify(!T) = native void Object.notify();
<T> void notifyAll(!T) = native void Object.notifyAll();

/** 
    This function will throw CloneNotSupportedException if the argument
    does not implement java.lang.Cloneable.

    We will give a stricter type later when we can uniformly describe
    cloneable classes of arbitrary variances.
*/
<T> !T clone(!T) = native Object java.lang.Object.clone();

/****************************************************************
 * Ref
 ****************************************************************/

class Ref<T> { T value; }
