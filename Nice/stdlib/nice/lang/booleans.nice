/**************************************************************************/
/*                                N I C E                                 */
/*             A high-level object-oriented research language             */
/*                        (c) Daniel Bonniot 2003                         */
/*                                                                        */
/*  This package is free software; you can redistribute it and/or modify  */
/*  it under the terms of the GNU Lesser General Public License as        */
/*  published by the Free Software Foundation; either version 2 of the    */
/*  License, or (at your option) any later version.                       */
/*                                                                        */
/**************************************************************************/

package nice.lang;

/**
   Primitive booleans.
*/

boolean `==`(boolean, boolean) = inline nice.lang.inline.BoolOp("==");
//for booleans is '!=' equal to '^'
boolean `!=`(boolean, boolean) = inline nice.lang.inline.BoolOp("^");

boolean `=>`(boolean a, boolean b) = !a | b;

/**
  Booleans form a boolean algebra.
*/

`!`(b@boolean) = b ? false : true;
`&`(b1@boolean,b2@boolean) = b1 ? b2 : false;
`|`(b1@boolean,b2@boolean) = b1 ? true : b2;
`^`(b1@boolean,b2@boolean) = b1 ? !b2 : b2;

// same methods, but overloaded for better efficiency (no dispatch and no boxing).
boolean `!`(boolean) = inline nice.lang.inline.BoolNotOp();
boolean `&`(boolean, boolean) = inline nice.lang.inline.BoolOp("&");
boolean `|`(boolean, boolean) = inline nice.lang.inline.BoolOp("|");
boolean `^`(boolean, boolean) = inline nice.lang.inline.BoolOp("^");

boolean `&&`(boolean, boolean) = inline nice.lang.inline.ShortCircuitOp("&&");
boolean `||`(boolean, boolean) = inline nice.lang.inline.ShortCircuitOp("||");

`<`(b1@boolean, b2@boolean) = b2 || !b1;
