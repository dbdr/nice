/// COMMENT Introducing a method that is more general than an existing one.
/// COMMENT That is, the existing one overrides the new one.

/// PASS
  /// package a
  /// Toplevel
class Collection
{
  void foo() {}
}

  /// package b import a
  /// Toplevel
abstract interface Fooable {}
<Fooable F> void foo(F this);

class a.Collection implements Fooable;

/// PASS
  /// package a
  /// Toplevel
class Collection
{
  void foo() {}
}

  /// package b import a
  /// Toplevel
abstract interface Fooable
{
  void foo();
}

class a.Collection implements Fooable;

/// PASS
  let c = new ArrayList();
  c.addTwice("A");
  assert c.size() == 2;

  // Check that overrides work
  let l = new SilentlyEmptyList();
  l.addTwice("A");
  assert l.size() == 0;
  /// Toplevel
abstract interface Addable<T> { void add(T item); }

interface java.util.Collection implements Addable;

<Addable A, T> void addTwice(A<T> a, T e) { a.add(e); a.add(e); }

class SilentlyEmptyList<T> extends LinkedList
{
  add(e) = false;
}

/// FAIL
  let c = new ArrayList();
  c.addTwice("A");
  assert c.size() == 2;

  /// Toplevel
abstract interface Addable<T>
{
  // Wrong return type
  /*/// FAIL HERE */ String add(T item);
}

interface java.util.Collection implements Addable;

<Addable A, T> void addTwice(A<T> a, T e) { a.add(e); a.add(e); }
