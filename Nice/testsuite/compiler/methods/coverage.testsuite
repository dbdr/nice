/// FAIL no-location
  /// Toplevel
class B implements nice.lang.Comparable {
 // `<` not implemented
}

/// FAIL
  /// Toplevel
abstract interface I {
  boolean /*/// FAIL HERE */ fooI(alike);
}

class nice.lang.boolean implements I;
fooI(boolean b1, boolean b2) = b1;

class A implements I {
 // `fooI` not implemented  
}

/// FAIL
  /// Toplevel
abstract interface I {
  boolean /*/// FAIL HERE */ fooI(String);
}

class A implements I {
  fooI(x) = false;
}

class B implements I {
 // `fooI` not implemented  
}

/// PASS
  /// Toplevel
  <T> T foo(T x, Object o) = x;
  foo(String s, o) = "";

/// PASS
  assert !foo(null);
  assert foo("");
  /// Toplevel
<T> boolean foo(T x) = false;
foo(Object x) = true;

/// PASS
  /// Toplevel
  interface I {}
  class A implements I {}
  interface K extends I {}
  void foo(I x) {}
  foo(A x) {}
  foo(K x) {}

/// FAIL
  /// Toplevel
interface I {
  void /*/// FAIL HERE */ foo(Object o1);
}
class A implements I {}

/// PASS
  /// Toplevel
interface I1 {}
interface I2 {}

void foo(I1 i1, I2 i2, Object o1, Object o2, Object o3, Object o4, Object o5, Object o6);

class A implements I1 {}
foo(A a, i2, o1, o2, o3, o4, o5, o6) {}

/// FAIL
  /// Toplevel
interface I1 {}
interface I2 {}

void /*/// FAIL HERE */ foo(I1 i1, I2 i2, Object o1, Object o2, Object o3, Object o4, Object o5, Object o6);

class A1 implements I1 {}
class A2 implements I2 {}

// foo implementation missing
