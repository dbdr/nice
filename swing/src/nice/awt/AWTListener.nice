package nice.awt;

import java.awt.event.*;
import java.awt.dnd.*;

/** 
 * class that implements a java.awt.event.* interface
 * and delegates the action to an optional anonymous function.
 */
class NiceActionListener extends ActionListener
{
  /** 
   * A field that stores an optional anonymous function. 
   */
  private ActionEvent ?-> void actionPerformed = null;

  /** 
   * The implementation of the method actionPerformed defined in ActionListener. 
   */
  actionPerformed(e)
  {
    ActionEvent ?-> void actionPerformed = this.actionPerformed;
    if(actionPerformed != null) actionPerformed(notNull(e));
  }
}

// --------------------------------------------------------------------------------------------------
// --------------------------------------------------------------------------------------------------

/** 
 * class that implements the java.awt.event.AdjustmentListener interface
 * and delegates the action to an optional anonymous function.
 */
class NiceAdjustmentListener extends AdjustmentListener
{
  /** 
   * A field that stores an optional anonymous function. 
   */
  private AdjustmentEvent ?-> void adjustmentValueChanged = null;

  /** 
   * The implementation of the method adjustmentValueChanged defined in AdjustmentListener. 
   */
   adjustmentValueChanged(e)
   {
     AdjustmentEvent ?-> void adjustmentValueChanged = this.adjustmentValueChanged;
     if(adjustmentValueChanged != null) adjustmentValueChanged(notNull(e));
   }
}

// --------------------------------------------------------------------------------------------------
// --------------------------------------------------------------------------------------------------

/** 
 * class that implements the java.awt.event.AdjustmentListener interface
 * and delegates the action to optional  anonymous function.
 */
class NiceAWTEventListener extends AWTEventListener
{
  /** 
   * A field that stores an optional anonymous function. 
   */
  private AWTEvent ?-> void eventDispatched = null;

  /** 
   * The implementation of the method eventDispatched defined in AWTEventListener. 
   */
   eventDispatched(e)
   {
     AWTEvent ?-> void eventDispatched = this.eventDispatched;
     if(eventDispatched != null) eventDispatched(notNull(e));
   }
}  

// --------------------------------------------------------------------------------------------------
// --------------------------------------------------------------------------------------------------

/** 
 * class that implements the java.awt.event.ComponentListener interface
 * and delegates the actions to optional  anonymous functions.
 */
class NiceComponentListener extends ComponentListener
{
  /** 
   * fields that store optional anonymous functions for all required methods. 
   */
  private ComponentEvent ?-> void componentHidden = null;
  private ComponentEvent ?-> void componentMoved  = null;
  private ComponentEvent ?-> void componentResized = null;
  private ComponentEvent ?-> void componentShown  = null;
  

  /** 
   * The implementation of the method componentHidden defined in java.awt.event.ComponentListener. 
   */
   componentHidden(e)
   {
     ComponentEvent ?-> void componentHidden = this.componentHidden;
     if(componentHidden != null) componentHidden(notNull(e));
   }
   
  /** 
   * The implementation of the method componentMoved defined in java.awt.event.ComponentListener. 
   */
   componentMoved(e)
   {
     ComponentEvent ?-> void componentMoved = this.componentMoved;
     if(componentMoved != null) componentMoved(notNull(e));
   }
 
  /** 
   * The implementation of the method componentResized defined in java.awt.event.ComponentListener. 
   */
   componentResized(e)
   {
     ComponentEvent ?-> void componentResized = this.componentResized;
     if(componentResized != null) componentResized(notNull(e));
   }
   
  /** 
   * The implementation of the method componentShown defined in java.awt.event.ComponentListener. 
   */
   componentShown(e)
   {
     ComponentEvent ?-> void componentShown = this.componentShown;
     if(componentShown != null) componentShown(notNull(e));
   }
}

// --------------------------------------------------------------------------------------------------
// --------------------------------------------------------------------------------------------------

/** 
 * class that implements the java.awt.event.ContainerListener interface
 * and delegates the actions to optional anonymous functions.
 */
class NiceContainerListener extends ContainerListener
{
  /** 
   * fields that store optional anonymous functions for all required methods. 
   */
  private ContainerEvent ?-> void componentAdded = null;
  private ContainerEvent ?-> void componentRemoved = null;
  

  /** 
   * The implementation of the method componentAdded defined in java.awt.event.ContainerListener. 
   */
   componentAdded(e)
   {
     ContainerEvent ?-> void componentAdded = this.componentAdded;
     if(componentAdded != null) componentAdded(notNull(e));
   }
   
  /** 
   * The implementation of the method componentRemoved defined in java.awt.event.ContainerListener. 
   */
   componentRemoved(e)
   {
     ContainerEvent ?-> void componentRemoved = this.componentRemoved;
     if(componentRemoved != null) componentRemoved(notNull(e));
   }
}

// --------------------------------------------------------------------------------------------------
// --------------------------------------------------------------------------------------------------

/** 
 * class that implements the java.awt.event.FocusListener interface
 * and delegates the actions to optional anonymous functions.
 */
class NiceFocusListener extends FocusListener
{
  /** 
   * fields that store optional anonymous functions for all required methods. 
   */
  private FocusEvent ?-> void focusGained = null;
  private FocusEvent ?-> void focusLost = null;
  

  /** 
   * The implementation of the method focusGained defined in java.awt.event.FocusListener. 
   */
   focusGained(e)
   {
     FocusEvent ?-> void focusGained = this.focusGained;
     if(focusGained != null) focusGained(notNull(e));
   }
   
  /** 
   * The implementation of the method focusLost defined in java.awt.event.FocusListener. 
   */
   focusLost(e)
   {
     FocusEvent ?-> void focusLost = this.focusLost;
     if(focusLost != null) focusLost(notNull(e));
   }
}

// --------------------------------------------------------------------------------------------------
// --------------------------------------------------------------------------------------------------

/** 
 * class that implements the java.awt.event.HierarchyBoundsListener interface
 * and delegates the actions to optional anonymous functions.
 */
class NiceHierarchyBoundsListener extends HierarchyBoundsListener

{
  /** 
   * fields that store optional anonymous functions for all required methods. 
   */
  private HierarchyEvent ?-> void hierarchyAncestorMoved = null;
  private HierarchyEvent ?-> void hierarchyAncestorResized = null;
  

  /** 
   * The implementation of the method ancestorMoved defined in java.awt.event.HierarchyBoundsListener
   */
   ancestorMoved(e)
   {
     HierarchyEvent ?-> void hierarchyAncestorMoved = this.hierarchyAncestorMoved;
     if(hierarchyAncestorMoved != null) hierarchyAncestorMoved(notNull(e));
   }
   
  /** 
   * The implementation of the method ancestorResized defined in java.awt.event.HierarchyBoundsListener 
   */
   ancestorResized(e)
   {
     HierarchyEvent ?-> void hierarchyAncestorResized = this.hierarchyAncestorResized;
     if(hierarchyAncestorResized != null) hierarchyAncestorResized(notNull(e));
   }
}

// --------------------------------------------------------------------------------------------------
// --------------------------------------------------------------------------------------------------

/** 
 * class that implements the java.awt.event.HierarchyListener interface
 * and delegates the action to an optional anonymous function.
 */
class NiceHierarchyListener extends HierarchyListener

{
  /** 
   * a field that stores an optional anonymous function 
   */
  private HierarchyEvent ?-> void hierarchyChanged = null;
  

  /** 
   * The implementation of the method hierarchyChanged defined in java.awt.event.HierarchyListener
   */
   hierarchyChanged(e)
   {
     HierarchyEvent ?-> void hierarchyChanged = this.hierarchyChanged;
     if(hierarchyChanged != null) hierarchyChanged(notNull(e));
   }
}

// --------------------------------------------------------------------------------------------------
// --------------------------------------------------------------------------------------------------

/** 
 * class that implements the java.awt.event.InputMethodListener interface
 * and delegates the actions to optional anonymous functions.
 */
class NiceInputMethodListener extends InputMethodListener

{
  /** 
   * fields that store optional anonymous functions for all required methods. 
   */
  private InputMethodEvent ?-> void caretPositionChanged = null;
  private InputMethodEvent ?-> void inputMethodTextChanged = null;
  

  /** 
   * The implementation of the method caretPositionchanged defined in java.awt.event.InputMethodListener
   */
   caretPositionChanged(e)
   {
     InputMethodEvent ?-> void caretPositionChanged = this.caretPositionChanged;
     if(caretPositionChanged != null) caretPositionChanged(notNull(e));
   }
   
  /** 
   * The implementation of the method inputMethodTextChanged defined in java.awt.event.InputMethodListener 
   */
   inputMethodTextChanged(e)
   {
     InputMethodEvent ?-> void inputMethodTextChanged = this.inputMethodTextChanged;
     if(inputMethodTextChanged != null) inputMethodTextChanged(notNull(e));
   }
}

// --------------------------------------------------------------------------------------------------
// --------------------------------------------------------------------------------------------------

/** 
 * class that implements the java.awt.event.ItemListener interface
 * and delegates the action to an optional anonymous function.
 */
class NiceItemListener extends ItemListener

{
  /** 
   * a field that stores an optional anonymous function 
   */
  private ItemEvent ?-> void itemStateChanged = null;
  

  /** 
   * The implementation of the method itemStateChanged defined in java.awt.event.ItemListener
   */
   itemStateChanged(e)
   {
     ItemEvent ?-> void itemStateChanged = this.itemStateChanged;
     if(itemStateChanged != null) itemStateChanged(notNull(e));
   }
}

// --------------------------------------------------------------------------------------------------
// --------------------------------------------------------------------------------------------------

/** 
 * class that implements the java.awt.event.ComponentListener interface
 * and delegates the actions to optional anonymous functions.
 */
class NiceKeyListener extends KeyListener
{
  /** 
   * fields that store optional anonymous functions for all required methods. 
   */
  private KeyEvent ?-> void keyPressed = null;
  private KeyEvent ?-> void keyReleased = null;
  private KeyEvent ?-> void keyTyped = null;
  

  /** 
   * The implementation of the method keyPressed defined in java.awt.event.KeyListener. 
   */
   keyPressed(e)
   {
     KeyEvent ?-> void keyPressed = this.keyPressed;
     if(keyPressed != null) keyPressed(notNull(e));
   }
   
  /** 
   * The implementation of the method keyReleased defined in java.awt.event.KeyListener. 
   */
   keyReleased(e)
   {
     KeyEvent ?-> void keyReleased = this.keyReleased;
     if(keyReleased != null) keyReleased(notNull(e));
   }
   
  /** 
   * The implementation of the method keyTyped defined in java.awt.event.KeyListener. 
   */
   keyTyped(e)
   {
     KeyEvent ?-> void keyTyped = this.keyTyped;
     if(keyTyped != null) keyTyped(notNull(e));
   }
}

// --------------------------------------------------------------------------------------------------
// --------------------------------------------------------------------------------------------------

/** 
 * class that implements the java.awt.event.MouseListener interface
 * and delegates the actions to optional anonymous functions.
 */
class NiceMouseListener extends MouseListener
{
  /** 
   * fields that store optinal anonymous functions for all required methods. 
   */
  private MouseEvent ?-> void mouseClicked = null;
  private MouseEvent ?-> void mouseEntered = null;
  private MouseEvent ?-> void mouseExited = null;
  private MouseEvent ?-> void mousePressed = null;
  private MouseEvent ?-> void mouseReleased = null;
  

  /** 
   * The implementation of the method mouseClicked defined in java.awt.event.MouseListener. 
   */
   mouseClicked(e)
   {
     MouseEvent ?-> void mouseClicked = this.mouseClicked;
     if(mouseClicked != null) mouseClicked(notNull(e));
   }
   
  /** 
   * The implementation of the method mouseEntered defined in java.awt.event.MouseListener. 
   */
   mouseEntered(e)
   {
     MouseEvent ?-> void mouseEntered = this.mouseEntered;
     if(mouseEntered != null) mouseEntered(notNull(e));
   }
   
  /** 
   * The implementation of the method mouseExited defined in java.awt.event.MouseListener. 
   */
   mouseExited(e)
   {
     MouseEvent ?-> void mouseExited = this.mouseExited;
     if(mouseExited != null) mouseExited(notNull(e));
   }
   
  /** 
   * The implementation of the method mousePressed defined in java.awt.event.MouseListener. 
   */
   mousePressed(e)
   {
     MouseEvent ?-> void mousePressed = this.mousePressed;
     if(mousePressed != null) mousePressed(notNull(e));
   }
      
  /** 
   * The implementation of the method mouseReleased defined in java.awt.event.MouseListener. 
   */
   mouseReleased(e)
   {
     MouseEvent ?-> void mouseReleased = this.mouseReleased;
     if(mouseReleased != null) mouseReleased(notNull(e));
   }
}

// --------------------------------------------------------------------------------------------------
// --------------------------------------------------------------------------------------------------

/** 
 * class that implements the java.awt.event.MouseMotionListener interface
 * and delegates the actions to optional anonymous functions.
 */
class NiceMouseMotionListener extends MouseMotionListener

{
  /** 
   * fields that store optional anonymous functions for all required methods. 
   */
  private MouseEvent ?-> void mouseDragged = null;
  private MouseEvent ?-> void mouseMoved = null;
  

  /** 
   * The implementation of the method mouseDragged defined in java.awt.event.MouseMotionListener
   */
   mouseDragged(e)
   {
     MouseEvent ?-> void mouseDragged = this.mouseDragged;
     if(mouseDragged != null) mouseDragged(notNull(e));
   }
   
  /** 
   * The implementation of the method mouseMoved defined in java.awt.event.MouseMotionListener 
   */
   mouseMoved(e)
   {
     MouseEvent ?-> void mouseMoved = this.mouseMoved;
     if(mouseMoved != null) mouseMoved(notNull(e));
   }
}

// --------------------------------------------------------------------------------------------------
// --------------------------------------------------------------------------------------------------

/** 
 * class that implements the java.awt.event.TextListener interface
 * and delegates the action to an optional anonymous function.
 */
class NiceTextListener extends TextListener

{
  /** 
   * a field that stores an optional anonymous function 
   */
  private TextEvent ?-> void textValueChanged = null;
  

  /** 
   * The implementation of the method textValueChanged defined in java.awt.event.TextListener
   */
   textValueChanged(e)
   {
     TextEvent ?-> void textValueChanged = this.textValueChanged;
     if(textValueChanged != null) textValueChanged(notNull(e));
   }
}


// --------------------------------------------------------------------------------------------------
// --------------------------- j2sdk1.4.0 Listener --------------------------------------------------
// --------------------------------------------------------------------------------------------------

///** 
// * class that implements the java.awt.event.MouseWheelListener interface
// * and delegates the action to an optional anonymous function.
// */
//class NiceMouseWheelListener extends MouseWheelListener
//
//{
//  /** 
//   * a field that stores an optional anonymous function 
//   */
//  private MouseWheelEvent ?-> void mouseWheelMoved = null;
//  
//
//  /** 
//   * The implementation of the method mouseWheelMoved defined in java.awt.event.MouseWheelListener
//   */
//   mouseWheelMoved(e){
//   { 
//     MouseWheelEvent ?-> void mouseWheelMoved = this.mouseWheelMoved;
//     if(mouseWheelMoved != null) mouseWheelMoved(notNull(e));
//   }
//}

// --------------------------------------------------------------------------------------------------
// --------------------------------------------------------------------------------------------------

///** 
// * class that implements the java.awt.event.WindowFocusListener interface
// * and delegates the actions to optional anonymous functions.
// */
//class NiceWindowFocusListener extends WindowFocusListener
//
//{
//  /** 
//   * fields that store optional anonymous functions for all required methods. 
//   */
//  private WindowEvent ?-> void windowGainedFocus = null;
//  private WindowEvent ?-> void windowLostFocus = null;
//  
//
//  /** 
//   * The implementation of the method mouseDragged defined in java.awt.event.WindowFocusListener
//   */
//   windowGainedFocus(e)
//   { 
//     WindowEvent ?-> void windowGainedFocus = this.windowGainedFocus;
//     if(windowGainedFocus != null) windowGainedFocus(notNull(e));
//   }
//   
//  /** 
//   * The implementation of the method mouseMoved defined in java.awt.event.WindowFocusListener 
//   */
//   windowLostFocus(e)
//   {  
//     WindowEvent ?-> void windowLostFocus = this.windowLostFocus;
//     if(windowLostFocus != null) windowLostFocus(notNull(e));
//   }
//}

// --------------------------------------------------------------------------------------------------
// --------------------------------------------------------------------------------------------------

///** 
// * class that implements the java.awt.event.WindowStateListener interface
// * and delegates the action to an optional anonymous function.
// */
//class NiceWindowStateListener extends WindowStateListener
//
//{
//  /** 
//   * a field that stores an optional anonymous function 
//   */
//  private WindowEvent ?-> void windowStateChanged = null;
//  
//
//  /** 
//   * The implementation of the method windowStateChanged defined in java.awt.event.WindowStateListener
//   */
//   windowStateChanged(e)
//   {
//     WindowEvent ?-> void windowStateChanged = this.windowStateChanged;
//     if(windowStateChanged != null) windowStateChanged(notNull(e));
//   }
//}

// --------------------------------------------------------------------------------------------------
// --------------------------------------------------------------------------------------------------

/** 
 * class that implements the java.awt.event.WindowListener interface
 * and delegates the actions to optional anonymous functions.
 */
class NiceWindowListener extends WindowListener
{
  /** 
   * fields that store optional anonymous functions for all required methods. 
   */
  private WindowEvent ?-> void windowActivated = null;
  private WindowEvent ?-> void windowClosed = null;
  private WindowEvent ?-> void windowClosing = null;
  private WindowEvent ?-> void windowDeactivated = null;
  private WindowEvent ?-> void windowDeiconified = null;
  private WindowEvent ?-> void windowIconified = null;
  private WindowEvent ?-> void windowOpened = null;
  

  /** 
   * The implementation of the method windowActivated defined in java.awt.event.WindowListener. 
   */
   windowActivated(e) 
   {
     WindowEvent ?-> void windowActivated = this.windowActivated;
     if(windowActivated != null) windowActivated(notNull(e));
   }
   
  /** 
   * The implementation of the method windowClosed defined in java.awt.event.WindowListener. 
   */
   windowClosed(e)
   {
     WindowEvent ?-> void windowClosed = this.windowClosed;
     if(windowClosed != null) windowClosed(notNull(e));
   }
 
  /** 
   * The implementation of the method windowClosing defined in java.awt.event.WindowListener. 
   */
   windowClosing(e)
   {
     WindowEvent ?-> void windowClosing = this.windowClosing;	
     if(windowClosing != null) windowClosing(notNull(e));
   }
   
  /** 
   * The implementation of the method windowDeactivated defined in java.awt.event.WindowListener. 
   */
   windowDeactivated(e)
   {
     WindowEvent ?-> void windowDeactivated = this.windowDeactivated;
     if(windowDeactivated != null) windowDeactivated(notNull(e));
   }
      
  /** 
   * The implementation of the method windowDeiconified defined in java.awt.event.WindowListener. 
   */
   windowDeiconified(e)
   {
     WindowEvent ?-> void windowDeiconified = this.windowDeiconified;
     if(windowDeiconified != null) windowDeiconified(notNull(e));
   }
         
  /** 
   * The implementation of the method windowIconified defined in java.awt.event.WindowListener. 
   */
   windowIconified(e)
   {
     WindowEvent ?-> void windowIconified = this.windowIconified;
     if(windowIconified != null) windowIconified(notNull(e));
   }
         
  /** 
   * The implementation of the method windowOpened defined in java.awt.event.WindowListener. 
   */
   windowOpened(e)
   {
     WindowEvent ?-> void windowOpened = this.windowOpened;
     if(windowOpened != null) windowOpened(notNull(e));
   }
}


// --------------------------------------------------------------------------------------------------
// --------------------------------------------------------------------------------------------------

/** 
 * class that implements the java.awt.dnd.DragGestureListener interface
 * and delegates the action to an optional anonymous function.
 */
class NiceDragGestureListener extends DragGestureListener

{
  /** 
   * a field that stores an optional anonymous function 
   */
  private DragGestureEvent ?-> void dragGestureRecognized = null;
  

  /** 
   * The implementation of the method dragGestureRecognized defined in java.awt.dnd.DragGestureListener
   */
   dragGestureRecognized(e)
   {
     DragGestureEvent ?-> void dragGestureRecognized = this.dragGestureRecognized;
     if(dragGestureRecognized != null) dragGestureRecognized(notNull(e));
   }
}


// --------------------------------------------------------------------------------------------------
// --------------------------------------------------------------------------------------------------

/** 
 * class that implements the java.awt.dnd.DragSourceListener interface
 * and delegates the action to an optional anonymous function.
 */
class NiceDragSourceListener extends DragSourceListener

{
  /** 
   * a field that stores an optional anonymous function 
   */
  private DragSourceDropEvent ?-> void dsDragDropEnd = null;
  private DragSourceDragEvent ?-> void dsDragEnter = null;
  private DragSourceDragEvent ?-> void dsDragOver = null;
  private DragSourceDragEvent ?-> void dsDropActionChanged = null;
  private DragSourceEvent ?-> void dsDragExit = null;
    

  /** 
   * The implementation of the method dragDropEnd defined in java.dnd.event.DragSourceListener
   */
   dragDropEnd(e)
   {
     DragSourceDropEvent ?-> void dsDragDropEnd = this.dsDragDropEnd;
     if(dsDragDropEnd != null) dsDragDropEnd(notNull(e));
   }

  /** 
   * The implementation of the method dragEnter defined in java.awt.dnd.DragSourceListener
   */
   dragEnter(e)
   {
     DragSourceDragEvent ?-> void dsDragEnter = this.dsDragEnter;
     if(dsDragEnter != null) dsDragEnter(notNull(e));
   }

  /** 
   * The implementation of the method dragOver defined in java.awt.dnd.DragSourceListener
   */
   dragOver(e)
   {
     DragSourceDragEvent ?-> void dsDragOver = this.dsDragOver;
     if(dsDragOver != null) dsDragOver(notNull(e));
   }

  /** 
   * The implementation of the method dragActionChanged defined in java.awt.dnd.DragSourceListener
   */
   dropActionChanged(e)
   {
     DragSourceDragEvent ?-> void dsDropActionChanged = this.dsDropActionChanged;
     if(dsDropActionChanged != null) dsDropActionChanged(notNull(e));
   }

  /** 
   * The implementation of the method dragExit defined in java.awt.dnd.DragSourceListener
   */
   dragExit(e)
   {
     DragSourceEvent ?-> void dsDragExit = this.dsDragExit;
     if(dsDragExit != null) dsDragExit(notNull(e));
   }
}


//// --------------------------------------------------------------------------------------------------
//// --------------------------- j2sdk1.4.0 Listener --------------------------------------------------
//// --------------------------------------------------------------------------------------------------
//
///** 
// * class that implements the java.awt.dnd.DragSourceMotionListener interface
// * and delegates the action to an optional anonymous function.
// */
//class NiceDragSourceMotionListener extends DragSourceMotionListener
//
//{
//  /** 
//   * a field that stores an optional anonymous function 
//   */
//  private DragSourceDragEvent ?-> void dragMouseMoved = null;
//  
//
//  /** 
//   * The implementation of the method dragMouseMoved defined in java.awt.dnd.DragSourceMotionListener
//   */
//   dragMouseMoved(e)
//   {
//     DragSourceDragEvent ?-> void dragMouseMoved = this.dragMouseMoved;
//     if(dragMouseMoved != null) dragMouseMoved(notNull(e));
//   }
//}


// --------------------------------------------------------------------------------------------------
// --------------------------------------------------------------------------------------------------

/** 
 * class that implements the java.awt.dnd.DropTargetListener interface
 * and delegates the action to an optional anonymous function.
 */
class NiceDropTargetListener extends DropTargetListener

{
  /** 
   * a field that stores an optional anonymous function 
   */
  private DropTargetDropEvent ?-> void dtDrop = null;
  private DropTargetDragEvent ?-> void dtDragEnter = null;
  private DropTargetDragEvent ?-> void dtDragOver = null;
  private DropTargetDragEvent ?-> void dtDropActionChanged = null;
  private DropTargetEvent ?-> void dtDragExit = null;
    

  /** 
   * The implementation of the method dragDropEnd defined in java.dnd.event.DropTargetListener
   */
   drop(e)
   {
     DropTargetDropEvent ?-> void dtDrop = this.dtDrop;
     if(dtDrop != null) dtDrop(notNull(e));
   }

  /** 
   * The implementation of the method dragEnter defined in java.awt.dnd.DropTargetListener
   */
   dragEnter(e)
   {
     DropTargetDragEvent ?-> void dtDragEnter = this.dtDragEnter;
     if(dtDragEnter != null) dtDragEnter(notNull(e));
   }

  /** 
   * The implementation of the method dragOver defined in java.awt.dnd.DropTargetListener
   */
   dragOver(e)
   {
     DropTargetDragEvent ?-> void dtDragOver = this.dtDragOver;
     if(dtDragOver != null) dtDragOver(notNull(e));
   }

  /** 
   * The implementation of the method dragActionChanged defined in java.awt.dnd.DropTargetListener
   */
   dropActionChanged(e)
   {
     DropTargetDragEvent ?-> void dtDropActionChanged = this.dtDropActionChanged;
     if(dtDropActionChanged != null) dtDropActionChanged(notNull(e));
   }

  /** 
   * The implementation of the method dragExit defined in java.awt.dnd.DropTargetListener
   */
   dragExit(e)
   {
     DropTargetEvent ?-> void dtDragExit = this.dtDragExit;
     if(dtDragExit != null) dtDragExit(notNull(e));
   }
}