/// COMMENT Polymorphic functions
/// PASS
  /// COMMENT Use a polymorphic function with a "complex" constraint.
  /// COMMENT This revealed a bug in polytype cloning.
  /// Toplevel

void usePolymorphicFunction () {
  accessRef(new Ref(value: ""));
}

<C, R | C <: Ref<R> > void accessRef (Ref<R> r) {}

/// FAIL
  /// COMMENT Currently we allow only <C T> if C is a type constructor.
  /// Toplevel
  <T, /* /// FAIL HERE */ T U> void f();

/// PASS
  /// Toplevel
<T> int m(T);
m(x) = 0;
m(Collection c) = c.size();

/// PASS
  /// Toplevel
class A{}

A[?] foo()
{
  return (true) ? null : fill(new A[0], int i => new A());
}

/// PASS
  /// Toplevel

// Variation on the previous case.
class A{}

<T, U | T <: U, U <: T> U[] poly(T[] x) = x;

A[?] foo()
{
  return (true) ? null : poly(new A[0]);
}
