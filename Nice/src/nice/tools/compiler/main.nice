/**************************************************************************/
/*                             N I C E                                    */
/*        A simple imperative object-oriented research language           */
/*                   (c)  Daniel Bonniot 1999                             */
/*                                                                        */
/*  This program is free software; you can redistribute it and/or modify  */
/*  it under the terms of the GNU General Public License as published by  */
/*  the Free Software Foundation; either version 2 of the License, or     */
/*  (at your option) any later version.                                   */
/*                                                                        */
/**************************************************************************/

// File    : main.nice
// Created : Sat Feb 19 16:21:04 2000 by Daniel Bonniot
//$Modified: Fri Aug 04 12:11:04 2000 by Daniel Bonniot $

package nice.tools.compiler;

/**
   Nice compiler main program.

   Exit code table:
   0 : Normal exit (compilation sucessful, version message)
   1 : Abnormal termination (bug in the compiler)
   2 : Error reported (file missing, type error, ...)

   @author Daniel Bonniot (d.bonniot@mail.dotcom.fr)
 */

import mlsub.compilation;
import nice.getopt;
import bossa.modules;

main(args)
{
  Throwable uncaughtException = null;

  try{

  boolean recompileCL = false;
  boolean recAll = false;
  boolean doLink = true;
  boolean staticLink = false;
  List<Option> opts = makeVector(10);
 
  opts.add(option('r', "recompile",
		  "Force recompilation of package",
		  "none/command-line/all",
  		  fun()=>{ recompileCL=true; },
  		  fun(String arg)=>{
		    if("all".equals(arg))
		      recAll=true;
		    else if("command-line".equals(arg))
		      recompileCL=true;
		    else if("none".equals(arg))
		      {
		        recompileCL=false;
		        recAll=false;
		      }
		    else println("Unkown argument to \'recompile\': " + arg);
		    }));

  opts.add(option('R', "recompileAll",
		  "Force recompilation of all dependant packages",
                  fun()=>{ recAll = true; }));

  opts.add(option('c', "compile",
		  "Compile packages, do not link them",
  		  fun()=>{ doLink=false; }));

  opts.add(option('s', "static",
		  "Store compiled packages in the jar file",
  		  fun()=>{ staticLink=true; }));

  opts.add(option('?', "dynamic",
		  "Store compiled packages in their directory (default)",
  		  fun()=>{ staticLink=false; }));

  opts.add(option('h', "help", "Print help message and exit",
		  fun()=>
                  {
		    println(printOptions(opts));
		    System.exit(1);
		  }));

  opts.add(option('?', "version",
		  "Print version info and exit",
		  fun()=>version()));

  opts.add(option('?', "usage",
		  "Print usage information and exit",
		  fun()=>usage()));

  Sequence<String> rest = parse("nicec", args, opts);
  if(rest.size()<1 || rest.size()>1)
    {
      if (rest.size()>1)
	println("Supply only one package on the command line.\n" +
		"nicec will automatically find depandencies.");
      usage();
    }
  String packageName = rest.get(0);

  bossa.modules.Compilation compilation = 
    make(packageName, doLink, recompileCL, recAll, staticLink);

  make(compilation);

  }
  catch(ExceptionInInitializerError e){
    uncaughtException = e.getException();
  }
  catch(Throwable e){
    uncaughtException = e;
  }

  if(uncaughtException != null)
    {
      System.out.println
      ("\nAn exception has occured in the compiler\n" +
       "please report a simple case showing this behaviour to d.bonniot@mail.dotcom.fr\n\n" +
       "Exception: " + uncaughtException.toString() +
       "\n\nStack trace:\n");
      uncaughtException.printStackTrace();
      System.exit(1);
    }
}

void usage();
usage()
{
  println("Usage: nicec [options] [package]");
  println("Type \"nicec --help\" for a list of options");
  System.exit(0);
}

/* version info */ void version();
version()
{
  println("Nice compiler alpha version");
  println("Copyright (C) 2000 Daniel Bonniot");
  println("Visit the Nice homepage: http://purl.org/net/nice");
  println("Report bugs to d.bonniot@mail.dotcom.fr");
  System.exit(0);
}
