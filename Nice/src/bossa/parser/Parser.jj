/**************************************************************************/
/*                           B O S S A                                    */
/*        A simple imperative object-oriented research language           */
/*                   (c)  Daniel Bonniot 1999                             */
/*                                                                        */
/*  This program is free software; you can redistribute it and/or modify  */
/*  it under the terms of the GNU General Public License as published by  */
/*  the Free Software Foundation; either version 2 of the License, or     */
/*  (at your option) any later version.                                   */
/*                                                                        */
/**************************************************************************/

// File    : parser.jj
// Created : Thu Jul 01 10:27:05 1999 by bonniot
//$Modified: Wed Jan 26 18:50:26 2000 by Daniel Bonniot $
// Description : Parseur JavaCC pour Bossa
//   Tokens based on the Jazz parser

options {
  JAVA_UNICODE_ESCAPE = true;
  DEBUG_LOOKAHEAD = false;
}

PARSER_BEGIN(Parser)

package bossa.parser;

import java.io.*;
import java.util.*;

import bossa.util.*;
import bossa.syntax.*;
import bossa.modules.Module;

class Parser
{
  // it is better to get a Collection than an AST:
  // it is thus easier to get some definitions from a prolog first
  public static Collection parse(Reader r) throws ParseException
  {
    Parser p=new Parser(r);
    return p.definitions();
  }

  /** 
   * Returns a function with no parameters that returns the expression.
   * if exp is 'null', this functions returns void.
   */
  private static FunExp lazyExp(Expression exp)
  {
    List statements=new ArrayList(1);
    if(exp!=null)
      statements.add(new ReturnStmt(exp));
    return new FunExp(Constraint.True(),
		      new ArrayList(0),
		      statements);
  }

  private static FunExp lazyStmt(Statement statement)
  {
    if(statement==null)
      return lazyExp(null);
    if(statement instanceof ExpressionStmt)
      return lazyExp(((ExpressionStmt)statement).exp);

    List statements=new ArrayList(1);
    statements.add(statement);
    return new FunExp(Constraint.True(),
		      new ArrayList(0),
		      statements);
  }

  private static IdentExp symb(String name, Token t)
  {
    return new IdentExp(new LocatedString(name,new Location(t)));
  }
}
PARSER_END(Parser)

/***********************************************************************
 * Comments
 ***********************************************************************/

// picked from JavaCC-1.1.jj grammar out of JavaCC examples

/* WHITE SPACE */

SKIP : { " " | "\t" | "\n" | "\r" | "\f" }

/* COMMENTS */

MORE :
{
  "//" : IN_SINGLE_LINE_COMMENT
|
  <"/**" ~["/"]> { input_stream.backup(1); } : IN_FORMAL_COMMENT
|
  "/*" : IN_MULTI_LINE_COMMENT
}

<IN_SINGLE_LINE_COMMENT>
SPECIAL_TOKEN :
{
  <SINGLE_LINE_COMMENT: "\n" | "\r" | "\r\n" > : DEFAULT
}

<IN_FORMAL_COMMENT>
SPECIAL_TOKEN :
{
  <FORMAL_COMMENT: "*/" > : DEFAULT
}

<IN_MULTI_LINE_COMMENT>
SPECIAL_TOKEN :
{
  <MULTI_LINE_COMMENT: "*/" > : DEFAULT
}

<IN_SINGLE_LINE_COMMENT,IN_FORMAL_COMMENT,IN_MULTI_LINE_COMMENT>
MORE :
{
  < ~[] >
}

/***********************************************************************
 * Reserved tokens
 ***********************************************************************/

TOKEN: /* Separators, Delimiters */
{
  < LPAR:       "("   >
| < RPAR:       ")"   >
| < LBRK:       "["   >
| < RBRK:       "]"   >
| < LBRACE:     "{"   >
| < RBRACE:     "}"   >
| < LPRAGMA:    "<*"  >
| < RPRAGMA:    "*>"  >
| < DOT:        "."   >
| < COLON:      ":"   >
| < COMMA:      ","   >
| < SEMI:       ";"   >
| < DOTDOT:     ".."  >
| < MAPSTO:     "->"  >
| < COND:       "?"   >
| < ANY:        "_"   >
| < BACKSLASH:  "\\"  >      
}

TOKEN: /* Operators */
{
  < EQ:      "="   >
| < PLUS:    "+"   >
| < MINUS:   "-"   >
| < POWER:   "**"  >
| < MULT:    "*"   >
| < SLASH:   "/"   >
| < NEQ:     "!="  >
//| < DIV:     "div" >
| < MOD:     "%"   >
| < LNOT:    "!"   >
| < BAND:    "&"   >
| < BOR:     "|"   >
| < BXOR:    "^"   >
| < BNOT:    "~"   >
| < LEQ:     "<="  >
| < GEQ:     ">="  >
| < EQEQ:    "=="  >
| < SUB:     "<:"  >
| < LT:      "<"   >
| < GT:      ">"   >
| < LAND:    "&&"  >
| < LOR:     "||"  >
| < LSHIFT:  "<<"  >
// RSHIFT is not a token: operator >> is made of two consecutive tokens ">"
}

TOKEN: /* Keywords */
{
  < CLASS:      "class"      >
| < INTERFACE:  "interface"  >
| < IMPLEMENTS: "implements" >
| < DOMAIN:     "domain"     >
| < AT:         "@"          >
| < EXACTLY_AT: "#"          >
| < ASSERT:     "assert"     >
| < INPUT:      "input"      >
| < OUTPUT:     "output"     >
| < FOR:        "for"        >
| < IF:         "if"         >
| < ELSE:       "else"       >
| < ENDIF:      "endif"      >
| < WHILE:      "while"      >
		  //| < TRUE:       "true"       >
		  //| < FALSE:      "false"      >
| < PRINT:      "print"      >
| < FORMAT:     "format"     >
| < ERROR:      "error"      >
| < FUN:        "fun"        >
//| < ALIKE:      "alike"      >
//| < THIS:       "this"       >
| < EXTENDS:    "extends"    >
| < RESET:      "reset"      >
| < ENABLE:     "enable"     >
| < NATIVE:     "native"     >
| < FINAL:      "final"      >
| < FINALLY:    "finally"    >
| < ABSTRACT:   "abstract"   >
| < LOCAL:      "local"      >
| < PRAGMA:     "pragma"     >
//| < INSTANCEOF: "instanceof" >
| < DYNAMIC:    "dynamic"    >
| < NEW:        "new"        >
| < PUBLIC:     "public"     >
| < STATIC:     "static"     >
| < IMPORT:     "import"     >
| < PACKAGE:    "package"    >
| < REQUIRE:    "require"    >
| < EXPORT:     "export"     >
| < EXTERN:     "extern"     >
| < AS:         "as"         >

| < ANY_:	"Any"        >
// Statements
| < RETURN:     "return"     >
| < VARIABLE:   "var"   >

// reserved for future use
| < PRIVATE:    "private"    >
| < PROTECTED:  "protected"  >      
}


/***********************************************************************
 * Literals
 ***********************************************************************/
TOKEN: /* Different kinds of digits */
{
  < #DIGIT:  ["0"-"9"] >                     // decimal
| < #XDIGIT: ["0"-"9", "a"-"f", "A"-"F"] >   // hexadecimal
| < #ODIGIT: ["0"-"7"] >		     // octal
| < #BDIGIT: ["0", "1"] >		     // binary
}


TOKEN: /* Integer literals */
{
  < LINT: (  (<DIGIT>)+				// decimal
           | "0" ["x", "X"] (<XDIGIT>)+		// hexadecimal
	   | "0" ["o", "O"] (<ODIGIT>)+		// octal
          )
  >
}

//TOKEN: /* 2adic literals */
//{
//  < LPER: "#" (  (<BDIGIT>)+			    // binary finite 2adic
//	       |  (<BDIGIT>)* "(" (<BDIGIT>)* ")"   // periodic 2adic
//              )
//  >
//}

TOKEN: /* Floating point literals */
{
  < FLOATING_POINT_LITERAL:
        (["0"-"9"])* "." (["0"-"9"])+ (<EXPONENT>)?
      | (["0"-"9"])+ <EXPONENT> 
  >
|
  < #EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+ >
      }


TOKEN: /* String literals */
{
  < LSTRING:
      "\""
      (   (~["\"","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )*
      "\""
  >
}

/***********************************************************************
 * Identifiers
 ***********************************************************************/
// identifiers are the same as in Java, except that:
// 1. the character $ is not allowed
// 2. the character ' is allowed
// XXX: conform to Java
TOKEN:
{
  < IDENT: <IDENT_START> (<IDENT_PART>)* >
| < #IDENT_PART:       (<IDENT_START> | <IDENT_DIGIT> | "'") >
| < #IDENT_START:
     [
      "\u0041"-"\u005a",
      "\u005f", 
      "\u0061"-"\u007a",
      "\u00c0"-"\u00d6",
      "\u00d8"-"\u00f6",
      "\u00f8"-"\u00ff",
      "\u0100"-"\u1fff",
      "\u3040"-"\u318f",
      "\u3300"-"\u337f",
      "\u3400"-"\u3d2d",
      "\u4e00"-"\u9fff",
      "\uf900"-"\ufaff"
     ]
  >
| < #IDENT_DIGIT:
    [
     "\u0030"-"\u0039",
     "\u0660"-"\u0669",
     "\u06f0"-"\u06f9",
     "\u0966"-"\u096f",
     "\u09e6"-"\u09ef",
     "\u0a66"-"\u0a6f",
     "\u0ae6"-"\u0aef",
     "\u0b66"-"\u0b6f",
     "\u0be7"-"\u0bef",
     "\u0c66"-"\u0c6f",
     "\u0ce6"-"\u0cef",
     "\u0d66"-"\u0d6f",
     "\u0e50"-"\u0e59",
     "\u0ed0"-"\u0ed9",
     "\u1040"-"\u1049"
    ]
  >
}
 
/*
 * Illegal tokens
 */
TOKEN:
{
  < ILLEGAL_TOKEN: (~[]) >
}

/***********************************************************************/
/*                          Grammar                                    */
/***********************************************************************/

String rawString():
{
  Token t;
}
{
  t=<LSTRING>
  { return t.image.substring(1, t.image.length() - 1); }
}

LocatedString string():
{
  Token t;
}
{
  t=<IDENT> 
  { return new LocatedString(t.image,new Location(t)); }
}

LocatedString methodName():
{
  LocatedString res;
  Token name;
}
{
  (
   name=<LSTRING>
   { res = new LocatedString(name.image.substring(1, name.image.length() - 1),
			     new Location(name),
			     true); }
  |
   res = string()
  )
  { return res; }
}

LocatedString doted_string():
{
  Token t;
  String image;
  Location loc;
}
{
  t=<IDENT> { image=t.image; loc = new Location(t); }
    ( "." t=<IDENT> {image+="."+t.image; loc.englobe(new Location(t)); } ) *
  { return new LocatedString(image,loc); }
}

Collection strings():
{
  Collection res=new ArrayList();
  LocatedString s;
}
{
  s=string() { res.add(s); }
  ( "," s=string() { res.add(s); } )*
  { return res; }
}

int integer():
{
  Token t;
}
{
  t = <LINT> { return Integer.parseInt(t.image); }
}

double floating():
{
  Token t;
}
{
  t = <FLOATING_POINT_LITERAL> { return Double.parseDouble(t.image); }
}

/***********************************************************************/
/*                          Type Symbols                               */
/***********************************************************************/

TypeConstructor typeConstructor():
{
  LocatedString name;
}
{
  name=doted_string()
  { return new TypeConstructor(name); }
}

Interface itf():
{
  LocatedString name;
}
{
  name=string()
  {
    return new Interface(name);
  }
}

List typeConstructors():
{
  List res=new ArrayList();
  TypeConstructor t;
}
{
  [
   "<" 
      t=typeConstructor() { res.add(t); }
      ( "," t=typeConstructor() { res.add(t); } )*   
   ">"
  ]
  { return res; }
}

TypeIdent typeIdent():
{
  LocatedString name;
}
{
  name=string()
  { return new TypeIdent(name);
  }
}

MonoSymbol monoSymbol():
{
  LocatedString name;
  Monotype type;
}
{
  type=monotype()
  name=string()
  { return new MonoSymbol(name,type,null); }
}

List monoSymbols():
{
  List res=new ArrayList();
  MonoSymbol name;
}
{
  (
    name=monoSymbol() { res.add(name); }
    ( "," name=monoSymbol() { res.add(name); } )*
  )?
  { return res; }
}

/***********************************************************************/
/*                          Constraints                                */
/***********************************************************************/

TypeSymbol binder(Collection atomics):
{
  TypeConstructor first,second=null;
  MonotypeVar id;
}
{
  "Any" id=monotypeVar()
  { return id;
  }
|
  first=typeConstructor() 
  second=typeConstructor()
  { 
    //if(second==null)
      //return first;
    atomics.add(new TypeConstructorLeqCst(second,first)); 
    return second; 
  }
}

List binders(Collection atomics):
{
    List res=new ArrayList();
    TypeSymbol t;
}
{
    t=binder(atomics) { res.add(t); }
    ( "," t=binder(atomics) { res.add(t); } )*
    { return res; }
}

AtomicConstraint atomicConstraint():
{
  Monotype m1,m2;  
  TypeConstructor t;
  Interface i;
  AtomicConstraint res;
}
{
(
  LOOKAHEAD(2)
  (
   m1=monotype()
   "<:"
   m2=monotype()
   { res=new MonotypeLeqCst(m1,m2); }
  )
|
  (
   t=typeConstructor()
   ":"
   i=itf()
   { res=new ImplementsCst(t,i); }
  )
)
  { return res; }
}

List atomics(List init):
// if init is null, we just want lookahead
{
  List res=init;
  AtomicConstraint k;
}
{
  k=atomicConstraint() { if(res!=null) res.add(k); }
  ( "," k=atomicConstraint() { if(res!=null) res.add(k); } ) *
  { return res; }
}

Constraint constraint():
{
  Constraint res;
  List b=null;
  List atoms=new ArrayList();
}
{
  (
    ( "<" 
      ( 
	LOOKAHEAD(atomics(null)) atoms=atomics(atoms) 
      | 
        b=binders(atoms) [ "|" atoms=atomics(atoms) ] 
      )
      ">" 
      
      { res=new Constraint(b,atoms); }
    )
    | { res=Constraint.True(); }
  )
  { return res; }
}

/***********************************************************************/
/*                          Types                                      */
/***********************************************************************/

//Monotypes

MonotypeVar monotypeVar():
{
  LocatedString name;
}
{
  //TMP
  [ "+" ]
  name=doted_string()
  { return new MonotypeVar(name); }
}

List monotypeVars():
{
    List res=new ArrayList(0);
    MonotypeVar var;
}
{
    ( "<" 
      var=monotypeVar() { res.add(var); }
      ( "," var=monotypeVar() { res.add(var); } )*
    ">" )?
    { return res; }
}

Monotype monotypeConstructor():
{
    TypeConstructor t;
    List p=null;
    Token first,last;
}
{
  { first=getToken(1); }
  // monotypeConstructors with no type parameters (and no "<" ">")
  // are parsed as MonotypeVars, not here.
  // This is fixed during scoping.
    t=typeConstructor() 
    "<" [  p=monotypes() ] ">"
    { if(p==null) p=new ArrayList(0);
      last=getToken(0);
      Location loc=new Location(first).englobe(new Location(last));
      return new MonotypeConstructor(t,new TypeParameters(p),loc); 
    }
}

FunType funmonotype():
{
    Monotype codom=null;
    List dom=null;
    Constraint cst;
    Token t;
}
{
    "fun" "(" [ dom=monotypes() ] ")" 
    t="(" [ codom=monotype() ] ")"
    { if(codom==null) codom=
      new MonotypeConstructor
      (new TypeConstructor(new LocatedString("void",new Location(t))),
       new TypeParameters(null),new Location(t)); }
    { return new FunType(dom,codom); }
}

Monotype monotype():
{
  Monotype res;
}
{
  (
  res=funmonotype()
|
  LOOKAHEAD(monotypeConstructor())
  res=monotypeConstructor()
| 
  res=monotypeVar() 
  )
  { return res; }
}

List monotypes():
{
  List res=new ArrayList();
  Monotype t;
}
{
  t=monotype() { res.add(t); }
  ( "," t=monotype() { res.add(t); } )*
  { return res; }
}

TypeParameters typeParameters():
{
  List res=new ArrayList();
  Monotype t;
}
{
  ( "<" 
    t=monotype() { res.add(t); }
    ( "," t=monotype() { res.add(t); } )*
  ">" )
  { return new TypeParameters(res); }
}

//Polytypes

Polytype funpolytype():
{
    Monotype codom;
    List dom;
    Constraint cst;
}
{
    "fun" cst=constraint() "(" dom=monotypes() ")" "(" codom=monotype() ")"
    { return new Polytype(cst,new FunType(dom,codom)); }
}

Polytype polytype():
{
  Polytype res;
  Constraint cst;
  Monotype m;
}
{
  cst=constraint()
  m=monotype() 
  { res=new Polytype(cst,m); }
  { return res; }
}

/***********************************************************************/
/*                          Classes                                    */
/***********************************************************************/

MethodDefinition classMethodDefinition(ClassDefinition c):
{
  LocatedString name;
  List parameters;
  Constraint cst;
  Monotype returnType;
  MethodDefinition def;
}
{
  returnType=monotype()
  name=string()
  cst=constraint()
  "("
  parameters=monotypes()
  ")"
  ";"
  { 
    return new MethodDefinition(c,name,cst,returnType,parameters); 
  }
}

List extensions():
{
  List res=new ArrayList(0);
  TypeConstructor name;
}
{
  "extends"
    name=typeConstructor() { res.add(name); }
  ( "," name=typeConstructor() { res.add(name); } )*
    { return res; }    
}

List interfaces():
{
  List res=new ArrayList(0);
  Interface name;
}
{
  name=itf() { res.add(name); }
  ( "," name=itf() { res.add(name); } )*
    { return res; }
}

void getField(List fields):
{
  MonoSymbol field;
  boolean isFinal=false, isLocal=false;
}
{
  [ "final" { isFinal=true; } 
  | "local" { isLocal=true; }
  ] 
  field=monoSymbol() ";" 
  { fields.add(new ClassDefinition.Field(field,isFinal,isLocal)); }
}

ClassDefinition classDefinition():
{
  LocatedString name;
  List parameters;
  List fields=new ArrayList(),methods=new ArrayList(0);
  List ext=new ArrayList(0),imp=new ArrayList(0),abs=new ArrayList(0);
  List l;
  boolean isFinal=false, isAbstract=false;
  ClassDefinition res;
}
{
  [ "final"    { isFinal=true; } 
  | "abstract" { isAbstract=true; }
  ]
  "class"
    name=string() 
    parameters=monotypeVars() 

  ( "implements" l=interfaces() { imp.addAll(l); } 
  | "finally" "implements"  l=interfaces() { abs.addAll(l); }
  | l=extensions()      { ext.addAll(l); }
  )*

  "{" (getField(fields))* "}"

  { 
    res=new ClassDefinition(name,isFinal,isAbstract,false,parameters,
			    ext,imp,abs,fields,methods);
    return res; 
  }
}

InterfaceDefinition interfaceDefinition():
{
  LocatedString name;
  Collection parameters;
  List extensions=null;
}
{
  "interface"
  name=string()
  parameters=monotypeVars()
  [ "extends" extensions=interfaces() ]
  ";"
  { return new InterfaceDefinition(name,parameters,extensions); }
}

Pattern pattern(LocatedString name):
{
    TypeConstructor tc=null;
    Monotype type=null;
}
{
  [
    "@" tc=typeConstructor() 
  | 
    "#" tc=typeConstructor()
    { tc.name.prepend("#"); }
  ]
  [
    ":" type=monotype()
  ]
  { return new Pattern(name,tc,type); }
}

MethodBodyDefinition methodBodyDefinition():
{
    LocatedString name,i;
    Pattern p;
    Collection binders=null;
    List atomics=new ArrayList();
    List newTypeVars=null;
    List parameters=new ArrayList();
    List code;
    Expression exp;
}
{
    name=methodName()
    [ "<" binders=strings() ">" ]
// introducing new Type variables
    [ "[" newTypeVars=binders(atomics) "]" ]
    p=pattern(new LocatedString("this",new Location(0,0,0,0))) 
    { parameters.add(p); }
    "("
    ( 
	i=string() p=pattern(i) { parameters.add(p); }
	( "," i=string() p=pattern(i) { parameters.add(p); } )*
    )?
    ")"
    ( 
      // A true body
      "{" code=statements() "}"
    |
      // An expression
      "=" exp=expression() ";"
      { 
	code=new ArrayList(1);
	code.add(new ReturnStmt(exp));
      }
    )
    { return new MethodBodyDefinition(name,binders,
				      newTypeVars,atomics,
				      parameters,code); }
}

MethodDefinition methodDefinition():
{
    LocatedString name;
    Monotype returnType;
    List parameters;
    Constraint cst;
    MethodDefinition res;
}
{
  cst=constraint()
    returnType=monotype()
    name=methodName()
    "("
    ( parameters=monotypes() | { parameters=new ArrayList(); } )
    ")"
    
    (
      // Bossa method
      ";"
      { return new MethodDefinition(name,cst,returnType,parameters); }
    |
      // Native (java) method
      "=" "native"

      {
	List javaTypes=null;
	LocatedString method,s;
      }

      s=doted_string() 
      // if we stop here, it's a static field
      // else it's a method
      ( 
       ";"
       { method=s; }
      | 
       { 
	 javaTypes=new ArrayList();
	 javaTypes.add(s); 
       }
       method=doted_string()
       "("
       [
	s=doted_string() { javaTypes.add(s); }
	( "," s=doted_string() { javaTypes.add(s); } )*
       ]
       ")"  
       ";"
       )
      { 
	int dot=method.toString().lastIndexOf('.');
	String methodName=method.toString().substring(dot+1,method.toString().length());
	LocatedString className=method.substring(0,dot);

	if(javaTypes!=null)
	  return new JavaMethodDefinition(className,methodName,javaTypes,name,cst,returnType,parameters);
	else
	  return new StaticFieldAccess(className,methodName,name,cst,returnType,parameters);
      }
    )
}

Definition globalVariable():
{
  LocatedString name;
  Monotype t;
  Expression value=null;
}
{
  "var"
  t=monotype()
  name=string()
  [ "=" value=expression() ]
  ";"
  { return new LocalDeclarationStmt(name,t,value,true); }
}

Definition definition():
{
    Definition res;
}
{
  (
    res=classDefinition()
  | 
    res=interfaceDefinition()
  | 
    res=globalVariable()
  |
    LOOKAHEAD( constraint() monotype() methodName() )
    res=methodDefinition()
  | 
    res=methodBodyDefinition()
  )
  { return res; }
}

List definitions():
{
    List res=new ArrayList();
    Definition d;
}
{
  (d = definition() 
   { 
     res.add(d); 
     Collection ads=d.associatedDefinitions();
     if(ads!=null)
       res.addAll(ads);
   }
  )*
  <EOF> 
  { return res; }
}

/***********************************************************************/
/*                          Expressions                                */
/***********************************************************************/

IntConstantExp intConstantExp():
{
  int i;
}
{
  i=integer()
  { return new IntConstantExp(i); }
}

FloatConstantExp floatConstantExp():
{
  double d;
}
{
  d=floating()
  { return new FloatConstantExp(d); }
}

StringConstantExp stringConstantExp():
{
  String s;
}
{
  s=rawString()
  { return new StringConstantExp(s); }
}

ConstantExp constantExp():
{
  ConstantExp res;
}
{
  (
  res=intConstantExp() 
| res=floatConstantExp()
| res=stringConstantExp()
  )
{ return res; }
}

Expression ifExp():
{
  Token iftoken;
  Expression condition;
  Expression t,e=null;
}
{
  iftoken="if"
  "("
  condition=expression()
  ")"
  //t=statementInIf()
  t=subExpression()
  [ "else" 
    //e=statementInIf() 
    e=subExpression()
    "endif" 
  ]
  {
    return new IfExp(condition,t,e);
  }
}

IdentExp identExp():
{
  LocatedString i;
}
{
  i=string()
  { return new IdentExp(i); }
}

NewExp newExp():
{
  TypeConstructor t;
}
{
  "new" 
  t=typeConstructor()
  "(" ")" 
  { return new NewExp(t); }
}

CallExp callExp(Expression prefix):
{
  List parameters;
}
{
  "("
  parameters=expressions()
  ")"
  { return new CallExp(prefix,parameters); }
}

Expression computedExp(Expression prefix):
{
  Expression res=prefix;
  List parameters;
  LocatedString name;
}
{
  (
    { parameters=null; }
    "." name=string()
    [ "(" parameters=expressions() ")" ]
    { 
      if(parameters==null)
        parameters=new ArrayList(1);
      parameters.add(0,res);
      res = new CallExp(new IdentExp(name),parameters); 
    }
  |
    res=callExp(res)
  )*
  { return res; }
}

FunExp funExp():
{
  List formals;
  Constraint cst;
  List body;
  Expression exp;
}
{
  "fun" 
  cst=constraint()
  "(" formals=monoSymbols() ")"
  "=>"
  (
    "{" body=statements() "}"
  |
    exp=expression()
    { 
      body=new ArrayList(1);
      body.add(new ReturnStmt(exp));
    }
  )
  { return new FunExp(cst,formals,body); }
}

Expression expression1():
{
  Expression res;
  IdentExp e;
  Token first,last;
}
{
  { first=getToken(1); }
  (
  "(" res=expression() ")"
|
  res=constantExp()
| 
  res=ifExp()
|
  res=newExp()
|
  res=funExp()
| 
  e=identExp() res=computedExp(e)
  )
  { 
    last=getToken(0); 
    res.setLocation(new Location(first).englobe(new Location(last)));
    return res; 
  }
}

Expression expression():
{
  Expression res,e;
  Token t,first,last;
}
{
  { first=getToken(1); }
  res=expression1() 
    [ (
       t="=" e=expression()
       { res=new AssignExp(res,e); }
      |
       t="==" e=expression() 
       { res=CallExp.create(symb("==",t),res,e); }
      |
       t="<" e=expression()
       { res=CallExp.create(symb("<",t),res,e); }
      |
       t=">" e=expression()
       { res=CallExp.create(symb(">",t),res,e); }
      |
       t="<=" e=expression()
       { res=CallExp.create(symb("<=",t),res,e); }
      |
       t=">=" e=expression()
       { res=CallExp.create(symb(">=",t),res,e); }
      |
       t="[" e=expression() "]"
       { res=CallExp.create(symb("get",t),res,e); }
      |
       t="^" e=expression()
       { res=CallExp.create(symb("^",t),res,e); }
      |
       t="+" e=expression()
       { res=CallExp.create(symb("+",t),res,e); }
      |
       t="-" e=expression()
       { res=CallExp.create(symb("-",t),res,e); }
      |
       t="*" e=expression()
       { res=CallExp.create(symb("*",t),res,e); }
      |
       t="/" e=expression()
       { res=CallExp.create(symb("/",t),res,e); }
      |
       t="&&" e=expression()
       { res=CallExp.create(symb("&&",t),res,e); }
      |
       t="||" e=expression()
       { res=CallExp.create(symb("||",t),res,e); }
      |
       t="&" e=expression()
       { res=CallExp.create(symb("&",t),res,e); }
      |
       t="|" e=expression()
       { res=CallExp.create(symb("|",t),res,e); }
      )
    { 
      last=getToken(0);
      res.setLocation(new Location(first).englobe(new Location(last)));
    }
    ]
  { return res; }
}

List expressions():
{
  List res=new ArrayList();
  Expression e;
}
{
  ( e=expression() { res.add(e); }
    ( "," e=expression() { res.add(e); } )*
  )?
  { return res; }
}

/***********************************************************************/
/*                          Statements                                 */
/***********************************************************************/

//  AssignStmt assignment(Expression left):
//  {
//    Expression right;
//  }
//  {
//    "="
//    right=expression()
//    { return new AssignStmt(left,right); }
//  }

Block.LocalDeclaration localDeclaration():
{
  Monotype t;
  LocatedString id;
  Expression e=null;
}
{
  t=monotype()
  id=string()
  [ "=" e=expression() ]
  { return new Block.LocalDeclaration(id,t,e); }
}

Statement statementInIf():
{
  Statement res;
  Expression e=null;
  Token first,last;
}
{
  { first=getToken(1); }
(
  "return" [ e=expression() ]
  { 
    if(e==null)
      res=new ReturnStmt(new VoidConstantExp());
    else
      res=new ReturnStmt(e); 
  }
| 
  (
   // Common prefix
   e=expression()
   //(
   // res=affectation(e)
   //|
    { res=new ExpressionStmt(e); }
   //)
  )
)
  { last=getToken(0);
    res.setLocation(new Location(first).englobe(new Location(last)));
    return res; }
}

Expression subExpression():
{
  Expression res;
}
{
 (
  "{"
  { List stmts; }
  stmts=statements()
  "}"
  { res = new StatementExp(new Block(stmts)); }
 | 
  // Empty body
  ";"
  { res = new VoidConstantExp(); }
 |
  res=expression()
 )
 { return res; }
}

List loopBody():
{
  List res;
  Object stmt;
}
{
 (
  "{"
  res=statements()
  "}"
 | 
  // Empty body
  ";"
  { res = new LinkedList(); }
 |
  stmt=statement()
  { res = new LinkedList();
    res.add(stmt);
  }
 )
   { return res; }
}

Statement whileStmt():
{
  Token whiletoken;
  Expression test;
  List statements;
}
{
  whiletoken="while" "(" test=expression() ")"
  statements = loopBody()
  { 
    return new LoopStmt(test,statements);
  }
}

Statement forStmt():
{
  Token token;
  Expression test;
  List initStmts = new LinkedList();
  List iterStmts = new LinkedList();
  Object stmt;
  List stmts;
}
{
  token="for" 
    "(" 
    [ 
     stmt=statementWithoutSemicolon() { initStmts.add(stmt); }
     ( "," stmt=statementWithoutSemicolon()  { initStmts.add(stmt); } )* 
    ]
    ";"
    test=expression() 
    ";"
    [ 
     stmt=statementWithoutSemicolon() { iterStmts.add(stmt); }
     ( "," stmt=statementWithoutSemicolon()  { iterStmts.add(stmt); } )* 
    ]
    ")"
  stmts=loopBody()
  { 
    initStmts.add(new LoopStmt(test,stmts,iterStmts));
    return new Block(initStmts);
  }
}

Object statement():
{
  Object res;
}
{
  res=statementWithoutSemicolon() 
  (
   LOOKAHEAD({res instanceof bossa.syntax.Block
	      || res instanceof bossa.syntax.LoopStmt})
   {}
  |
   ";"
  )
  { return res; }
}

Object statementWithoutSemicolon():
{
  Object res;
  Expression e=null;
  Token first,last;
}
{
  { first=getToken(1); }
(
 "return" [ e=expression() ]
 { 
   if(e==null)
     res=new ReturnStmt(new VoidConstantExp());
   else
     res=new ReturnStmt(e); 
 }
|
  res=whileStmt()
|
  res=forStmt()
|  
  LOOKAHEAD(monotype() string())
  res=localDeclaration()
| 
  e=expression()
  { res=new ExpressionStmt(e); }
)

  { 
    last=getToken(0);

    if(res instanceof Statement) ((Statement)res).setLocation(new Location(first).englobe(new Location(last)));
    return res; }
}

List statements():
{
  List res=new ArrayList();
  Object s;
}
{
  ( s=statement() { res.add(s); } )*
  { return res; }
}

/****************************************************************
 * Imported Packages
 ****************************************************************/

List packages():
{
  List res=new ArrayList();
  LocatedString name;
}
{
  (
   "import" name=doted_string() 
   [ ".*" { name.append(".*"); } ]
   ";"
   { res.add(name); }
  )*
  { return res; }
}

/****************************************************************
 * Modules
 ****************************************************************/

Module module(String name):
{
}
{
  { return new Module(name,packages(),definitions()); }
}
