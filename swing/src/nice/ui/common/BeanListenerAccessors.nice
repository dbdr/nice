
/**************************************************************************/
/*                                                                        */
/*  This program is free software; you can redistribute it and/or modify  */
/*  it under the terms of the GNU General Public License as published by  */
/*  the Free Software Foundation; either version 2 of the License, or     */
/*  (at your option) any later version.                                   */
/*                                                                        */
/**************************************************************************/


package nice.ui.common;


/**
 * DECLARATION of methods to get nice.ui.beans.NiceListeners from nice.ui.beans.NiceListenerHandlers
 */

public <PropertyChangeListenerHandler H> NicePropertyChangeListener[?] getNicePropertyChangeListeners(H);
public <VetoableChangeListenerHandler H> NiceVetoableChangeListener[?] getNiceVetoableChangeListeners(H);
public <MappablePropertyChangeListenerHandler H, PropertyChangeKey K> NicePropertyChangeListener[?] getNicePropertyChangeListeners(H,K);
public <MappableVetoableChangeListenerHandler H, PropertyChangeKey K> NiceVetoableChangeListener[?] getNiceVetoableChangeListeners(H,K);
//JDK1.4  public <ExceptionListenerHandler H> NiceExceptionListener[?] getNiceExceptionListeners(H);


/**
 * DEFINITION of functions to make sure that NAWTFooListeners can only be requested 
 * from Gui Controls that are able to handle those NAWTFooListeners
 */

getNicePropertyChangeListeners(this)
{
	?java.util.List<NicePropertyChangeListener> result = propertyChangeListeners.get(this.object());
	return (result == null) ? null : result.toArray();
}

getNiceVetoableChangeListeners(this)
{
	?java.util.List<NiceVetoableChangeListener> result = vetoableChangeListeners.get(this.object());
	return (result == null) ? null : result.toArray();
}

getNicePropertyChangeListeners(this,propertyName@String)
{
	?java.util.List<NicePropertyChangeListener> result = mappablePropertyChangeListeners.get((this.object(),propertyName));
	return (result == null) ? null : result.toArray();
}

getNiceVetoableChangeListeners(this,propertyName@String)
{
	?java.util.List<NiceVetoableChangeListener> result = mappableVetoableChangeListeners.get((this.object(),propertyName));
	return (result == null) ? null : result.toArray();
}

//JDK1.4  getNiceExceptionListeners(this@Encoder)
//JDK1.4  {
//JDK1.4    EventListener[?] listeners = this.getExceptionListeners();
//JDK1.4    return (listeners == null) ? null : fill(new NiceExceptionListener[listeners.length], int i => listeners[i].toNiceExceptionListener());
//JDK1.4  }

//JDK1.4  getNiceExceptionListeners(this@XMLDecoder)
//JDK1.4  {
//JDK1.4    EventListener[?] listeners = this.getExceptionListeners();
//JDK1.4    return (listeners == null) ? null : fill(new NiceExceptionListener[listeners.length], int i => listeners[i].toNiceExceptionListener());
//JDK1.4  }
