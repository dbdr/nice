/// PASS
  assert true;

/// PASS
  boolean ok = true;
  boolean faux = false;
  try { assert faux; ok = false; }
  catch(Error e) {}
  if (! ok) throw new Error();

/// PASS
  assert true : "Should not fail";

/// PASS
  boolean ok = true;
  boolean faux = false;
  try { assert faux : "Should fail"; ok = false; }
  catch(Error e) {}
  if (! ok) throw new Error();

/// Global
String fail() { throw new Error(); }

/// PASS
  assert true : fail();

/// PASS
  // bug #1090913
  foo(1);
  /// TOPLEVEL
String foo(int x);
foo(0) { assert false; }
foo(x) = "";

/// PASS
  // bug #1090913
  foo(1);
  /// TOPLEVEL
int foo(int x);
foo(0) { assert false; }
foo(x) = 1;

/// PASS
  // bug #1090913
  foo(1);
  /// TOPLEVEL
long foo(int x);
foo(0) { assert false; }
foo(x) = 1;

/// PASS
  // testcase for compilation of bug #1113263
  boolean af = false;
  try {
    (new AssertCaseFail()).aMethod();
  } catch(AssertionFailed e) { af = true; }
  assert af; 
  /// Toplevel
  class AssertCaseFail {
    void?->void _aFirstPointer = null;
    void?->void _aSecondPointer = null;
    void aMethod(){
      let void->void fun;
      let first = _aFirstPointer; let second = _aSecondPointer;
      if ( null != first ) fun = first;
      else if( null != second ) fun = second;
      else assert false;
      fun();
    }
  }

/// PASS
  // assertions have an automatic description
  try{
    assert 0 == 1;
    throw new Exception( "AssertionFailed not thrown." );
  }catch(AssertionFailed afe){
    let message = afe.getMessage(); assert message != null;
    assert message.indexOf( "==" ) != -1 : message;
    assert message.indexOf( "main.nice" ) != -1 : message;
  }

/// PASS
  // forced assertions syntax
  try{
    !assert 0 == 1;
    throw new Exception( "AssertionFailed not thrown." );
  }catch(AssertionFailed ok){}

/// PASS
  // optional assertions sytax
  try{
    ?assert 0 == 1;
    throw new Exception( "AssertionFailed not thrown." );
  }catch(AssertionFailed ok){}

/// PASS
  // support Object message
  try{
    !assert 0 == 1 : new Foo();
    throw new Exception( "AssertionFailed not thrown." );
  }catch(AssertionFailed ok){
    !assert ok.getMessage().equals("bar");
    //!assert ok.getCause() == null;
  }
  /// Toplevel
class Foo {
  toString() = "bar";
}
