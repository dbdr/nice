/**************************************************************************/
/*                                N I C E                                 */
/*             A high-level object-oriented research language             */
/*                        (c) Daniel Bonniot 2004                         */
/*                                                                        */
/*  This program is free software; you can redistribute it and/or modify  */
/*  it under the terms of the GNU General Public License as published by  */
/*  the Free Software Foundation; either version 2 of the License, or     */
/*  (at your option) any later version.                                   */
/*                                                                        */
/**************************************************************************/

package bossa.syntax;

class UnknownIdentException extends bossa.util.UserError
{
  LocatedString ident;
}

// should be a method and not a toplvel function
// so that it is compiled in dispatch.class
// it is looked there in TypeIdent.java
// We can change this with TypeIdent.nice ;-)
bossa.util.UserError unknownIdent(LocatedString name);
unknownIdent(name)
{
  /*
  UnknownIdentException res = new UnknownIdentException();
  res.ident = name;
  return res;
  */
  return new bossa.util.UserError(name, "" + name + " is not declared");
}

bossa.util.UserError assignmentError(bossa.util.Located responsible,
				     String target,
				     String targetType,
				     Expression value);
assignmentError(responsible, target, targetType, value)
{
  StringBuffer msg = new StringBuffer(100);
  msg.append("Incorrect type in assignment to ").append(target);
  msg.append("\nFound   : ").append(value.getType().toString());
  msg.append("\nExpected: ").append(targetType);
  return new bossa.util.UserError(responsible, msg.toString());
}

/** Reports an error if an assignment failed because the value assigned
    might be null.

    In that case, an exception is thrown and the call does not return.
    Otherwise, does nothing. 
*/
void reportNullAssignmentError(bossa.util.Located responsible,
			   mlsub.typing.TypingEx t, Expression value, 
			   String toName, mlsub.typing.Monotype toType, 
			   boolean toField = false)
{
  if (! isNullError(t))
    return;

  bossa.util.User.error
  (responsible, 
   "The value " + value.toString() +
   " cannot be assigned to " + 
   (toField ? "field " : "") + toName + 
   " because it might be null.\n\n" +
   "To allow " + toName + " to contain the null value, it should be declared as:\n" + 
   makeUnsure(toType) + " " + toName);
}

// Local Variables:
// nice-xprogram: "nicec -d \"$HOME/Nice/classes\" --sourcepath=\"$HOME/Nice/src\" --classpath=\"$HOME/Nice/classes\""
// End:
