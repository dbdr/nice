/// PASS
  /// Toplevel
  class C<T>
  {
    List<T> l;
  }

/// PASS
  /// Toplevel
  class C<T>
  {
    T x1;
    T x2;
  }

/// PASS
  assert (new Coord(p: new Point(x: 2)).sq() == 4);
  /// Toplevel
class Point { int x; }

class Coord<Point P>
{
  P p;

  P getP() = p;
  int sq() = p.x * p.x;
}

/// FAIL
  Coord<Point> dummy = new Coord(p: "");
  /// Toplevel
class Point { int x; }

class Coord<Point P>
{
  P p;
}

/// FAIL
  Coord<String> c = new Coord();
  /// Toplevel
class Point { int x; }

class Coord<Point P> {}

/// FAIL
  /// COMMENT class constraints must be "inherited" by subclasses.
  Coord<String> c = new Coord2();
  /// Toplevel
class Point { int x; }

class Coord<Point P> {}
class Coord2<Q> extends Coord {}

/// PASS
  /// COMMENT Use 'this' in an implementation of a method declared outside
  /// COMMENT of this class. Checks that dispatch @Coord ensures the 
  /// COMMENT class constraints on the type of the dispatched argument.

  /// Toplevel
class Point { int x; }

class Coord<Point P>
{
  P p;

  toString() = "Coord " + this.p;
}

/// PASS
  /// Toplevel
class Point { int x; }

class Coord<P | P <: Point>
{
}

/// PASS
  /// Toplevel
class Game<S | S <: Number>
//class Game<Number S>
{
  void play(Number p);
  play(p@Number) { }
}

/// PASS
  /// Toplevel
class Game<S | S <: Number>
{
  void play(Game<S> p);
  play(p@Game) { }
}

/// PASS
  /// package game dontcompile
  /// Toplevel
abstract class State<Move M> {}

abstract class Move 
{}
  /// package game.ai import game dontcompile
  /// Toplevel
abstract class State<Move M> extends game.State {}

abstract class Move extends game.Move {}

  /// package game.schnapsen import game, game.ai
  /// Toplevel
class State<M> extends game.ai.State<M> {}

/// FAIL
  /// Toplevel
public class Elem<A> {
  A data;
  toString() = data. /*/// FAIL HERE */ toString();
}

/// PASS
  /// Toplevel
public class Elem<!A> {
  A data;
  toString() = data.toString();
}

/// PASS
  /// package a
  /// Toplevel
public class Elem<!E> {
  E data;
  public E getData() = data;
}
  /// package b import a
 Elem<String> dummy = new Elem(data: "");

/// FAIL
  /// package a
  /// Toplevel
public class Elem<!E> {
  E data;
}
  /// package b import a
  Elem<String> dummy = /* /// FAIL HERE */ new Elem(data: null);

/// PASS
  /// Toplevel
public class Elem<List<String> E> {
  E data;
}

/// FAIL
  /// package a
  /// Toplevel
public class Elem<List<String> E> {
  E data;
}
  /// package b import a
  Elem<List<Sting>> dummy = new Elem(data: "");

/// PASS
  /// package a
  /// Toplevel
public class A<java.io.File T | java.io.File <: T>
{}

  /// package b import a
void dummy() {}

/// PASS bug
class B {}
class A<T | T <: B, B <: T> extends AbstractSet<T> { }

add(a@A, b@B) = super;

/// PASS bug
abstract class B {}
class C extends B {}
class A<T | T <: B, B <: T> extends AbstractSet<T> { }

add(a@A, b@C) = super;

/// PASS
  /// Toplevel
  class A {}
  void do_something( List<A> x ) {}
  class B<A T | A <: T> extends LinkedList<T> {}
  add(x@B, o) {
    do_something(x);
    return super;
  }

/// PASS
 /// Toplevel
interface Bar<V,W> {
    void foobar(V k);
}

class Foo<V,W> implements Bar<V,W> {
    <V,W> foobar(k) {
      V i = k;
    }
}

/// PASS
 /// Toplevel
class A<T>
{
  alike<T> foo();

  <Alike,T> foo() 
  {
    Alike<T> res = this;
    return res;
  }
}


/// PASS
  /// Toplevel
  class Impl<T> {
    T ?-> int bar = T t1 => 0;
  }
  class Foo<T> {
    Impl<int> w = new Impl();
  }

/// PASS
  /// Toplevel
class Bar<U> {
    U e;
}
class II<T> {
    private Bar<T> lp;
    void foo(T element) {
	this.lp = new Bar(e: element);
    }
}

/// PASS
  /// Toplevel
interface A<T> {}
interface C<T> {}
class CImpl<T> extends Impl<T> implements C<T> {}
class Impl<T> {
    T -> int bar = T t1 => 0;
}
class Foo<T> {
    Impl<int> w = new Impl();     // works
    Impl<A<int>> s = new Impl();  // works
    C<A<T>> t = new CImpl();       // does not work!
}

/// PASS
  let B<String> dummy = new B();
  /// Toplevel
class A<T> { T->T f = T x => { T tmp = x; return tmp; }; }
class B<T> extends A<T> {}

/// PASS
  /// Toplevel
class Foo<T> {
  T t;

  { t = t; this.t = t; t = this.t; this.t = this.t; }
}

/// PASS
  /// Toplevel
abstract interface A { 
  void aOp();
}

<A SomeA> class AWrapper<SomeA> {
  SomeA a;
  // Check that we can use a as an A.
  void op() = a.aOp();
}

/// FAIL bug
  new AWrapper().getClass();
  /// Toplevel
class A<T> {}
<A SomeA> class AWrapper<SomeA> {
}

/// PASS
  Translated<SimpleShape<void>> t = new Translated(someShape: new SimpleShape());
  /// Toplevel
abstract class Shape<T> {}

class SimpleShape<T> extends Shape<T> {}

<Shape S, ST, T | S<ST> <: T <: S<ST> >
class Translated<T> extends Shape {
  T someShape;
}

/// PASS
  /// Toplevel
class A<T> {}

<String S> class B<S> extends A<S> {}

/// FAIL
  // bug #992007
  /// Toplevel
<A,B | B <: A> class Foo<B,X>
{
  A a;
  void foo(B b) { a = b; }
}

/// PASS
  A<String> a;
  a = new A(x: null);
  a = new A(x: "");
  a.x = null;
  a.x = "";
  ?String s = a.x;

  /// Toplevel
class A<T>
{
  ?T x;
}

/// FAIL
  A<String> a = new A(x: null);
  String s = a.x;

  /// Toplevel
class A<T>
{
  ?T x;
}

/// PASS
  A<?String> a;
  a = new A(x: "");
  a.x = "";
  String s = a.x;

  /// Toplevel
class A<T>
{
  !T x;
}

/// FAIL
  A<String> a = new A(x: null);

  /// Toplevel
class A<T>
{
  !T x;
}

/// PASS
  A<int> a1 = new A(a: 2);
  ?int i = a1.get(2);
  /// Toplevel
class A<T> {
  T a;

  ?T get(int i);
  get(1) = a;
  get(i) = null;
}

/// FAIL
  /// Toplevel
class A<T> {}
class B<T> extends A<U> {}
