/// PASS
  if (false)
  {
    let dummy = new A();
  }
  /// Toplevel
  class A {}

/// PASS
  /// package a import b
  /// Toplevel
class A { String name = ""; }

  /// package b import a
let dummy = new A();

/// PASS
  /// package b import a
let dummy = new A();

  /// package a import b
  /// Toplevel
class A { String name = ""; }

/// PASS
  /* Checks that constructors are generated even when they are not used. 
     This is important, since Java code could rely on them.
   */
  /// package a
  /// Toplevel
class A extends Error { }

  /// package b import a
Class.forName("a.A").getDeclaredConstructor([ String.class ]);

/// PASS
  /* Checks that constructors are generated even when they are not used. 
     This is important, since Java code could rely on them.
   */
  /// package a
  /// Toplevel
class A extends Error { }

  /// package b import a
Class.forName("a.A").getDeclaredConstructor([ String.class ]);
  /// Toplevel
class B extends A {}
equals(A this, B that) = true;

/// PASS
  /// Toplevel
// The subclass comes before the parent.
class B extends A { int b; }

class A { int a; }

/// PASS
  /// package a
  /// Toplevel
class SymbolTable<Sym>
{
  ?Binder topBinder = null;
}

class Binder {}

<Sym> SymbolTable<Sym> symbolTable() = new SymbolTable();

  /// package b import a
  /// Toplevel
void foo() {
  let SymbolTable<String> t = new SymbolTable();
}

/// PASS
  /// package a
  /// Toplevel
  public class AA<T> { 
      public ?AA<T> x;
  }
  /// package c import a
  {} 
  /// package d import a,c 
  AA<?String> dummy = new AA(x:null);


/// PASS
  /// package a
  /// Toplevel
public class A
{
  private B b = new B();
}
 
public class B { }

  /// package b import a
  {}

/// PASS
  /// package a
  /// Toplevel
class Scope<Sym>
{
  private List<Sym> empty = new Sym[0];
}

  /// package b import a
  Scope<String> s = new Scope();
