/**************************************************************************/
/*                                N I C E                                 */
/*             A high-level object-oriented research language             */
/*                        (c) Daniel Bonniot 2004                         */
/*                                                                        */
/*  This program is free software; you can redistribute it and/or modify  */
/*  it under the terms of the GNU General Public License as published by  */
/*  the Free Software Foundation; either version 2 of the License, or     */
/*  (at your option) any later version.                                   */
/*                                                                        */
/**************************************************************************/

package bossa.syntax;

import bossa.util.*;

/**
   A constructor automatically generated from the list of field of the class
   whose instances it constructs.

 */

class DefaultConstructor extends Constructor
{
  {
    this.addConstructorCallSymbol();
  }

  List<NewField> fields;
  ?MethodDeclaration parent;

  private CompiledConstructor compiledFull = cast(null);
  private ?CompiledConstructor compiledMini = null;

  getInitializationCode(implicitThis)
  {
    this.getCode();
    return notNull(compiledFull.initialization);
  }

  getConstructorInvocation(omitDefaults)
  {
    this.getCode();
    return
      // compiledMini is null if the two versions are identical
      omitDefaults && compiledMini != null
    ? notNull(compiledMini).invoke : compiledFull.invoke;
  }

  void createFirstPass()
  {
    // We want to create bytecode methods in two passes to guarantee a
    // consistent behaviour in case versions with and without defaults omitted
    // clash.

    // Create the full version first. At the moment class methods are created
    // in reverse order, so they don't get the priority for unmangled names.
    compiledFull = new CompiledConstructor(constructor: this);
    compiledFull.createMethod(false);
  }

  computeCode()
  {
    if (classe.getDefinition().inInterfaceFile())
      throw new Error("Constructors are loaded from the compiled package");

    compiledMini = new CompiledConstructor(constructor: this).createMethod(true);

    // Add attributes useful for the nice compiler. These are not needed
    // for the version omitting defaults, since that one is only there for
    // Java users' sake.
    compiledFull.lambda.addBytecodeAttribute(notNull(parameters).asBytecodeAttribute());
    compiledFull.lambda.addBytecodeAttribute(new gnu.bytecode.MiscAttr("default"));

    return notNull(compiledFull.instantiate);
  }

  compile()
  {
    this.getCode();

    if (compiledMini != null)
      notNull(compiledMini).compileBody(true);
    compiledFull.compileBody(false);
  }

  private gnu.expr.Expression callSuper(gnu.expr.Expression thisExp, MonoSymbol[] args,
                               boolean omitDefaults)
  {
    int len = args.length - fields.size();
    List<gnu.expr.Expression> superArgs = new LinkedList();
    superArgs.add(thisExp);
    for (int i = 0; i < len; i++)
      {
        if (! (omitDefaults && notNull(parameters).hasDefaultValue(i)))
          superArgs.add(args[i].compile());
      }

    // A null parent means no parent class: call the Object constructor.
    let superExp = parent == null ?
	objectConstructor : notNull(parent).getConstructorInvocation(omitDefaults);

    return new gnu.expr.ApplyExp(superExp, superArgs.toArray());
  }

  private gnu.expr.Expression body(gnu.expr.Expression thisExp,
                          MonoSymbol[] fullArgs, boolean omitDefaults)
  {
    List<gnu.expr.Expression> body = new ArrayList();
    let superArgs = fullArgs.length - fields.size();

    for (int i = 0; i < fields.size(); i++)
      {
        let value = fields[i].value;

        gnu.expr.Expression fieldValue;
        if (!omitDefaults || value == null)
          // Use the provided parameter.
          fieldValue = fullArgs[superArgs + i].compile();
        else
          // Use the default value.
          fieldValue = value.compile();

        body.add(fields[i].method.compileAssign(thisExp, fieldValue));
      }

    let initializer = classe.getInitializer();
    if (initializer != null)
      body.add(new gnu.expr.IfExp(
	nice.tools.code.Gen.isOfClass(thisExp, classe.getClassExp().getType(), false),
        new gnu.expr.ApplyExp(initializer, [thisExp]),
        gnu.expr.QuoteExp.voidExp));

    if (body.isEmpty())
      return gnu.expr.QuoteExp.voidExp;

    return new gnu.expr.BeginExp(body.toArray());
  }
}

let gnu.expr.Expression objectConstructor = new gnu.expr.QuoteExp
	(new gnu.expr.InitializeProc(
	notNull(gnu.bytecode.Type.pointer_type).getDeclaredMethod("<init>", 0)));

/**
   A wrapper for a bytecode version of this constructor.

   One instance of this class is used to hold the version with all parameters,
   another one holds the version where fields with default values are omitted.
*/
private class CompiledConstructor
{
  DefaultConstructor constructor;

  /** Call the constructor. */
  private gnu.expr.Expression invoke = cast(null);

  /** Call the constructor with an implicit this argument. */
  private ?gnu.expr.Expression initialization = null;

  /** Instantiate the class then call the constructor. */
  private ?gnu.expr.Expression instantiate = null;

  // Things that need to be remembered from the method constructor
  // to the compilation of the body.

  gnu.expr.ConstructorExp lambda = cast(null);

  private MonoSymbol[] fullArgs = cast(null);

  /**
     @param omitDefaults if true, do not take the value of fields with
            default values as parameters, but use that default instead.
  */
  private ?CompiledConstructor createMethod(boolean omitDefaults)
  {
    gnu.bytecode.ClassType thisType = cast(constructor.javaReturnType());
    let thisDecl = new gnu.expr.Declaration("this");
    thisDecl.setType(thisType);

    let parameters = constructor.parameters;

    fullArgs = notNull(parameters).getMonoSymbols();
    let fullArgTypes = constructor.javaArgTypes();

    List<MonoSymbol> args = new LinkedList();
    List<gnu.bytecode.Type> argTypes = new LinkedList();

    for (int i = 0; i < notNull(parameters).size; i++)
      {
        if (omitDefaults && notNull(parameters).hasDefaultValue(i))
          continue;

        args.add(fullArgs[i]);
        argTypes.add(fullArgTypes[i]);
      }

    // Do not create a second constructor omiting defaults if there is
    // no default to omit!
    if (omitDefaults && args.size() == fullArgs.length)
      return null;

    lambda = generateConstructor(thisDecl, argTypes.toArray(), args.toArray());
    constructor.classe.getClassExp().addMethod(lambda);

    invoke = new gnu.expr.QuoteExp(new gnu.expr.InitializeProc(lambda));

    if (! omitDefaults)
      {
	initialization = new gnu.expr.QuoteExp(new gnu.expr.InitializeProc(lambda, true));
	instantiate = new gnu.expr.QuoteExp(new gnu.expr.InstantiateProc(lambda));
      }

    return this;
  }

  private void compileBody(boolean omitDefaults)
  {
    let thisExp = new gnu.expr.ThisExp(lambda.getThisDecl());

    lambda.setSuperCall(constructor.callSuper(thisExp, fullArgs, omitDefaults));

    nice.tools.code.Gen.setMethodBody
      (lambda, constructor.body(thisExp, fullArgs, omitDefaults));
  }
}
