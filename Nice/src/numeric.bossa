/**************************************************************************/
/*                           B O S S A                                    */
/*        A simple imperative object-oriented research language           */
/*                   (c)  Daniel Bonniot 1999                             */
/*                                                                        */
/*  This program is free software; you can redistribute it and/or modify  */
/*  it under the terms of the GNU General Public License as published by  */
/*  the Free Software Foundation; either version 2 of the License, or     */
/*  (at your option) any later version.                                   */
/*                                                                        */
/**************************************************************************/

// File    : numeric.bossa
// Created : Wed Dec 01 15:44:03 1999 by bonniot
//$Modified: Mon Dec 06 17:20:03 1999 by bonniot $

/**
 * Numerical hierarchy.
 * 
 * Wrapper for {@link gnu.math <code>gnu.math</code>}.
 *
 * @author bonniot
 */

import prelude;
import io;

import gnu.math.*;

native Numeric add(Numeric, Numeric) = Numeric Numeric.add(Object);
native N sub<Numeric N>(N, N) = Numeric Numeric.sub(Object);
native Numeric mul(Numeric, Numeric) = Numeric Numeric.mul(Object);
native Numeric div(Numeric, Numeric) = Numeric Numeric.div(Object);
native Numeric pow(Numeric, IntNum)  = Numeric Numeric.power(IntNum);

native Boolean grt(Numeric, Numeric) = boolean Numeric.grt(Object);
native Boolean geq(Numeric, Numeric) = boolean Numeric.geq(Object);

//Boolean leq(Numeric, Numeric);
//leq(x,y) = !(grt(y,x));

native IntNum numerator(RatNum) = 
  IntNum RatNum.numerator();
native IntNum denominator(RatNum) = 
  IntNum RatNum.denominator();

/****************************************************************
 * Infinity
 ****************************************************************/

native RatNum native_infinity(Numeric) = RatNum RatNum.infinity(int);

RatNum positiveInfinity();
positiveInfinity() = native_infinity(1);
RatNum negativeInfinity();
negativeInfinity() = native_infinity(0-1);

// java.lang.Integer -> gnu.math.IntNum
native void set(IntNum, Integer) = void IntNum.set(int);

IntNum num(Integer);
num(i)
{
  IntNum res = new IntNum();
  set(res,i);
  return res;
}

main(args)
{
  traceInstructions(true);
  Numeric x = 2^30;
  //x = x^300;
  println(stderr(),x/x);
  Numeric y = x+1;
  //println(x/y);
  println(positiveInfinity());
  println(numerator(negativeInfinity()));
  if(false)
    1//x=21*2
  else
    x=y=3
  endif;
  println(y);
  exit(x);
}
