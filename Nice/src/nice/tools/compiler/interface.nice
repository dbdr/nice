/**************************************************************************/
/*                                N I C E                                 */
/*             A high-level object-oriented research language             */
/*                        (c) Daniel Bonniot 2002                         */
/*                                                                        */
/*  This program is free software; you can redistribute it and/or modify  */
/*  it under the terms of the GNU General Public License as published by  */
/*  the Free Software Foundation; either version 2 of the License, or     */
/*  (at your option) any later version.                                   */
/*                                                                        */
/**************************************************************************/

package nice.tools.compiler;

/**
   Public interface to use the compilation services.

   @version $Date$
   @author Daniel Bonniot (bonniot@users.sourceforge.net)
 */

int compile(Compilation compilation, String mainPackage,
	    ?String nativeProgram = null, ?String nativeCompiler = null,
	    boolean editorMode = false)
{
  ?Throwable uncaughtException = null;

  try {

    OutputMessages.start();

    bossa.util.Location.editorMode = editorMode;
    if (compilation.runtimeFile == null)
      compilation.runtimeFile = getNiceRuntime();
    nice.tools.code.TypeImport.setRuntime(compilation.runtimeFile);
    compilation.setMainPackage(mainPackage);

    bossa.modules.Package.currentCompilation = compilation;

    make(compilation);

    ?String jar = compilation.output;
    if (nativeProgram != null && jar != null)
      produceNativeProgram(nativeCompiler, mainPackage, 
			   nativeProgram, jar);
  }
  catch(OutputMessages.Exit e) {
    // Compilation was interrupted.
    return e.statusCode;
  }
  catch(bossa.util.UserError e){
    bossa.util.Internal.warning("user error only caught in main"); 
    nice.tools.compiler.OutputMessages.error(e.getMessage());
  }
  catch(ExceptionInInitializerError e){
    uncaughtException = e.getException();
  }
  catch(Throwable e){
    uncaughtException = e;
  }

  if (uncaughtException != null)
    {
      Throwable exn = uncaughtException;

      OutputMessages.bug
      ("\nAn exception has occured in the compiler\n" +
       "Please fill-in a bug report at the following webpage:\n" +
       "http://sourceforge.net/tracker/?func=add&group_id=12788&atid=112788" +
       "\n\nException: " + exn.toString() +
       "\n\nStack trace:\n");
      exn.printStackTrace();
    }

  return OutputMessages.getStatusCode();
}

/**
 * Determines the location of the nice runtime.
 * 
 */
private ?String getNiceRuntime() 
{
  String resource = "/nice/tools/compiler/fun.class";

  // Attempt to locate the file using the class loader.
  ?java.net.URL classUrl = dispatch.class.getResource(resource);
		
  if (classUrl == null)
    return null;

  String file = notNull(classUrl.getFile());
  try {
    //	handle as jarfile
    return file.substring(file.indexOf(":")+1, file.indexOf("!"));
  } catch(StringIndexOutOfBoundsException e) {
    //	oops it is a class file
    return file.substring(0, file.indexOf(resource));
  }
}

// Local Variables:
// nice-xprogram: "nicec -d \"$HOME/Nice/classes\" --sourcepath=\"$HOME/Nice/src\" --classpath=\"$HOME/Nice/classes\""
// End:
