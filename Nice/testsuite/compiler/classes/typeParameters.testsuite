/// PASS
  /// Toplevel
  class C<T>
  {
    List<T> l;
  }

/// PASS
  /// Toplevel
  class C<T>
  {
    T x1;
    T x2;
  }

/// PASS
  assert (new Coord(p: new Point(x: 2)).sq() == 4);
  /// Toplevel
class Point { int x; }

class Coord<Point P>
{
  P p;

  P getP() = p;
  int sq() = p.x * p.x;
}

/// FAIL
  new Coord(p: "");
  /// Toplevel
class Point { int x; }

class Coord<Point P>
{
  P p;
}

/// FAIL
  Coord<String> c = new Coord();
  /// Toplevel
class Point { int x; }

class Coord<Point P> {}

/// FAIL
  /// COMMENT class constraints must be "inherited" by subclasses.
  Coord<String> c = new Coord2();
  /// Toplevel
class Point { int x; }

class Coord<Point P> {}
class Coord2<Q> extends Coord {}

/// PASS
  /// COMMENT Use 'this' in an implementation of a method declared outside
  /// COMMENT of this class. Checks that dispatch @Coord ensures the 
  /// COMMENT class constraints on the type of the dispatched argument.

  /// Toplevel
class Point { int x; }

class Coord<Point P>
{
  P p;

  toString() = "Coord " + this.p;
}

/// PASS
  /// Toplevel
class Point { int x; }

class Coord<P | P <: Point>
{
}

/// PASS
  /// Toplevel
class Game<S | S <: Number>
//class Game<Number S>
{
  void play(Number p);
  play(p@Number) { }
}

/// PASS
  /// Toplevel
class Game<S | S <: Number>
{
  void play(Game<S> p);
  play(p@Game) { }
}

/// PASS
  /// package game dontcompile
  /// Toplevel
abstract class State<Move M> {}

abstract class Move 
{}
  /// package game.ai import game dontcompile
  /// Toplevel
abstract class State<Move M> extends game.State {}

abstract class Move extends game.Move {}

  /// package game.schnapsen import game, game.ai
  /// Toplevel
class State<M> extends game.ai.State<M> {}

/// FAIL
  /// Toplevel
public class Elem<A> {
  A data;
  toString() = data. /*/// FAIL HERE */ toString();
}

/// PASS
  /// Toplevel
public class Elem<!A> {
  A data;
  toString() = data.toString();
}

/// PASS
  /// package a
  /// Toplevel
public class Elem<!E> {
  E data;
  public E getData() = data;
}
  /// package b import a
  new Elem(data: "");

/// FAIL
  /// package a
  /// Toplevel
public class Elem<!E> {
  E data;
}
  /// package b import a
  /* /// FAIL HERE */ new Elem(data: null);

/// PASS
  /// Toplevel
public class Elem<List<String> E> {
  E data;
}

/// FAIL
  /// package a
  /// Toplevel
public class Elem<List<String> E> {
  E data;
}
  /// package b import a
  new Elem(data: "");
