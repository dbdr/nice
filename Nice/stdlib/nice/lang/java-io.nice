/****************************************************************************
 *                                 N I C E                                  *
 *              A high-level object-oriented research language              *
 *                         (c) Daniel Bonniot 2003                          *
 *                                                                          *
 *  This package is free software; you can redistribute it and/or modify    *
 *  it under the terms of the GNU General Public License as published by    *
 *  Free Software Foundation; either version 2 of the License, or (at your  *
 *  option) any later version.                                              *
 *                                                                          *
 *  As a special exception, the copyright holders of this library give you  *
 *  permission to link this library with independent modules to produce an  *
 *  executable, regardless of the license terms of these independent        *
 *  modules, and to copy and distribute the resulting executable under      *
 *  terms of your choice.                                                   *
 ****************************************************************************/

/**
   Retypings for the java.io package
 */

import java.io.*(!);

/**
   In Java, System.out and System.err are possibly null.
   In Nice we prevent this to happen, and give them a non-null type.
*/

// prevents to stdout and stderr to be set to null
void setStdout (PrintStream ps) = native void System.setOut(PrintStream);
void setStderr (PrintStream ps) = native void System.setErr(PrintStream);

PrintStream stdout () = native System.out;
PrintStream stderr () = native System.err;

/** Convenience: printing on the standard output. */
<T> void print   (T object) = System.out.print  (object);
<T> void println (T object) = System.out.println(object);

// Constructors
File newFile(?File, String) = native new File(File, String);
File newFile(?String, String) = native new File(String, String);

// OutputStreams
<T> void print(PrintStream, T) = native void PrintStream.print(Object);
<T> void println(PrintStream, T) = native void PrintStream.println(Object);

// Readers
?String readLine(BufferedReader) = native String BufferedReader.readLine();
?String getEncoding(InputStreamReader) = native String InputStreamReader.getEncoding();

// Writers
?String getEncoding(OutputStreamWriter) = native String OutputStreamWriter.getEncoding();
<T> void print(PrintWriter, T) = native void PrintWriter.print(Object);
<T> void println(PrintWriter, T) = native void PrintWriter.println(Object);

// File 
File createTempFile(String, ?String) = native File File.createTempFile(String, String);
File createTempFile(String, ?String, ?File) = native File File.createTempFile(String, String, File);
?String getParent(File) = native String File.getParent();
?File getParentFile(File) = native File File.getParentFile();
?(String[]) list(File) = native String[] File.list();
?(String[]) list(File, FilenameFilter) = native String[] File.list(FilenameFilter);
?(File[]) listFiles(File) = native File[] File.listFiles();
?(File[]) listFiles(File, FileFilter) = native File[] File.listFiles(FileFilter);
?(File[]) listFiles(File, FilenameFilter) = native File[] File.listFiles(FilenameFilter);
?(File[]) listRoots() = native File[] File.listRoots();

// DataInput/Output
?String readLine(DataInput) = native String DataInput.readLine();

// Serialization
<T> void writeObject(ObjectOutput, T) = native void ObjectOutput.writeObject(Object);
<T> T readObject(ObjectInput) = native Object ObjectInput.readObject();
