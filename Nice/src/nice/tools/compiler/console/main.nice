/**************************************************************************/
/*                                N I C E                                 */
/*             A high-level object-oriented research language             */
/*                        (c) Daniel Bonniot 2003                         */
/*                                                                        */
/*  This program is free software; you can redistribute it and/or modify  */
/*  it under the terms of the GNU General Public License as published by  */
/*  the Free Software Foundation; either version 2 of the License, or     */
/*  (at your option) any later version.                                   */
/*                                                                        */
/**************************************************************************/

package nice.tools.compiler.console;

/**
   Nice compiler main program.

   Exit code table:
   0 : Normal exit (compilation sucessful, version message)
   1 : Abnormal termination (bug in the compiler)
   2 : Error reported (file missing, type error, ...)
   3 : Warning reported

   Changes to this table should be reflected in function 
   <code>nice-compilation-exit</code> in emacs mode file 
   <tt>nice-mode.el</tt>.

   @author Daniel Bonniot (bonniot@users.sourceforge.net)
 */

import nice.tools.compiler;
import bossa.modules;
import nice.getopt;
import nice.doc;

/**
   @return a status code describing if the compilation was successful.
     The codes are found in OutputMessages (OK, WARNING, ERROR, BUG).
*/
int compile(String[] args)
{
  nice.tools.util.Chronometer chrono = notNull(nice.tools.util.Chronometer.make("Total"));
  chrono.start();

  boolean memInfo = false, timeInfo = false;
  String mainPackage;
  ?String nativeProgram = null;
  ?String nativeCompiler = null;
  boolean editorMode = false;

  ConsoleOutput consOutput = new ConsoleOutput();
  Compilation compilation = new Compilation
    (listener: consOutput, parser: new bossa.parser.JavaccParser());

  Program prg = new Program
    (name: "nicec", longName: "The Nice Compiler",
     shortDescription: "compiler for the Nice programming language",
     author: "Daniel Bonniot <bonniot@users.sourceforge.net>, <Daniel.Bonniot@inria.fr>",
     seeAlso: "http://nice.sourceforge.net          the Nice Home Page\n" +
              "http://nice.sf.net/compilation.html  compilation instructions\n",
     manualSection: "1",
     arguments: "package", options: cast(null));
  prg.options = 
  [
   option("sourcepath",
	  "Search path for source packages\nPATH is a list of directories and .jar archives",
	  "path",
	  String path => { compilation.sourcePath = path; }),

   option(letter: 'd', "destination",
	  "Destination directory for compiled packages",
	  "dir",
	  String dir => { compilation.destinationDir = dir; }),

   option("classpath",
	  "Search path for compiled packages and libraries\nPATH is a list of directories and .jar archives",
	  "path",
	  String path => { compilation.packagePath = path; }),


   option(letter: 'a', "jar",
	  "Compile to archive\nYou can then run the program with 'java -jar FILE'",
	  "file",
	  String output => { compilation.output = output; }),

   option(letter: 'o', "output",
	  "Generate native executable",
	  "file",
	  String output => { 
	    compilation.output = output + ".jar"; 
	    nativeProgram = output;
	  }),


   option(letter: 'r', "recompile",
	  "Force recompilation of package",
	  () => { compilation.recompileCommandLine = true; }),

   option(letter: 'R', "recompile-all",
	  "Force recompilation of all dependant packages",
	  () => { compilation.recompileAll = true; }),

   option(letter: 'c', "compile",
	  "Compile packages but do not link them",
	  () => { compilation.skipLink = true; }),

   // PRIVATE OPTIONS

   // This options are only usefull for compiling the compiler itself, 
   // so they should not be advertised.
   option("exclude-runtime", visible: false,
	  "Avoid inclusion of the runtime in the archive", 
	  () => { compilation.excludeRuntime = true; }),
   option("runtime", visible: false,
	  "Location of nice.jar", 
	  "file",
	  String file => { compilation.runtimeFile = file; }),

   option("native-compiler",
	  "Location of the native compiler binary (gcj)", 
	  "file",
	  String file => { nativeCompiler = file; }),


   option("editor", "Tell nicec that it is called by an editor.",
	  () => { editorMode = true; }),

   option("man", "Print man page to stdout",
	  () => man(prg)),

   option("version",
	  "Print version info and exit",
	  () => version()),

   option("usage",
	  "Print usage information and exit",
	  () => usage(prg)),

   option("memory",
	  "Print memory usage information after compilation",
	  () => { memInfo = true; }),

   option("benchmark",
	  "Print time usage information after compilation",
	  () => { timeInfo = true; })
  ];

  List<String> rest = parse(prg, args);
  if (rest.size() != 1 || rest[0].length() == 0)
    {
      if (rest.size() > 1)
	println("Supply only one package on the command line.\n" +
		"nicec will automatically find dependancies.");
      usage(prg, ERROR);
    }
  mainPackage = rest[0];

  /* 
     For convenience of command-line tools (shells) with completions, 
     we treat a directory name as the corresponding package name.
     That is, we replace '/' (which is illegal in package names) by '.'.
  */
  mainPackage = mainPackage.deleteAtEnd("/").replace('/', ".");

  compile(compilation, mainPackage, nativeProgram, nativeCompiler, editorMode);
  int res = consOutput.statusCode;

  if (res != BUG)
    {
      if (consOutput.errorCount > 0)
        {
          String msg = "compilation failed with " + consOutput.errorCount 
		+ " error" + (consOutput.errorCount > 1 ? "s" : "");
          if (consOutput.warningCount > 0)
            msg = msg + " and " + consOutput.warningCount 
		+ " warning" + (consOutput.warningCount > 1 ? "s" : "");

          println(msg);
        }
      else if (consOutput.warningCount > 0)
        println("compilation completed with " + consOutput.warningCount
		+ " warning" + (consOutput.warningCount > 1 ? "s" : ""));
    }

  if (memInfo) printMemoryUsage();

  if (timeInfo)
    {
      chrono.stop();
      println("Time mesurements:");
      nice.tools.util.Chronometer.printAll();
    }

  return res;
}

void main(String[] args)
{
  int status = compile(args);

  // A non-zero code is interpreted as error, e.g. by make.
  // We do not want that if there are just warnings.
  // When called from an editor it does not matter, as it should be able to interpret warnings.
  if (! bossa.util.Location.editorMode && status == WARNING)
    status = OK;

  System.exit(status);
}

void version()
{
  println("Nice compiler version " + versionNumber + " (build " + buildDate + ")");
  println("Compiled using JDK " + javaVersion);
  println("Copyright (C) 2003 Daniel Bonniot");
  println("Visit the Nice homepage: http://nice.sourceforge.net");
  System.exit(0);
}

String prettyBytes(long bytes)
{
  long K = 1024;
  if (bytes < 10 * K)
    return ""+bytes+" B";
  else if (bytes < 100 * K)
    return ""+(bytes/K) + "." + ((bytes % K)/100) + " KB";
  else if (bytes < 10*K*K)
    return ""+(bytes/K) + " KB";
  else if (bytes < 100*K*K)
    return ""+(bytes/(K*K)) + "." + ((bytes % (K*K))/(100*K)) + " MB";
  else if (bytes < 10*K*K*K)
    return ""+(bytes/(K*K)) + " MB";
  else 
    return ""+(bytes/(K*K*K)) + " GB";
}

void printMemoryUsage()
{
  Runtime r = Runtime.getRuntime();
  r.gc();
  long total = r.totalMemory();
  long free  = r.freeMemory();
  println("Memory allocated: " + prettyBytes(total) + 
	  ", used: " + prettyBytes(total - free));
}

// Local Variables:
// nice-xprogram: "nicec -d \"$HOME/Nice/classes\" --sourcepath=\"$HOME/Nice/src\" --classpath=\"$HOME/Nice/classes\""
// End:
