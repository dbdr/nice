/****************************************************************************
 *                                 N I C E                                  *
 *              A high-level object-oriented research language              *
 *                         (c) Daniel Bonniot 2003                          *
 *                                                                          *
 *  This package is free software; you can redistribute it and/or modify    *
 *  it under the terms of the GNU General Public License as published by    *
 *  Free Software Foundation; either version 2 of the License, or (at your  *
 *  option) any later version.                                              *
 *                                                                          *
 *  As a special exception, the copyright holders of this library give you  *
 *  permission to link this library with independent modules to produce an  *
 *  executable, regardless of the license terms of these independent        *
 *  modules, and to copy and distribute the resulting executable under      *
 *  terms of your choice.                                                   *
 ****************************************************************************/

/**
   This file wraps certain methods from the java standard library.
   This is usefull to give them precise types.
   In particular, for methods that return non-null results,
   or that don't accept null arguments.

   @version $Date$
   @author Daniel Bonniot (Daniel.Bonniot@inria.fr)
 */

package nice.lang;

import java.text.*;
import java.lang.reflect.*;
import java.lang.ref.*;

//               PACKAGE: java.lang

// result is non-null

Runtime getRuntime() = native Runtime Runtime.getRuntime();
Process exec(Runtime, String[]) = native Process Runtime.exec(String[]);
Class classForName(String name) = native Class Class.forName(String);
Field[] getFields(Class) = native Field[] Class.getFields();
Method[] getMethods(Class) = native Method[] Class.getMethods();
<T, V> V get(Field, T) = native Object Field.get(Object);
<T, V> void set(Field, T, V) = native void Field.set(Object, Object);
String getName(Field) = native String Field.getName();
Class getType(Field) = native Class Field.getType();

String concat(String, String) = native String String.concat(String);
StringBuffer append(StringBuffer, ?String) = 
  native StringBuffer StringBuffer.append(String);
StringBuffer append(StringBuffer, char) = 
  native StringBuffer StringBuffer.append(char);
StringBuffer append(StringBuffer, char[] str, int offset, int len) =
  native StringBuffer StringBuffer.append(char[], int, int);
char[] toCharArray(String) = native char[] String.toCharArray();
<T> StringBuffer append(StringBuffer, T) = 
  native StringBuffer StringBuffer.append(Object);
<T> StringBuffer insert(StringBuffer, int, T) = 
  native StringBuffer StringBuffer.insert(int, Object);
String substring(StringBuffer, int) = 
  native String StringBuffer.substring(int);
String substring(StringBuffer, int, int) = 
  native String StringBuffer.substring(int, int);

java.util.Properties<String,String> getProperties() = 
  native java.util.Properties java.lang.System.getProperties();
?String System_getProperty(String) = native String System.getProperty(String);
<T | T <: ?String> T System_getProperty(String,T) = 
  native String System.getProperty(String, String);
?String System_setProperty(String,String) = 
 native String System.setProperty(String,String);
Enumeration<String> propertyNames(Properties<String,String>) =
  native Enumeration Properties.propertyNames();

<java.lang.Comparable T> int compareTo(T,T) =
 native int java.lang.Comparable.compareTo(Object);

//               PACKAGE: java.text

DateFormat getDateInstance() = native DateFormat DateFormat.getDateInstance();
DateFormat getDateInstance(int style) = native DateFormat DateFormat.getDateInstance(int);

//               PACKAGE: java.util

<T> boolean add(Collection<T>, T) = native boolean Collection.add(Object);
<T> void clear(Collection<T>) = native void Collection.clear();
<T> boolean isEmpty(Collection<T>) = native boolean Collection.isEmpty();
<T> int size(Collection<T>) = native int Collection.size();
<T,U | T <: U> U[] toArray(Collection<T>) = native Object[] Collection.toArray();
<T,U,V | T <: ?V, ?V <: ?U > ?U[] toArray(Collection<T>, ?V[]) = native Object[] Collection.toArray(Object[]);

<T> void add(List<T>, int, T) = native void List.add(int, Object);
<T> T get(List<T>, int) = native Object List.get(int);
<T> T set(List<T>, int, T) = native Object List.set(int, Object);
<T> List<T> subList(List<T>, int, int) = native List List.subList(int, int);

<T> boolean hasNext(Iterator<T>) = native boolean Iterator.hasNext();
<T> T next(Iterator<T>) = native Object Iterator.next();
<T> void remove(Iterator<T>) = native void Iterator.remove();
<T> void add(ListIterator<T>, T) = native void ListIterator.add(Object);
<T> boolean hasPrevious(ListIterator<T>) = native boolean ListIterator.hasPrevious();
<T> int nextIndex(ListIterator<T>) = native int ListIterator.nextIndex();
<T> T previous(ListIterator<T>) = native Object ListIterator.previous();
<T> int previousIndex(ListIterator<T>) = native int ListIterator.previousIndex();
<T> void set(ListIterator<T>, T) = native void ListIterator.set(Object);
<T> int compare(Comparator<T>, T, T) = native int Comparator.compare(Object, Object);
<T> ?Comparator<T> comparator(SortedSet<T>) = native Comparator SortedSet.comparator();
<T> T first(SortedSet<T>) = native Object SortedSet.first();
<T> T last(SortedSet<T>) = native Object SortedSet.last();
<T,U | T <: U> SortedSet<T> headSet(SortedSet<T>, U) = native SortedSet SortedSet.headSet(Object);
<T,U | T <: U> SortedSet<T> tailSet(SortedSet<T>, U) = native SortedSet SortedSet.tailSet(Object);
<T,U,V | T <: U, T <: V> SortedSet<T> subSet(SortedSet<T>, U, V) = native SortedSet SortedSet.subSet(Object, Object);

<K,V> void clear(Map<K,V>) = native void Map.clear();
<K,V> boolean isEmpty(Map<K,V>) = native boolean Map.isEmpty();
<K,V> int size(Map<K,V>) = native int Map.size();
<K,V> ?Comparator<K> comparator(SortedMap<K,V>) = native Comparator SortedMap.comparator();
<K,V> K firstKey(SortedMap<K,V>) = native Object SortedMap.firstKey();
<K,V> K lastKey(SortedMap<K,V>) = native Object SortedMap.lastKey();
<K,V,L | K <: L> SortedMap<K,V> headMap(SortedMap<K,V>, L) = native SortedMap SortedMap.headMap(Object);
<K,V,L | K <: L> SortedMap<K,V> tailMap(SortedMap<K,V>, L) = native SortedMap SortedMap.tailMap(Object);
<K,V,L,M | K <: L, K <: M> SortedMap<K,V> subMap(SortedMap<K,V>, L, M) = native SortedMap SortedMap.subMap(Object, Object);
<K,V> K getKey(Map.Entry<K,V>) = native Object Map.Entry.getKey();
<K,V> V getValue(Map.Entry<K,V>) = native Object Map.Entry.getValue();
<K,V> V setValue(Map.Entry<K,V>, V) = native Object Map.Entry.setValue(Object);

<T> void ensureCapacity(ArrayList<T>, int) = native void ArrayList.ensureCapacity(int);
<T> void trimToSize(ArrayList<T>) = native void ArrayList.trimToSize();
<T> void addFirst(LinkedList<T>, T) = native void LinkedList.addFirst(Object);
<T> void addLast(LinkedList<T>, T) = native void LinkedList.addLast(Object);
<T> T getFirst(LinkedList<T>) = native Object LinkedList.getFirst();
<T> T getLast(LinkedList<T>) = native Object LinkedList.getLast();
<T> T removeFirst(LinkedList<T>) = native Object LinkedList.removeFirst();
<T> T removeLast(LinkedList<T>) = native Object LinkedList.removeLast();
<T> boolean empty(Stack<T>) = native boolean Stack.empty();
<T> T peek(Stack<T>) = native Object Stack.peek();
<T> T pop(Stack<T>) = native Object Stack.pop();
<T> T push(Stack<T>, T) = native Object Stack.push(Object);
<T> void addElement(Vector<T>, T) = native void Vector.addElement(Object);
<T> int capacity(Vector<T>) = native int Vector.capacity();
<T,U | T <: U> void copyInto(Vector<T>, U[]) = native void Vector.copyInto(Object[]);
<T> T elementAt(Vector<T>, int) = native Object Vector.elementAt(int);
<T> T firstElement(Vector<T>) = native Object Vector.firstElement();
<T> T lastElement(Vector<T>) = native Object Vector.lastElement();
<T> void removeElementAt(Vector<T>, int) = native void Vector.removeElementAt(int);
<T> void setElementAt(Vector<T>, T, int) = native void Vector.setElementAt(Object, int);
<T> void insertElementAt(Vector<T>, T, int) = native void Vector.insertElementAt(Object, int);
<T> void setSize(Vector<T>,int) = native void Vector.setSize(int);
<T> void trimToSize(Vector<T>) = native void Vector.trimToSize();
<T> void removeAllElements(Vector<T>) = native void Vector.removeAllElements();
<T> boolean hasMoreElements(Enumeration<T>) = native boolean Enumeration.hasMoreElements();
<T> T nextElement(Enumeration<T>) = native Object Enumeration.nextElement();

<T> AbstractCollection<T> AbstractCollection() = native new AbstractCollection();
<T> AbstractList<T> AbstractList() = native new AbstractList();
<T> AbstractSequentialList<T> AbstractSequentialList() = native new AbstractSequentialList();
<T> AbstractSet<T> AbstractSet() = native new AbstractSet();
<K,V> AbstractMap<K,V> AbstractMap() = native new AbstractMap();
<T> ArrayList<T> ArrayList() = native new ArrayList();        
<T> ArrayList<T> ArrayList(int) = native new ArrayList(int);
<T,U | U <: T> ArrayList<T> ArrayList(Collection<U>) = native new ArrayList(Collection);
<T> LinkedList<T> LinkedList() = native new LinkedList();
<T,U | U <: T> LinkedList<T> LinkedList(Collection<U>) = native new LinkedList(Collection);
<T> Stack<T> Stack() = native new Stack();
<T> Vector<T> Vector() = native new Vector();
<T> Vector<T> Vector(int) = native new Vector(int);
<T> Vector<T> Vector(int, int) = native new Vector(int, int);
<T,U | U <: T> Vector<T> Vector(Collection<U>) = native new Vector(Collection);
<T> HashSet<T> HashSet() = native new HashSet();
<T> HashSet<T> HashSet(int) = native new HashSet(int);
<T> HashSet<T> HashSet(int,float) = native new HashSet(int,float);
<T,U | U <: T> HashSet<T> HashSet(Collection<U>) = native new HashSet(Collection);
<T> LinkedHashSet<T> LinkedHashSet() = native new LinkedHashSet();
<T> LinkedHashSet<T> LinkedHashSet(int) = native new LinkedHashSet(int);
<T> LinkedHashSet<T> LinkedHashSet(int,float) = native new LinkedHashSet(int,float);
<T,U | U <: T> LinkedHashSet<T> LinkedHashSet(Collection<U>) = native new LinkedHashSet(Collection);
<K,V> HashMap<K,V> HashMap() = native new HashMap();
<K,V> HashMap<K,V> HashMap(int) = native new HashMap(int);
<K,V> HashMap<K,V> HashMap(int,float) = native new HashMap(int,float);
<K,K0,V,V0 | K0 <: K, V0 <: V> HashMap<K,V> HashMap(Map<K0,V0>) = native new HashMap(Map);
<K,V> WeakHashMap<K,V> WeakHashMap() = native new WeakHashMap();
<K,V> WeakHashMap<K,V> WeakHashMap(int) = native new WeakHashMap(int);
<K,V> WeakHashMap<K,V> WeakHashMap(int,float) = native new WeakHashMap(int,float);
<K,K0,V,V0 | K0 <: K, V0 <: V> WeakHashMap<K,V> WeakHashMap(Map<K0,V0>) = native new WeakHashMap(Map);
<K,V> IdentityHashMap<K,V> IdentityHashMap() = native new IdentityHashMap();
<K,V> IdentityHashMap<K,V> IdentityHashMap(int) = native new IdentityHashMap(int);
<K,K0,V,V0 | K0 <: K, V0 <: V> IdentityHashMap<K,V> IdentityHashMap(Map<K0,V0>) = native new IdentityHashMap(Map);
<K,V> LinkedHashMap<K,V> LinkedHashMap() = native new LinkedHashMap();
<K,V> LinkedHashMap<K,V> LinkedHashMap(int) = native new LinkedHashMap(int);
<K,V> LinkedHashMap<K,V> LinkedHashMap(int,float) = native new LinkedHashMap(int,float);
<K,V> LinkedHashMap<K,V> LinkedHashMap(int,float,boolean) = native new LinkedHashMap(int,float,boolean);
<K,K0,V,V0 | K0 <: K, V0 <: V> LinkedHashMap<K,V> LinkedHashMap(Map<K0,V0>) = native new LinkedHashMap(Map);
<K,V> Hashtable<K,V> Hashtable() = native new Hashtable();
<K,V> Hashtable<K,V> Hashtable(int) = native new Hashtable(int);
<K,V> Hashtable<K,V> Hashtable(int,float) = native new Hashtable(int,float);
<K,K0,V,V0 | K0 <: K, V0 <: V> Hashtable<K,V> Hashtable(Map<K0,V0>) = native new Hashtable(Map);
<T> TreeSet<T> TreeSet() = native new TreeSet();
<T,U | U <: T> TreeSet<T> TreeSet(Collection<U>) = native new TreeSet(Collection);
<T> TreeSet<T> TreeSet(Comparator<T>) = native new TreeSet(Comparator);
<T> TreeSet<T> TreeSet(SortedSet<T>) = native new TreeSet(SortedSet);
<K,V> TreeMap<K,V> TreeMap() = native new TreeMap();
<K,V> TreeMap<K,V> TreeMap(Comparator<K>) = native new TreeMap(Comparator);
<K,K0,V,V0 | K0 <: K, V0 <: V> TreeMap<K,V> TreeMap(Map<K0,V0>) = native new TreeMap(Map);
<K,V> TreeMap<K,V> TreeMap(SortedMap<K,V>) = native new TreeMap(SortedMap);

interface Collection<T> = native java.util.Collection;
interface Comparator<-T> = native java.util.Comparator;
interface Enumeration<T> = native java.util.Enumeration;
interface List<T> extends Collection<T> = native java.util.List;
interface Set<T> extends Collection<T> = native java.util.Set;
interface SortedSet<T> extends Set<T> = native java.util.SortedSet;
interface Iterator<T> = native java.util.Iterator;
interface ListIterator<T> extends Iterator<T> = native java.util.ListIterator;
interface Map<K,V> = native java.util.Map;
interface SortedMap<K,V> extends Map<T> = native java.util.SortedMap;
interface Map$Entry<K,V> = native java.util.Map.Entry;
class AbstractCollection<T> implements Collection<T> = native java.util.AbstractCollection;
class AbstractList<T> extends AbstractCollection<T> implements List<T> = native java.util.AbstractList;
class AbstractSequentialList<T> extends AbstractList<T> = native java.util.AbstractSequentialList;
class AbstractSet<T> extends AbstractCollection<T> implements Set<T> = native java.util.AbstractSet;
class AbstractMap<K,V> implements Map<K,V> = native java.util.AbstractMap;
class ArrayList<T> extends AbstractList<T> = native java.util.ArrayList;
class Dictionary<K,V> = native java.util.Dictionary;
class HashMap<K,V> extends AbstractMap<K,V> = native java.util.HashMap;
class LinkedHashMap<K,V> extends AbstractMap<K,V> = native java.util.LinkedHashMap;
class HashSet<T> extends AbstractSet<T> = native java.util.HashSet;
class LinkedHashSet<T> extends AbstractSet<T> = native java.util.LinkedHashSet;
class Hashtable<K,V> implements Map<K,V> = native java.util.Hashtable;
class IdentityHashMap<K,V> extends AbstractMap<K,V> = native java.util.IdentityHashMap;
class LinkedList<T> extends AbstractSequentialList<T> = native java.util.LinkedList;
class Stack<T> extends Vector<T> = native java.util.Stack;
class TreeMap<K,V> extends AbstractMap<K,V> implements SortedMap<K,V> = native java.util.TreeMap;
class TreeSet<T> extends AbstractSet<T> implements SortedSet<T> = native java.util.TreeSet;
class Vector<T> extends AbstractList<T> = native java.util.Vector;

<T> Iterator<T> iterator(Collection<T>) = 
  native Iterator Collection.iterator();
<T> ListIterator<T> listIterator(Collection<T>) = 
  native ListIterator List.listIterator();
<T> java.util.ListIterator<T> listIterator(java.util.List<T>, int) =
  native java.util.ListIterator java.util.List.listIterator(int);

<T, U | U <: T> boolean addAll(Collection<T>, Collection<U>) =
  native boolean java.util.Collection.addAll(java.util.Collection);
<T, U | U <: T> boolean addAll(List<T>, int, Collection<U>) =
  native boolean java.util.List.addAll(int, java.util.Collection);

<T, U, V | T <: V, U <: V> boolean containsAll(Collection<T>, Collection<U>) =
  native boolean java.util.Collection.containsAll(java.util.Collection);
<T, U, V | T <: V, U <: V> boolean removeAll(Collection<T>, Collection<U>) =
  native boolean java.util.Collection.removeAll(java.util.Collection);
<T, U, V | T <: V, U <: V> boolean retainAll(Collection<T>, Collection<U>) =
  native boolean java.util.Collection.retainAll(java.util.Collection);

<E,T | E <: T> boolean contains(java.util.Collection<E>, T) =
  native boolean java.util.Collection.contains(Object);
<E,T | E <: T> boolean remove(java.util.Collection<E>, T) =
  native boolean java.util.Collection.remove(Object);

<E,T | E <: T> int indexOf(java.util.List<E>, T) =
  native int java.util.List.indexOf(Object);
<E,T | E <: T> int lastIndexOf(java.util.List<E>, T) =
  native int java.util.List.lastIndexOf(Object);
<E,T | E <: T> int lastIndexOf(java.util.Vector<E>, T, int) =
  native int java.util.Vector.lastIndexOf(Object, int);
<E,T | E <: T> boolean removeElement(java.util.Vector<E>, T) =
  native boolean java.util.Vector.removeElement(Object);
<E,T | E <: T> int search(java.util.Stack<E>, T) = 
  native int java.util.Stack.search(Object);

/* For List<int> there is an ambiguity between 
     remove(int) and remove(T) (since T=int).
   Therefore we rename remove(int) into removeAt(int).
*/
<T> T removeAt(java.util.List<T>, int) = 
  native Object java.util.List.remove(int);

//retypings for Maps
<K, K0, V | K <: K0> boolean containsKey(Map<K, V>, K0) = 
  native boolean java.util.Map.containsKey(Object);

// The results can be null even if the value type is non-optional.
<K, K0, V0, V | K <: K0, V <: ?V0> ?V0 remove(java.util.Map<K, V>, K0)=
  native Object java.util.Map.remove(Object);
<K, K0, V0, V | K <: K0, V <: ?V0> ?V0 get(java.util.Map<K, V>, K0)=
  native Object java.util.Map.get(Object);
<K, V0, V | V <: ?V0> ?V0 put(java.util.Map<K, V>, K, V)=
  native Object java.util.Map.put(Object, Object);

<K, K0, V0, V | K0 <: K, V0 <: V> void putAll(java.util.Map<K, V>, java.util.Map<K0, V0>)=
  native void java.util.Map.putAll(java.util.Map);

<K, V, V0 | V <: V0> boolean containsValue(java.util.Map<K, V>, V0) = 
  native boolean java.util.Map.containsValue(Object);
<K, K0, V | K <: K0> java.util.Set<K0> keySet(java.util.Map<K, V>) =
  native java.util.Set java.util.Map.keySet();
<K, V, V0 | V <: V0> java.util.Collection<V0> values(java.util.Map<K, V>) =
  native java.util.Collection java.util.Map.values();
<K, V> java.util.Set<java.util.Map.Entry<K, V>> entrySet(java.util.Map<K, V>) = 
  native java.util.Set java.util.Map.entrySet();
<K, V, V0 | V <: V0> boolean contains(java.util.Hashtable<K,V>, V0) = 
  native boolean java.util.Hashtable.contains(Object);

//make map[key] = value; possible
<K, V0, V | V <: ?V0> ?V0 set(java.util.Map<K, V>, K, V)=
  native Object java.util.Map.put(Object, Object);

//rename Dictionary methods causing ambiguity in Hashtable
<K, V> V _put(java.util.Dictionary<K, V>, K, V)=
  native Object java.util.Dictionary.put(Object, Object);
<K, V> int _size(java.util.Dictionary<K, V>)=
  native int java.util.Dictionary.size();
<K, V> boolean _isEmpty(java.util.Dictionary<K, V>)=
  native boolean java.util.Dictionary.isEmpty();

//static collections methods
<T> void fill(List<T>, T) = native void Collections.fill(List, Object);
<T> void reverse(List<T>) = native void Collections.reverse(List);
<T> void shuffle(List<T>) = native void Collections.shuffle(List);
<T> void shuffle(List<T>, Random) = 
  native void Collections.shuffle(List, Random);
<T> T max(Collection<T>, Comparator<T>) = 
  native Object Collections.max(Collection, Comparator);
<T> T min(Collection<T>, Comparator<T>) = 
  native Object Collections.max(Collection, Comparator);
<T> void sort(List<T>, Comparator<T>) = 
  native void Collections.sort(List, Comparator);
<T> void swap(List<T>, int, int) =
  native void Collections.swap(List, int, int);
<T> void rotate(List<T>, int) =
  native void Collections.rotate(List, int);
<T,U | T <: U> boolean replaceAll(List<T>, U, T) =
  native boolean Collections.replaceAll(List, Object, Object);
<T,U | T <: U> int indexOfSubList(List<T>, List<U>) =
  native int Collections.indexOfSubList(List, List);
<T,U | T <: U> int lastIndexOfSubList(List<T>, List<U>) =
  native int Collections.lastIndexOfSubList(List, List);
<T,U | T <: U> int binarySearch(List<T>, U, Comparator<T>) = 
  native int Collections.binarySearch(List, Object, Comparator);
<T> List<T> singletonList(T) = 
  native List Collections.singletonList(Object);
<K,V> Map<K,V> singletonMap(K, V) =
  native Map Collections.singletonMap(Object, Object);
<T> Collection<T> synchronizedCollection(Collection<T>) =
  native Collection Collections.synchronizedCollection(Collection);
<T> List<T> synchronizedList(List<T>) =
  native List Collections.synchronizedList(List);
<K,V> Map<K,V> synchronizedMap(Map<K,V>) =
  native Map Collections.synchronizedMap(Map);
<T> Set<T> synchronizedSet(Set<T>) = 
  native Set Collections.synchronizedSet(Set);
<K,V> SortedMap<K,V> synchronizedSortedMap(SortedMap<K,V>) =
  native SortedMap Collections.synchronizedSortedMap(SortedMap);
<T> SortedSet<T> synchronizedSortedSet(SortedSet<T>) =
  native SortedSet Collections.synchronizedSortedSet(SortedSet);
// Return unmodifiable views of collections and maps. It is therefore safe
// to lose precision on the type parameter.
<T,U | T <: U> Collection<U> unmodifiableCollection(Collection<T>) = 
  native Collection Collections.unmodifiableCollection(Collection);
<T,U | T <: U> List<U> unmodifiableList(List<T>) = 
  native List Collections.unmodifiableList(List);
<K,K0,V,V0 | K <: K0, V <: V0> Map<K0,V0> unmodifiableMap(Map<K,V>) = 
  native Map Collections.unmodifiableMap(Map);
<T,U | T <: U> Set<U> unmodifiableSet(Set<T>) = native Set Collections.unmodifiableSet(Set);
<K,K0,V,V0 | K <: K0, V <: V0> SortedMap<K0,V0> unmodifiableSortedMap(SortedMap<K,V>) = 
  native SortedMap Collections.unmodifiableSortedMap(SortedMap);
<T,U | T <: U> SortedSet<U> unmodifiableSortedSet(SortedSet<T>) = 
  native SortedSet Collections.unmodifiableSortedSet(SortedSet);


// static collections fields
<T> List<T> EMPTY_LIST() = native Collections.EMPTY_LIST;
<T> Set<T> EMPTY_SET() = native Collections.EMPTY_SET;
<K,V> Map<K,V> EMPTY_MAP() = native Collections.EMPTY_MAP;


// these 3 have a too large type because they can't use comparable yet.
<T> void sort(List<!T>) = native void Collections.sort(List);
<T> !T min(Collection<!T>) = native Object Collections.min(Collection);
<T> !T max(Collection<!T>) = native Object Collections.max(Collection);

<T,U,V | U <: T, V <: T> boolean Arrays_equals(U[], V[]) = 
  native boolean Arrays.equals(Object[],Object[]);

<T> List<T> asList(T[]) = native List Arrays.asList(Object[]);

// Properties 
class Properties<String K, String V> extends Hashtable<K,V> = native java.util.Properties;
Properties<String, String> Properties() = native new Properties();
Properties<String, String> Properties(Properties<String, String>) = native new Properties(Properties);
?String getProperty(Properties<String, String>, String) = native String Properties.getProperty(String);
<T | T <: ?String> T getProperty(Properties<String, String>, String, T) = native String Properties.getProperty(String, String);
void list(Properties<String, String>, PrintStream) = native void Properties.list(PrintStream);
void list(Properties<String, String>, PrintWriter) = native void Properties.list(PrintWriter);
void load(Properties<String, String>, InputStream) = native void Properties.load(InputStream);
?String setProperty(Properties<String, String>, String, String) = native Object Properties.setProperty(String, String);
void store(Properties<String, String>, OutputStream, String) = native void Properties.store(OutputStream, String);

/* StringTokenizer inherits from Enumeration, which makes it 
   wrongly parameterized. We ignore that inheritance.
*/

class StringTokenizer = native java.util.StringTokenizer;

<T> void update(Observer, Observable, T) = 
  native void Observer.update(Observable, Object);

// java.lang.ref
class Reference<T> = native java.lang.ref.Reference;
class WeakReference<T> extends Reference<T> = native java.lang.ref.WeakReference;
class SoftReference<T> extends Reference<T> = native java.lang.ref.SoftReference;
class PhantomReference<T> extends Reference<T> = native java.lang.ref.PhantomReference;
class ReferenceQueue<T> = native java.lang.ref.ReferenceQueue;

<T> WeakReference<T> WeakReference(T) = native new WeakReference(Object);
<T,U | T <: U > WeakReference<T> WeakReference(T, ReferenceQueue<U>) = native new WeakReference(Object, ReferenceQueue);
<T> SoftReference<T> SoftReference(T) = native new SoftReference(Object);
<T,U | T <: U > SoftReference<T> SoftReference(T, ReferenceQueue<U>) = native new SoftReference(Object, ReferenceQueue);
<T,U | T <: U > PhantomReference<T> PhantomReference(T, ReferenceQueue<U>) = native new PhantomReference(Object, ReferenceQueue);
<T> ReferenceQueue<T> ReferenceQueue() = native new ReferenceQueue();

<T> void clear(Reference<T>) = native void Reference.clear();
<T> boolean enqueue(Reference<T>) = native boolean Reference.enqueue();
<T> boolean isEnqueued(Reference<T>) = native boolean Reference.isEnqueued();
<T, V | T <: ?V> ?V get(Reference<T>) = native Object Reference.get();

<T,U | T <: U > Reference<U> poll(ReferenceQueue<T>) = native Reference ReferenceQueue.poll();
<T,U | T <: U > Reference<U> remove(ReferenceQueue<T>) = native Reference ReferenceQueue.remove();
<T,U | T <: U > Reference<U> remove(ReferenceQueue<T>, long) = native Reference ReferenceQueue.remove(long);
