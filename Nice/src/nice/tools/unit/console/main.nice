package nice.tools.unit.console;

import nice.tools.unit;
import nice.doc;
import nice.getopt;

void main(String[] args)
{
  Program prg = new Program
    (name: "niceunit", longName: "The Nice unit test runner",
     shortDescription: "Runs unit tests written in the Nice programming language",
     author: "Daniel Bonniot <bonniot@users.sourceforge.net>",
     seeAlso: "http://nice.sourceforge.net          the Nice Home Page\n",
     manualSection: "1",
     arguments: "package", options: cast(null));

  ?String classpath = null;
  ?String jar = null;
  boolean systemExit = false;

  prg.options =
  [
   option("classpath",
	  "Search path for compiled packages to be tested\nPATH is a list of directories and .jar archives",
	  "path",
	  String path => { classpath = path; }),

   option("jar",
	  "An archive containing the program to test\nIts main package will be tested by default",
	  "path",
	  String opt => { jar = opt; }),

   option("man", "Print man page to stdout", visible: false,
	  () => man(prg)),
   
   option("exit", "Invoke System.exit when finished\nExit code will be the number of tests failed",
    () => { systemExit = true; })
  ];

  List<String> rest = parse(prg, args);

  if (rest.size() == 0 && jar == null)
    prg.usage();

  if (jar != null)
    {
      if (classpath == null)
	classpath = jar;
      else
	classpath = notNull(jar) + java.io.File.pathSeparator + classpath;

      if (rest.size() == 0)
	rest = [ mainPackage(notNull(jar)) ];
    }

  rest.foreach(String pkg => {
    if (! runTests(pkg, listener, classpath))
      System.err.println("Package "pkg" was not found");
  });

  println(""listener.nFailures"/"listener.nTests" tests failed");
  if (systemExit) System.exit(listener.nFailures);
}

String mainPackage(String jar)
{
  String mainClass = new java.util.jar.JarFile(new java.io.File(jar)).getManifest().getMainAttributes().getValue("Main-Class");
  return mainClass.substring(0, mainClass.lastIndexOf('.'));
}

let Listener listener = new Listener();

class Listener implements TestListener
{
  int nTests = 0;
  int nFailures = 0;

  start(test) = println(test);
  end(test) { nTests++; }
  failure(test, cause, loader)
  {
    nFailures++;
    println("Test failed:\n " + cause);
    if (!(iterLocations(test, cause, (?String file, String method, int line) =>
			println(""file +
				(line < 0 ? "" : ":"line) +
				" method "method),
			loader)))
      cause.printStackTrace();
  }
}
