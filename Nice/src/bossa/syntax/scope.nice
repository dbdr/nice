/**************************************************************************/
/*                                N I C E                                 */
/*             A high-level object-oriented research language             */
/*                        (c) Daniel Bonniot 2004                         */
/*                                                                        */
/*  This program is free software; you can redistribute it and/or modify  */
/*  it under the terms of the GNU General Public License as published by  */
/*  the Free Software Foundation; either version 2 of the License, or     */
/*  (at your option) any later version.                                   */
/*                                                                        */
/**************************************************************************/

package bossa.syntax;

/**
   The global scope of symbols.

 */
public class GlobalVarScope extends VarScope
{
  lookup(i)
  {
    // If there is any method by that name waiting, load it.
    loadJavaMethods(i.toString(), this);

    return super;
  }

  globalLookup(i) = this.lookup(i);
}

VarScope createGlobalVarScope()
{
  return new GlobalVarScope(null);
}

/**
   The global, toplevel type scope.

 */
public class GlobalTypeScope extends TypeScope
{
  public bossa.modules.Package pkg = cast(null);
  private Set<String> set = new HashSet();

  setPackage(bossa.modules.Package pkg)
  {
    this.pkg = pkg;
  }

  getPackage() = pkg;

  addMapping(name, s)
  {
    super;

    if (!set.add(notNull(name).toLowerCase()))
      throw new TypeScope.DuplicateName(this, name);
  }

  public mlsub.typing.TypeConstructor globalLookup(LocatedString name)
  {
    return this.globalLookup(name.toString(), name.location());
  }

  globalLookup(name, loc)
  {
    mlsub.typing.TypeSymbol res = this.lookup(name, loc);

    if (res instanceof mlsub.typing.TypeConstructor)
      return res;

    if (res != null)
      Internal.warning("Non type-constructor found in global type scope");

    return cast(null);
  }

  lookup(name, loc)
  {
    ?mlsub.typing.TypeSymbol res = super;
    if (res != null)
      return res;

    boolean notFullyQualified = notNull(name).indexOf('.') == -1;
	
    if (notFullyQualified)
      {
	/* Try first to find the symbol in Nice definitions.
	   The first package is the current package.
	   If the symbol is not found there, we check there is no 
	   ambiguity with another symbol from another package.
	*/
	boolean first = true;
	String[] pkgs = pkg.listImplicitPackages();
	for (int i = 0; i < pkgs.length; i++)
	  {
	    String fullName = pkgs[i] + "." + name;
	    ?mlsub.typing.TypeSymbol sym = this.get(fullName);
	    if (sym != null)
	      if (res == null)
		{
		  res = sym;
		  if (first) break;
		}
	      else
		User.error(loc, "Ambiguity for symbol " + name + 
			   ":\n" + res + " and " + sym +
			   " both exist");
	    first = false;
	  }
      }

    if (res != null)
      return res;

    return cast(lookupJavaClass(notNull(name), loc, Module.javaScope));
  }
}

TypeScope createGlobalTypeScope()
{
  let res = new GlobalTypeScope(null);

  try {
    res.addMapping("java.lang.Object", mlsub.typing.TopMonotype.instance);
  } catch (TypeScope.DuplicateName ex) {}

  return res;
}
