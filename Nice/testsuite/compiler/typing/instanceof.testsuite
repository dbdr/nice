/// global
class A{}
class B extends A { int life = 42; }

// An arbitrary higher-order function, that might let its argument escape.
<T,U> void use(T->U f) {}

/// PASS
  A a;
  a = new B();
  if (a instanceof B)
    assert a.life == 42;
  else
    assert false;

/// FAIL
  A a;
  a = new A();
  if (a instanceof B)
    assert false;
  else
    assert a. /* ///FAIL HERE */ life == 42;

/// FAIL
  A a;
  a = new B();
  if (a instanceof B)
    {}
  assert a. /* ///FAIL HERE */ life == 42;

/// PASS
  A a;
  a = new B();
  if (a instanceof B)
    {}
  else
    throw new Error();
  assert a.life == 42;

/// COMMENT Assignments.
/// PASS
  A a = new B();
  if (a instanceof B)
    {
      int i = a.life;
      if (i == 42)
        a = new A();
      else
        i = a.life + 1;
    }

/// FAIL
  A a = new B();
  if (a instanceof B)
    {
      int i = a.life;
      if (i == 42)
        a = new A();
      i = a. /* ///FAIL HERE */ life;
    }

/// PASS
  A a;
  a = new B();
  var test = false;
  while (a instanceof B)
    {
      assert a.life == 42;
      test = true;
      break;
    }
  assert test;

/// PASS
  A a = new B();
  while (a instanceof B)
    {
      int i = a.life;
      if (i == 42)
        a = new A();
      else
        i = a.life + 1;
      break;
    }

/// FAIL
  A a = new B();
  while (a instanceof B)
    {
      int i = a.life;
      if (i == 42)
        a = new A();
      i = a. /* ///FAIL HERE */ life;
      break;
    }

/// FAIL
  B b = new B();
  if (b instanceof A)
     /* ///FAIL HERE */ b = new A();
     /* XXX Check error message. Last time checked it was
      [nicec] Incorrect type in assignment to b
      [nicec] Found   : global.A
      [nicec] Expected: global.A
     */

/// FAIL
  Y y = new D();
  if (y instanceof X)
     /* ///FAIL HERE */ y = new C();
  /// Toplevel
  interface X {}
  interface Y {}
  class C implements X {}
  class D implements X,Y {}

/// PASS
  A x = new B();
  if (!( x instanceof B))
    assert false;
  else
    assert x.life == 42;

/// PASS
  assert foo(new B()) == 42;
  /// Toplevel
  int foo(A x) {
    if (!( x instanceof B))
      return 0;

    return x.life;    
   }

/// FAIL
  A x = new B();
  int i = 0;
  if (x instanceof B)
    i = x.life;
  else
    i = x./* /// FAIL HERE */life;

/// FAIL
  A x = new B();
  int i = 0;
  if (x instanceof B)
    i = x.life;

  i = x./* /// FAIL HERE */life;

/// PASS
  A x = new B();
  A y = new B();
  int i = 0;
  if (x instanceof B && y instanceof B)
    i = x.life + y.life;
  else
    assert false;

/// PASS
  A x = new B();
  A y = new B();
  int i = 0;
  if (!(x instanceof B) || !(y instanceof B))
    assert false;
  else
    i = x.life + y.life;

/// PASS
  A x = new B();
  if (x instanceof B && x.life == 42)
    assert true;
  else
    assert false;

/// FAIL
  A x = new B();
  if ((!(x instanceof B)) && x./* /// FAIL HERE */life == 42)
    assert true;

/// PASS
  A x = new B();
  if ((!(x instanceof B)) || x.life == 42)
    assert true;
  else
    assert false;

/// FAIL
  A x = new B();
  if (x instanceof B || x./* /// FAIL HERE */life == 42)
    assert true;

/// PASS
  /// Toplevel
class C<T> {}
class D<T> extends C<T> {
  T t;
}

void f() {
  C<String> c = new D(t: "hi");
  if (c instanceof D) {
    String s = c.t;
  }
}

/// FAIL
  X<String> foo = new X();
  if (foo instanceof Y)
    foo. /* ///FAIL HERE */ bar();

  /// Toplevel
  class X<T> {}
  class Y<U,V>
  {
    void bar() {}
  }

/// FAIL
  A a = new B();
  void->void f = () => { a = new A(); };
  if (a instanceof B) {
    f();
    B /* /// FAIL HERE */b = a;
  }

/// FAIL
  A a = new B();
  if (a instanceof B) {
    void->void f = () =>
      { 
        int x = a./* /// FAIL HERE */life;
      };

    a = new A();
    f();
  }

/// FAIL
  A a = new B();
  if (a instanceof B) {
    void->void f = () =>
      { 
        a = new A();
      };

    f();
    int x = a./* /// FAIL HERE */life;
  }

/// PASS
  A a = new B();
  if (a instanceof B) {
    void->void f = () => { };
    
    int x = a.life;
  }

/// FAIL
  A a = new C();
  if (a instanceof B) {
    if (a instanceof C) {
      void->void f = () => {a = new A(); };

      int x = a./* /// FAIL HERE */life;
    }
  }  
  /// Toplevel
  class C extends B {}

/// PASS
  use(A arg => {
    arg = new B();
    if (arg instanceof B) {
      assert arg.life == 42;
    }
  });

/// FAIL
  ?int x = 1;

  let f = void->void g => {
    if (x != null) {
      g();
      int /*/// FAIL HERE*/ y = x;
    }
  };
  f(() => { x = null; });

/// PASS
  let A a = new B();
  void->void f = () => {
    if (a instanceof B) {
      int x = a.life;
    }
  };

/// PASS
  // We know that foreach does not let its arguments escape.
  A x = new A();
  new LinkedList().foreach(A arg => {
    x = arg;
  });
  if (x instanceof B)
    assert x.life == 42;
      
/// FAIL
  A x = new A();
  void ?-> void f = null;
  [0].foreach(int arg => {
    // This anonymous function escapes, even though it is inside an arg of 
    // foreach.
    f = () => x = new A();
  });
  if (x instanceof B) {
    if (f != null)
      f();
    assert x. /* ///FAIL HERE */ life == 42;
  }

/// PASS
  // We know that foreach does not let its arguments escape.
  A x = new A();
  if (x instanceof B)
    new LinkedList().foreach(A arg => {
      assert x.life == 42;
    });

/// FAIL
  /// Toplevel
  <T,U | U <: T> U narrow(T obj) 
  {
    if (obj instanceof /* /// FAIL HERE */U)
      return obj;
    else
      throw new ClassCastException(obj.getClass().getName());
  }

/// PASS
  Object o = foo();
  assert o instanceof String;
  String s = o;
  /// Toplevel
  Object foo() = "";

/// FAIL
  Object o = foo();
  assert o instanceof String;
  o = 42;
  String /*/// FAIL HERE*/ s = o;
  /// Toplevel
  Object foo() = "";


/// FAIL
  Object o = foo();
  if (o == "")
    {
      assert o instanceof String;
    }
  String /*/// FAIL HERE*/ s = o;
  /// Toplevel
  Object foo() = "";

/// PASS
  Object o = new String[3];
  if (o instanceof String[])
   {
     ?String[] s = o;
   }

/// FAIL
  Object o = new String[3];
  if (o instanceof String[])
   {
     ?java.io.File[]  /* ///FAIL HERE */ s = o;
   }
