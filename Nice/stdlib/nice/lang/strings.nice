/**************************************************************************/
/*                                N I C E                                 */
/*             A high-level object-oriented research language             */
/*                        (c) Daniel Bonniot 2001                         */
/*                                                                        */
/*  This program is free software; you can redistribute it and/or modify  */
/*  it under the terms of the GNU General Public License as published by  */
/*  the Free Software Foundation; either version 2 of the License, or     */
/*  (at your option) any later version.                                   */
/*                                                                        */
/**************************************************************************/

/**
   String manipulation functions.
*/

package nice.lang;

/****************************************************************
 * Strings
 ****************************************************************/

<Any R> String `+`(String s, R o) = s.concat(String.valueOf(o));

String replace(String source, char c, String with)
{
  StringBuffer res = new StringBuffer();
  char[] tab = source.toCharArray();
  int pos = 0;
  int newpos;
  while ((newpos = source.indexOf(c, pos)) != -1)
    {
      res.append(tab, pos, newpos - pos);
      res.append(with);
      pos = newpos + 1;
    }
  return res.append(tab, pos, tab.length - pos).toString();
}

String deleteAtEnd(String source, String what)
{
  if (!(source.endsWith(what)))
    return source;

  int pos = source.lastIndexOf(what);
  return notNull(source.substring(0, pos));
}

char get(String s, int index) = native char String.charAt(int);
char charAt(String s, int index) = native char String.charAt(int);


List<String> split(String str, String sep)
{
  List<String> res = new ArrayList();
  int ntx = 0;
  int pos = 0;
  while(ntx > -1)
    {
      ntx = str.indexOf(sep, pos);
      if (ntx > -1)
	{
	  if (ntx > 0)
	    {
	      res.add(str.substring(pos, ntx));
	    }
	  pos = ntx + sep.length;
	}
      else
	{
	  res.add(pos == 0 ? str : str.substring(pos));
	}
    }
  return res;
}

String join(List<String> strings, String sep)
{
  StringBuffer buff = new StringBuffer();
  Iterator<String> it = strings.iterator();
  while(it.hasNext())
    {
      buff.append(it.next());
      if (it.hasNext())
	buff.append(sep);
    }
  return buff.toString();
}
