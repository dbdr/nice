/**************************************************************************/
/*                                N I C E                                 */
/*             A high-level object-oriented research language             */
/*                        (c) Daniel Bonniot 2000                         */
/*                                                                        */
/*  This program is free software; you can redistribute it and/or modify  */
/*  it under the terms of the GNU General Public License as published by  */
/*  the Free Software Foundation; either version 2 of the License, or     */
/*  (at your option) any later version.                                   */
/*                                                                        */
/**************************************************************************/

package mlsub.compilation;

import mlsub.compilation.*;

/**
 * 'Make' tool for mlsub modules.
 * 
 * @author Daniel Bonniot (d.bonniot@mail.dotcom.fr)
 */

void compileComponent(Compilation compilation, List<Module> modules, 
		      boolean doLink)
{
  print("Compiling");
  modules.iter(fun(Module m) => print(" "+m));
  println("");

  modules.iter(fun(Module m) =>
	       m.lastModifiedRequirement(max(new JavaList(impl: notNull(m.getRequirements())).map(fun(Module mi)=>mi.lastModification()))));

  modules.iter(fun(Module m) => m.scope());
  modules.iter(fun(Module m) => m.load());

  notNull(compilation.root).freezeGlobalContext();

  try {
    modules.iter(fun(Module m) => m.compile());

    if (doLink)
      modules.iter(fun(Module m) => m.link());
  }
  finally {
    notNull(compilation.root).unfreezeGlobalContext();
  }
}

void make(mlsub.compilation.Compilation compilation)
{
  List<List<Module>> sccs =
    stronglyConnectedComponents
      (notNull(compilation.root), fun(Module m) => new JavaList(impl: notNull(m.getRequirements())));
  try{
    sccs.iter(fun(List<Module> scc) => 
      { compileComponent(compilation, scc,
			 !compilation.skipLink); });
  }
  catch(bossa.util.UserError e){
    nice.tools.compiler.OutputMessages.error(e.getMessage());
  }
}
