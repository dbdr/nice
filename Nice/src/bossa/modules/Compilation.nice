/**************************************************************************/
/*                           B O S S A                                    */
/*        A simple imperative object-oriented research language           */
/*                   (c)  Daniel Bonniot 1999                             */
/*                                                                        */
/*  This program is free software; you can redistribute it and/or modify  */
/*  it under the terms of the GNU General Public License as published by  */
/*  the Free Software Foundation; either version 2 of the License, or     */
/*  (at your option) any later version.                                   */
/*                                                                        */
/**************************************************************************/

// File    : Compilation.bossa
// Created : Wed Mar 01 17:01:48 2000 by Daniel Bonniot
//$Modified: Fri Aug 04 14:01:11 2000 by Daniel Bonniot $

package bossa.modules;

import mlsub.compilation;

/**
 * Stores information about a bossa compilation.
 *
 * @author Daniel Bonniot
 */

class Compilation extends mlsub.compilation.Compilation
{
  boolean recompileAll;
  boolean recompileCommandLine;
  boolean staticLink;

  /** Set if at least one package is not up-to-date. */
  boolean recompilationNeeded;
}

Compilation make(boolean, boolean, boolean, boolean);
make(doLink, recompileCommandLine, recompileAll, staticLink)
{
  Compilation res = new Compilation();

  res.root = null;
  res.skipLink = !doLink;
  res.recompileCommandLine = recompileCommandLine;
  res.recompileAll = recompileAll;
  res.staticLink = staticLink;

  return res;
}

Compilation make(String packageName, 
		 boolean doLink, 
		 boolean recompileCommandLine, 
		 boolean recompileAll,
		 boolean staticLink);
make(packageName@String, 
     doLink, recompileCommandLine, recompileAll, staticLink)
{
  recompileCommandLine = recompileCommandLine || recompileAll;
  Compilation res = make(doLink, recompileCommandLine, recompileAll, staticLink);

  // forces reading nice.lang first
  if(!(packageName.equals("nice.lang")) && !bossa.util.Debug.ignorePrelude())
    Package.make("nice.lang", res, recompileAll);

  Package root = Package.make(new bossa.syntax.LocatedString(packageName, new bossa.util.Location("Command line")), res, true);
  res.root = root;

  if (root.isRunnable() && 
      res.recompilationNeeded &&
      !res.skipLink)
    root.createJar();

  return res;
}
