package regtest.basic;

void f_iS(?int x, ?String y) {}

void test_null()
{
  ?List<String> l = null;

  //f_iS(null, null);

  try{
    notNull(null)(null);
  }
  catch(NullPointerException e){
    println("OK");
  }
}

// Testing the coverage test

<Any T1, Any T2 | T1 <: ?String , T2 <: T1> void cov(T1 s1, T2 s2);

// The domain of cov is exactly (?String, ?String)
// Therefore there are exactly four cases:

cov(s1@String, s2@String) {}
cov(s1@String, s2@null)   {}
cov(s1@null,   s2@String) {}
cov(s1@null,   s2@null)   {}

// nullness marker with a parameterized type in constraint
<Any T | T <: ?List<String>> void cov2(T x) {}

// Test inference of non-nullness

?String double1(?String s)
{
  if (s == null)
    return null;

  return s + s;
}

?String double2(?String s) = s == null ? null : s + s;
?String double3(?String s) = s != null ? s + s : null;
// nullness test occuring inside an overloaded function
String double4(?String s) = "A" + (s != null ? s + s : null);
// nullness test occuring inside an overloaded constructor
String double5(?String s) = new String(s != null ? s + s : null);

void f()
{
  ?int x = 1;

  if (x != null)
    x++;
  else
    return;
  x++;
}

