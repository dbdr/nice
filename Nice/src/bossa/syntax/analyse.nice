/**************************************************************************/
/*                                N I C E                                 */
/*             A high-level object-oriented research language             */
/*                        (c) Daniel Bonniot 2000                         */
/*                                                                        */
/*  This program is free software; you can redistribute it and/or modify  */
/*  it under the terms of the GNU General Public License as published by  */
/*  the Free Software Foundation; either version 2 of the License, or     */
/*  (at your option) any later version.                                   */
/*                                                                        */
/**************************************************************************/

/*
   Scoping resolution, variable initialization test
*/

package bossa.syntax;

import nice.tools.ast;
import mlsub.typing.*;

// Interface

Statement analyse(Statement, VarScope, TypeScope, boolean mustReturnAValue);
Expression analyse(Expression, VarScope, TypeScope);

// Implementation

Info buildInfo(VarScope varScope, TypeScope typeScope);
buildInfo(varScope, typeScope)
{
  let SymbolTable<TypeSymbol> t = new SymbolTable();
  return new Info(vars: new SymbolTable(), typeVars: t,
		  outerVarScope: varScope, outerTypeScope: typeScope,
		  typeMap: new TypeMaper(inner: t, global: typeScope));
}

analyse(Statement s, varScope, typeScope, mustReturnAValue)
{
  Info info = buildInfo(varScope, typeScope);

  analyse(s, info);
    
  if (mustReturnAValue && !info.getUnreachable())
    throw error(s, "Missing return statement");

  return s;
}

Statement analyseMethodBody(Statement s, VarScope varScope, TypeScope typeScope,
		MonoSymbol[] params, boolean mustReturnAValue)
{
  Info info = buildInfo(varScope, typeScope);

  info.addVars(params);

  analyse(s, info);
    
  if (mustReturnAValue && !info.getUnreachable())
    throw error(s, "Missing return statement");

  return s;
}


analyse(Expression e, varScope, typeScope) = 
    analyse(e, buildInfo(varScope, typeScope));

List<VarSymbol> lookup(VarScope scope, ?LocatedString i)
= native List VarScope.lookup(LocatedString);

class Info
{
  SymbolTable<VarSymbol> vars;
  SymbolTable<TypeSymbol> typeVars;

  VarScope outerVarScope;
  TypeScope outerTypeScope;

  ?LoopStmt currentLoop = null;
  /* The set of all local constant variables whose scope is the current 
     most inner loop. Null if we are not inside a loop at this point.
  */
  ?Collection<VarSymbol> localsOfCurrentLoop = null;

  Stack<LabeledStmt> labels = new Stack();

  /* bit 0: point not reachable 
     bit 1..63: indexed local variable is initialized

     An index is used for only one variable regardless of scope.
     This sets a hard limit of 63 uninitialized local variables per
     method/function. 
  */
  long flags = 0; 
  int varIndex = 0;

  /*
    The number of nested blocks.
  */
  int depth = 0;

  /*
    The depth of the current anonymous function.
  */
  int anonFunDepth = 0;

  boolean getUnreachable() = (this.flags & 1) != 0;
  void setUnreachable() { this.flags |=  1; }
  void setReachable()   { this.flags &= ~1; }

  Stack<long> flagsStack = new Stack();

  void beginInner()
  {
    this.flagsStack.push(this.flags);
  }

  void endInner()
  {
    this.flags = this.flagsStack.pop();
  }

  void beginCases()
  {
    this.flagsStack.push(this.flags);
    this.flagsStack.push(-1);
  }
  
  void otherCase()
  {
    long tempResult = this.flagsStack.pop();
    long outer = this.flagsStack.peek();

    // If this branch cannot terminate, ignore it for the rest of 
    // the computation. Otherwise merge information with previous branches.
    if (! this.getUnreachable())
      tempResult &= this.flags;

    this.flagsStack.push(tempResult);

    // Start the next branch with the state preceding the cases.
    this.flags = outer;
  }

  void endCases()
  {
    // If this branch cannot terminate, ignore it for the rest of 
    // the computation.
    if (this.getUnreachable())
      this.flags = this.flagsStack.pop();
    else
      this.flags &= this.flagsStack.pop();

    // Discard the state preceding the cases.
    this.flagsStack.pop();
  }

  // Abstract type for uniform lookup in both scopes
  // Shall probably go away sometime (at least the TypeMaper)
  TypeMap typeMap;

  void begin()
  {
    this.vars.begin();
    this.typeVars.begin();
    this.depth++;
  }

  void end()
  {
    this.vars.end();
    this.typeVars.end();
    this.depth--;
  }

  ?VarSymbol lookup(String name) = this.vars[name];

  List<VarSymbol> globalLookup(LocatedString name) = 
    this.outerVarScope.lookup(name);

  ?TypeSymbol lookupType(LocatedString name)
  {
    ?TypeSymbol res = this.typeVars[name.toString()];
    if (res != null)
      return res;
    else
      return this.outerTypeScope.lookup(name);
  }

  void addVar(PolySymbol symbol)
  {
    if (symbol.syntacticType != null)
      {
	symbol.type = notNull(symbol.syntacticType).resolve(this.typeMap);
	symbol.syntacticType = null;
      }

    this.checkNotDefined(symbol);
    this.vars[symbol.name.toString()] = symbol;
  }

  void addVar(MonoSymbol symbol)
  {
    // Anonymous symbols are OK, but can be ignored.
    if (symbol.name == null)
      return;

    ?Monotype type = symbol.syntacticType;
    if (type != null)
      {
	symbol.type = notNull(type.resolve(this.typeMap));
	if (nice.tools.typing.Types.isVoid(symbol.type))
	  throw error(symbol, "A variable cannot have a void type");
      }

    this.checkNotDefined(symbol);
    this.vars[symbol.name.toString()] = symbol;
    symbol.depth = this.depth;
  }

  void addVars(MonoSymbol[] symbols) = 
    symbols.foreach(MonoSymbol s => this.addVar(s));
  
  void addTypeVars(TypeSymbol[] symbols) = 
    symbols.foreach(TypeSymbol s => this.typeVars[s.toString()] = s);

  void checkNotDefined(VarSymbol symbol)
  {
    ?VarSymbol old = this.vars[symbol.name.toString()];
    if (old != null)
      throw error(symbol, "Symbol " + symbol.name + " is already defined.\n" +
		  "Previous definition: " + old.location().toString());
  }
}

void checkInitialized(LocalVariableSymbol sym, Info info,
		      ?bossa.util.Location loc)
{
  if (sym.index == -1)
    return;

  if (! info.flags[sym.index])
    throw error(loc, "Variable " + sym.name + " is not initialized");
}

?Expression analyse(?Expression, Info) = null;
override Expression analyse(Expression, Info);

void analyse(?Statement, Info);

/****************************************************************
 * Expressions
 ****************************************************************/

analyse(Expression e, i) = e;

void setInitialized (LocalVariableSymbol v, Info info, 
		     bossa.util.Location loc)
{
  if (v.index != -1)
    {
      if (v.constant && (info.flags[v.index] ||
		info.localsOfCurrentLoop != null && 
		!notNull(info.localsOfCurrentLoop).contains(v)))
	bossa.util.User.error(loc, 
		"" + v + " cannot be assigned a value multiple times");

      info.flags |= 1 << v.index;
    }
}

Expression analyseAssigned(?Expression, Info);
analyseAssigned(e, i) = notNull(analyse(e, i));
analyseAssigned(IdentExp e, info) = analyseIdent(e, info, true);
analyseAssigned(TupleExp e, info)
{
  Expression[] es = notNull(e.expressions);
  for (int i = 0; i < es.length; i++)
    es[i] = es[i].analyseAssigned(info);

  return e;
}

analyse(AssignExp e, i)
{
  e.value = analyse(e.value, i);
  e.to = analyseAssigned(e.to, i);
  return e;
}

void analyseExps(Expression[] exps, Info info)
{
  for (int i = 0; i < exps.length; i++)
    exps[i] = analyse(exps[i], info);
}

void analyse(Arguments args, Info info, boolean noEscape)
{
  for (int i = 0; i < args.size(); i++)
    args.setExp(i, analyse(args.getExp(i), info, noEscape: noEscape));
}

void markAsCallFun(Expression, boolean);
markAsCallFun(e, infix) {}
markAsCallFun(IdentExp e, infix)
{
  if (infix) e.setInfix();
  e.alwaysOverloadedSymbol = true;
}

void markAsCallFirstArg(Expression);
markAsCallFirstArg(e) {}
markAsCallFirstArg(IdentExp e)
{
  e.enableClassExp = true;
}

analyse(ExpLocalVariable e, info)
{
  e.initValue = analyse(e.initValue, info);
  setInitialized(e.variable.left, info, e.location());
  return e;
}

analyse(CallExp e, info)
{
  Arguments args = e.arguments;
  
  if (e.infix)
    markAsCallFirstArg(notNull(args.getExp(0)));

  List<ExpLocalVariable> expLocals = new ArrayList();

  for (int i = args.size(); --i>=0; )
    if (args.getExp(i) instanceof ExpLocalVariable)
      expLocals.add(cast(args.getExp(i)));

  if (!expLocals.isEmpty())
    {
      e.localVars = expLocals;
      info.begin();
      for (local : expLocals)
        analyse(local.variable, info);
    }

  boolean noEscape = args.size() == 2 &&
    (e.isCallTo("foreach") || e.isCallTo("forbreak") || e.isCallTo("map") ||
     e.isCallTo("filter"));
  args.analyse(info, noEscape);

  if (!expLocals.isEmpty())
    info.end();

  if (e.infix)
    {
      e.declaringClass = args.staticClass();
      
      if (e.declaringClass != null)
	return analyseQualifiedCall(e, info);

      ?PackageExp pkg = args.packageExp();
      if (pkg != null)
	{
	  ?LocatedString nextComponent = identString(e.function);

	  if (nextComponent == null)
	    throw unknownIdent(notNull(pkg.locatedName()));

	  return createTypeConstantExp(pkg, nextComponent);
	}
    }

  boolean cannotReturn = e.isCallTo("throw") || 
    e.isCallTo("assert") && args.size() > 0 && args.getExp(0).isFalse();

  markAsCallFun(e.function, e.infix);
  e.function = analyse(e.function, info);
  
  if (cannotReturn)
    info.setUnreachable();

  return e;
}

Expression analyseQualifiedCall(CallExp e, Info info)
{
  Arguments args = e.arguments;

  ?LocatedString funName = identString(e.function);
  if (funName == null)
    throw notNull(bossa.util.Internal.error
		  (e.function, "This is not a valid class member"));
	  
  int arity = args.size();

  if ((! e.hasBrackets) && (arity == 0))
    // This case is like java.lang.Byte.toString:
    // look for a method with that name and any arity,
    // since the method is not called but just referenced.
    {
      List<VarSymbol> possibilities = findJavaMethods
	(notNull(e.declaringClass), funName.toString());

      if (possibilities.size() == 0)
	throw error(e, "Class " + notNull(e.declaringClass).getName() +
		    " has no static method or static field named " +
		    funName);

      /*
	If there is a field access, then we consider this an access
	to the static field. Otherwise, it is a reference to
	the method, not applied.
      */
      if (possibilities.has(VarSymbol s => s.isFieldAccess()))
	{
	  e.function = createOverloadedSymbolExp(possibilities, funName);
	  return e;
	}
      else
	return createOverloadedSymbolExp(possibilities, funName);
    }

  List<VarSymbol> possibilities = findJavaMethods
	(notNull(e.declaringClass), funName.toString(), arity);

  if (possibilities.size() == 0)
    throw error(e, "Class " + notNull(e.declaringClass).getName() +
		(arity == 0 ? " has no static method or static field named " :
		 arity == 1 ? " has no method or field named " : 
		 " has no method with "arity" arguments and named ") + 
		funName);
  
  e.function = createOverloadedSymbolExp(possibilities, funName);

  return e;
}

Expression analyse(Expression e, Info info, boolean noEscape) =
  analyse(e, info);

analyse(FunExp e, info) = analyse(e, info, false);

analyse(FunExp e, Info info, noEscape)
{
  let savedDepth = info.anonFunDepth;

  try {
    info.beginInner();
    info.begin();
    if (noEscape)
      e.mightEscape = false;
    else
      info.anonFunDepth = info.depth;

    if (e.constraint != Constraint.True && e.constraint != null)
      {
	e.cst = notNull(e.constraint).resolveToLowlevel();
	addTypeVars(info, notNull(e.cst).binders());
      }
    e.constraint = null;

    addVars(info, e.formals);

    analyse(e.body, info);
    e.setAlwaysReturns(info.getUnreachable());

    return e;
  }
  finally {
    info.end();
    info.endInner();
    info.anonFunDepth = savedDepth;
  }
}

analyse(IdentExp e, info) = analyseIdent(e, info, false);

Expression analyseIdent(IdentExp e, Info info, boolean assigned)
{
  if (!e.isInfix()) // infix symbols can only come from the global scope
    {
      ?VarSymbol sym = info.lookup(notNull(e.ident).toString());

      if (sym != null)
        {
          if (sym instanceof MonoSymbol)
	    {
	      sym.used = true;

	      if (assigned && sym.depth < info.anonFunDepth)
	        sym.captured = true;

	      if (sym instanceof LocalVariableSymbol)
	        {
	          if (assigned)
		    setInitialized(sym, info, e.location());
	          else
		    checkInitialized(sym, info, e.location());
	        }
	    }

	  if (e.alwaysOverloadedSymbol)
	    return createOverloadedSymbolExp(sym, notNull(e.ident));
	  else
	    return createSymbolExp(sym, e.location());
	}
    }

  ?List<VarSymbol> symbols;
  if (e.isInfix())
    symbols = cast(notNull(Node.getGlobalScope()).lookup(e.ident));
  else
    symbols = info.globalLookup(notNull(e.ident));

  if (symbols != null && symbols.size() > 0)
    {
      if (!e.alwaysOverloadedSymbol() && symbols.size() == 1)
        {
	  VarSymbol sym = symbols[0];

	  if (sym instanceof FormalParameters.Parameter.Symbol)
	    {
	      int state = sym.getState();
	      if (state == 0/*XXX: FormalParameters.Parameter.Symbol.NOT_ACCESSIBLE*/)
	        throw error(e, "Parameter " + e + " is not accessible");

	      if (state == 1/*XXX: FormalParameters.Parameter.Symbol.ARGUMENT_REFERENCE*/)
		  return createParameterAccessExp(sym, e.location());
	      // Otherwise, we are in the normal case.
	    }

	  if (sym.isNonStaticFieldAccess() && Node.thisExp != null)
            {
	      CallExp res = new CallExp(function: createOverloadedSymbolExp(symbols, notNull(e.ident)),
	        	arguments: Arguments.singleArgument(Node.thisExp));
              res.setLocation(e.location());
              return res;
            }
	  else if (sym.isStaticFieldAccess())
	    // Refering to an unqualified static field.
	    {
	      // Make an implicit call to fetch the static field's value.
	      CallExp res = new CallExp(function: createOverloadedSymbolExp(symbols, notNull(e.ident)), 
	         		arguments: Arguments.noArguments());
              res.setLocation(e.location());
              return res;
	    }

	  return createSymbolExp(sym, e.location());
        }
      else
        return createOverloadedSymbolExp(symbols, notNull(e.ident));
    }

  if (e.enableClassExp)
    return createTypeConstantExp(null, notNull(e.ident));

  throw unknownIdent(notNull(e.ident));
}

analyse(IfExp e, info)
{
  e.condition = analyse(e.condition, info);

  info.beginCases();

  e.thenExp = analyse(e.thenExp, info);
  e.thenUnreachable = info.getUnreachable();

  info.otherCase();
  e.elseExp = analyse(e.elseExp, info);
  e.elseUnreachable = info.getUnreachable();

  info.endCases();
  return e;
}

analyse(IncrementExp e, info)
{
  e.variable = analyse(e.variable, info);
  return e;
}

analyse(LiteralArrayExp e, info)
{
  analyseExps(e.elements, info);
  return e;
}

analyse(NewArrayExp e, info)
{
  e.resolveTC(info.typeMap);
  analyseExps(e.knownDimensions, info);
  return e;
}

analyse(NewExp e, info)
{
  e.arguments.analyse(info, noEscape: false);
  e.resolve(info.typeMap);
  return e;
}

analyse(StatementExp e, info)
{
  analyse(e.statement, info);
  return e;
}

analyse(NullExp e, i) = e;

analyse(ConstantExp c, info)
{
  if (c.type != null)
    return c;
    
  ?TypeSymbol s = info.lookupType(notNull(c.className));
    
  if (s == null)
    bossa.util.Internal.error
      ("Base type " + c.className + " was not found in the standard library");

  ?TypeConstructor tc = TypeConstructor.fromTypeSymbol(notNull(s));
  if (tc == null)
    bossa.util.Internal.error("Base type " + c.className + " is not valid");
  
  c.type = new mlsub.typing.Polytype
    (Monotype.sure(new mlsub.typing.MonotypeConstructor(tc, null)));

  return c;
}

mlsub.typing.Polytype typeRepresentationToPolytype(String name,
						   ?bossa.util.Location loc,
						   Info info,
						   boolean sure = true)
{
  if (name.charAt(0) == '[')
    {
      mlsub.typing.Polytype res =
	typeRepresentationToPolytype(name.substring(1), loc, info, sure: false);

      let type = new mlsub.typing.MonotypeConstructor
        (nice.tools.typing.PrimitiveType.arrayTC, [res.getMonotype()]);

      return new mlsub.typing.Polytype
        (res.getConstraint(),
	 sure ? Monotype.sure(type) : Monotype.maybe(type));
    }

  ?TypeConstructor tc = Node.getGlobalTypeScope().globalLookup(name, loc);

  if (tc == null)
    {
      if (name.equals("Object") || name.equals("java.lang.Object"))
	return nice.tools.typing.PrimitiveType.objectPolytype();

      if (info.typeVars[name] instanceof MonotypeVar)
        throw new bossa.util.UserError(loc, "A type variable cannot be used here");
      else
        throw new bossa.util.UserError(loc, "Class "name" is not declared");
    }

  return universalPolytype(tc, sure);
}

analyse(TypeConstantExp e, info)
{
  LocatedString name = cast(e.value);

  mlsub.typing.Polytype type = typeRepresentationToPolytype(name.toString(), name.location(), info);

  ?gnu.bytecode.Type bytecodeType =
     nice.tools.code.Types.typeRepresentationToBytecode
       (name.toString(), name.location());

  return e.setRepresentedType(type, bytecodeType);
}

analyse(TupleExp e, info)
{
  analyseExps(e.expressions, info);
  return e;
}


analyse(SuperExp e, info)
{
  e.resolveTC(info.outerTypeScope);
  return e;
}
/****************************************************************
 * Statements
 ****************************************************************/

analyse(Statement s, info) {}
analyse(null(Statement), info) {}

analyse(LocalVariable decl, info)
{
  if (decl.value != null)
    decl.value = analyse(decl.value, info);
  else
    decl.setIndex(++info.varIndex);

  info.addVar(decl.left);

  if (info.localsOfCurrentLoop != null && decl.left.constant)
    notNull(info.localsOfCurrentLoop).add(decl.left);
}

analyse(LocalConstant decl, info)
{
  decl.value = analyse(decl.value, info);
  info.addVar(decl.left);
}

analyse(LocalFunction decl, info)
{
  decl.parameters.resolveCalledFromAnalyse(cast(info));

  info.addVar(decl.left);
  decl.value = analyse(decl.value, info);
}

analyse(Block b, info)
{
  info.begin();
  notNull(b.locals).foreach(LocalDeclaration l => analyse(l, info));
  analyse(b.statements, info);
  info.end();

  if (b.isBreakTarget)
    info.setReachable();
}

void analyse(Statement[] statements, Info info)
{
  for (int i = 0; i < statements.length; i++)
    {
      Statement s = statements[i];
      if (info.getUnreachable())
	throw error(s, "This statement is never executed");

      analyse(s, info);
    }
}

analyse(ExpressionStmt s, info)
{
  s.exp = analyse(s.exp, info);
}

/****************************************************************
 * Loops, Labels, Break and Continue
 ****************************************************************/

analyse(LoopStmt l, info)
{
  // If the test comes before the body, then the body might not execute
  // at all, so we must discard its information.
  if (l.isTestFirst())
    info.beginInner();

  if (l.isTestFirst() && l.whileExp != null)
    {
      l.whileExp = analyse(l.whileExp, info);
      if (notNull(l.whileExp).isFalse())
	info.setUnreachable();
    }

  ?LoopStmt save = info.currentLoop;
  ?Collection<VarSymbol> localsOfCurrentLoopSave = info.localsOfCurrentLoop;

  info.currentLoop = l;
  info.localsOfCurrentLoop = new LinkedList();

  analyse(l.loopBody, info);

  info.currentLoop = save;
  info.localsOfCurrentLoop = localsOfCurrentLoopSave;

  /* The update code is considered reachable even if the loop cannot terminate
     normally. This is normal if the loop contains a continue statement, but 
     the JLS allows that even without one.
  */
  info.setReachable();
  analyse(l.iterationStatements, info);

  if (! l.isTestFirst())
    l.whileExp = analyse(l.whileExp, info);

  if (l.isTestFirst())
    info.endInner();

  if (l.isInfinite())
    info.setUnreachable();
}

analyse(BreakStmt b, info)
{
  ?LoopStmt loop = info.currentLoop;
  if (loop == null)
    throw error(b, "break without label must only occur inside loops");

  loop.createBlock();
  info.setUnreachable();
}

analyse(LabeledStmt s, info)
{
  mustNotFindLabel(s.getLabel(), info);
  info.labels.push(s);
  analyse(s.getStatement(), info);
  info.labels.pop();
}

private LabeledStmt findLabel(LocatedString label, Info info) 
{
  return info.labels.findLast(LabeledStmt l => l.name.equals(label.toString()));
}

private LabeledStmt mustFindLabel(LocatedString label, Info info) 
{
  try {
    return findLabel(label, info);
  }
  catch(NoSuchElementException e) {
    throw error(label, "unknown label: " + label);
  }
}
  
private void mustNotFindLabel(LocatedString label, Info info) 
{
  try {
    findLabel(label, info);
    throw error(label, "duplicate label: " + label);
  }
  catch(NoSuchElementException e) {
  }
}
  
analyse(BreakLabelStmt b, info)
{
  LabeledStmt target = b.statement = mustFindLabel(b.label, info);
  ?LoopStmt loop = target.getLoop(); 

  if (loop != null)
    {
      loop.createBlock();
    }
  else
    {
      // if it isn't a loop it must be a block because of the parser
      Block block = cast(target.getStatement());
      block.isBreakTarget = true;
    }   

  info.setUnreachable();
}

analyse(ContinueStmt c, info)
{
  if (c.label == null)
    {
      c.loop = info.currentLoop;
    }
  else
    {
      LabeledStmt l = mustFindLabel(notNull(c.label), info);
      c.loop = l.getLoop();
    }

  if (c.loop == null)
    throw error(c, "continue must only occur inside loops");

  info.setUnreachable();
}

analyse(ReturnStmt r, info)
{
  r.value = analyse(r.value, info);
  info.setUnreachable();
}

analyse(VoidReturnStmt r, info)
{
  info.setUnreachable();
}

analyse(TryStmt t, info)
{
  info.beginCases();
  analyse(t.body, info);

  t.catches.foreach(ACatch c =>{
    info.otherCase();
    info.begin();
    info.addVar(c.exnVar);
    c.t = notNull(c.tc).resolveToTC(info.typeMap);
    c.tc = null;
    analyse(c.body, info);
    info.end();
  });
  info.endCases();

  // The finally block is always reachable since the try statement was.
  // If the try/catch section cannot comlete normally, 
  // the finally block is still executed;
  // however the whole try/catch/finally cannot complete normally then.
  // We care for that after analysing the finally block.
  // (cf. JLS 14.20)

  boolean tryCatchCannotCompleteNormally = info.getUnreachable();

  info.setReachable();
  analyse(t.finallyBody, info);

  if (tryCatchCannotCompleteNormally)
    info.setUnreachable();
}

analyse(SynchronizedStmt s, info)
{
  s.object = analyse(s.object, info);
  analyse(s.body, info);
}

/****************************************************************
 * Misc
 ****************************************************************/

bossa.util.UserError error(?bossa.util.Located responsible, String message) = 
     native bossa.util.UserError bossa.util.User.error
     (bossa.util.Located, String);

// Local Variables:
// nice-xprogram: "../bin/nicec -d ../classes --sourcepath=../src"
// End:
