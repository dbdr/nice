/**************************************************************************/
/*                                N I C E                                 */
/*             A high-level object-oriented research language             */
/*                        (c) Daniel Bonniot 2004                         */
/*                                                                        */
/*  This program is free software; you can redistribute it and/or modify  */
/*  it under the terms of the GNU General Public License as published by  */
/*  the Free Software Foundation; either version 2 of the License, or     */
/*  (at your option) any later version.                                   */
/*                                                                        */
/**************************************************************************/

package bossa.syntax;

import bossa.util.*;

/**
   A variable (local, field of a class, parameter of a method or function).

*/
public abstract class VarSymbol extends Symbol implements Located
{
  private ?gnu.expr.Declaration decl = null;
  private boolean isThis = false;

  location() = notNull(name).location();
  
  public LocatedString getName() = notNull(name);

  public boolean hasName(LocatedString i) = notNull(name).equals(i);

  boolean isAssignable() = true;

  boolean isFieldAccess() = this.getFieldAccessMethod() != null;

  ?FieldAccess getFieldAccessMethod() = null;

  public ?MethodDeclaration getMethodDeclaration() = null;

  boolean isIgnored() = false;

  void checkSpecialRequirements(Expression[?] arguments)
  {
    // Do nothing by default.
  }

  public ?Definition getDefinition() = null;

  mlsub.typing.Polytype getType();

  /**
     @return
     0 : doesn't match
     1 : wasn't even a function
     2 : matches
  */
  int match(Arguments arguments) = 1;

  /**
   * Specialized by MethodSymbol only.
   */
  String defaultExplainWhyMatchFails(Arguments arguments)
  {
    return this.explainWhyMatchFails(arguments);
  }
    
  /** This returns a generic explanation.
      A more precise message should be returned if possible in subclasses.
  */
  String explainWhyMatchFails(Arguments arguments)
  {
    return "Incorrect call to " + name;
  }

  // explained in OverloadedSymbolExp
  void makeClonedType();
  void releaseClonedType();
  mlsub.typing.Polytype getClonedType();
  
  /** @return code that accesses this variable. */
  gnu.expr.Expression compile()
  {
    // Allow a sub-class to compute decl a la demande in getDeclaration().
    let decl = this.getDeclaration();

    if (decl == null)
      Internal.error(this + " has no bytecode declaration");
    
    if (isThis)
      return new gnu.expr.ThisExp(decl);
    else
      return new gnu.expr.ReferenceExp(name == null ? null : notNull(name).toString(), 
				       decl);
  }

  /** @return code that accesses this variable, when it is used
      as the function of a call. */
  gnu.expr.Expression compileInCallPosition()
  {
    // Default implementation.
    return this.compile();
  }

  ?gnu.expr.Declaration getDeclaration() = decl;

  public void setDeclaration(gnu.expr.Declaration declaration)
  {
    this.setDeclaration(declaration, false);
  }

  public void setDeclaration(gnu.expr.Declaration declaration, boolean isThis)
  {
    this.decl = declaration;
    this.isThis = isThis;
    if (name != null) 
      notNull(name).location().write(declaration);
    declaration.setCanRead(true);
    declaration.setCanWrite(true);
  }
}

/**
   A variable symbol which has a monotype (eg a function parameter)
 
   @see PolySymbol
*/
public class MonoSymbol extends VarSymbol
{
  ?Monotype syntacticType = null;
  ?mlsub.typing.Monotype type = null;

  boolean captured = false;

  /** The depth of nested block at which this variable is defined. */
  int depth = 0;

  boolean used = false;

  getType() = new mlsub.typing.Polytype(type);

  public ?mlsub.typing.Monotype getMonotype()
  {
    return type;
  }

  resolve()
  {
    type = notNull(syntacticType).resolve(notNull(typeScope));
    syntacticType = null;

    if (nice.tools.typing.Types.isVoid(type))
      throw User.error(name, "A variable cannot have a void type");
  }

  /**
     @return
     0 : doesn't match
     1 : wasn't even a function
     2 : matches
  */
  match(arguments)
  {
    let k = nice.tools.typing.Types.rawType(type).getKind();
    if (k instanceof mlsub.typing.FunTypeKind)
      if (!notNull(arguments).plainApplication(k.domainArity, this))
	return 0;
      else
	return 2;
    else 
      return 1;
  }

  explainWhyMatchFails(arguments)
  {
    let k = nice.tools.typing.Types.rawType(type).getKind();
    if (k instanceof mlsub.typing.FunTypeKind)
      { 
	int arity = k.domainArity;
	if (notNull(arguments).size() != arity)
	  return notNull(name) + Util.has(arity, "parameter", notNull(arguments).size());
	else
	  // If the number of arguments is correct, it must be that
	  // some arguments are named.
	  return notNull(name) + " does not have named parameters";
      }
    else 
      return notNull(name) + " is not a function";
  }

  // explained in OverloadedSymbolExp
  makeClonedType() {}
  releaseClonedType() {}
  getClonedType() = this.getType();
  
  toString()
  {
    if (type != null)
      return notNull(type) + " " + name;

    if (syntacticType != null)
      return notNull(syntacticType) + " " + name;

    return ""name;
  }
}

public MonoSymbol createMonoSymbol(LocatedString name, Monotype type)
{
  return new MonoSymbol(name, syntacticType: type);
}

/**
   Maps getMonotype over an array of MonoSymbols.
 */
mlsub.typing.Monotype[?] getMonotypes(MonoSymbol[?] symbols)
{
  if (symbols == null)
    return null;

  return symbols.mapToArray(MonoSymbol sym => notNull(sym.getMonotype()));
}

/**
   A variable symbol which has a polytype (eg a method symbol)
   
   @see MonoSymbol
*/
public class PolySymbol extends VarSymbol
{
  ?mlsub.typing.Polytype type = null;
  ?mlsub.typing.Polytype clonedType = null;
  ?Polytype syntacticType = null;

  {
    if (syntacticType!=null)
      this.addChild(syntacticType);
  }

  getType() = notNull(type);
  isAssignable() = false;   // No polymorphic references!

  resolve()
  {
    type = notNull(syntacticType).resolveToLowlevel();
    syntacticType = null;
    this.removeChildren();
  }
  
  makeClonedType()
  {
    if (clonedType != null)
      Internal.error(this, "clonedType in use");

    clonedType = notNull(type).cloneType();
  }

  releaseClonedType()
  {
    clonedType = null;
  }
  
  getClonedType() = notNull(clonedType);

  toString()
  {
    ?mlsub.typing.Polytype type = this.type;
    return (type==null ? String.valueOf(notNull(syntacticType)) : type.toString()) 
      + " " + name;
  }
}

new PolySymbol(MonoSymbol sym)
{
 this(sym.name, syntacticType : new Polytype(Node.down, monotype: notNull(sym.syntacticType)));
}

/**
 * A functional symbol.
 */
class FunSymbol extends PolySymbol
{
  ?FormalParameters parameters;
  int arity;

  ?FormalParameters getFormalParameters() = this.parameters;

  String describeParameters() 
  {
    ?FormalParameters parameters = this.parameters;
    if (parameters != null)
      return parameters.toString();

    mlsub.typing.Monotype m = nice.tools.typing.Types.rawType(
    	notNull(this.getType()).getMonotype());
    if (m instanceof mlsub.typing.FunType)
      return bossa.util.Util.map("", ", ", "", m.domain());

    bossa.util.Internal.warning(this, "Non functional type in a functional symbol");
    return "";
  }

  /**
     @return
     0 : doesn't match
     1 : wasn't even a function
     2 : matches
  */
  match(Arguments arguments)
  {
    let parameters = this.parameters;
    if (parameters == null)
      {
         // true for constructors, for instance. case might be removed
         if (!arguments.plainApplication(arity, this))
	   return 0;
      }
    else if (!parameters.match(arguments, this))
      return 0;

    return 2;
  }

  String explainWhyMatchFailsWithFunSymbol(Arguments arguments)
  {
    if (this.isFieldAccess())
      {
        if (arguments.size() == 0)
           return notNull(name) + " is not defined";

        return notNull(name) + " is a field of class " + this.describeParameters();
      }

    return "Method " + name + " expects parameters (" + 
      this.describeParameters() + ")";
  }
  
  explainWhyMatchFails(Arguments arguments) =
  	this.explainWhyMatchFailsWithFunSymbol(arguments);

}

new FunSymbol(LocatedString name, Constraint constraint,
				FormalParameters parameters, Monotype returnType)
{
  this(name, parameters: parameters, arity: parameters.size, syntacticType:
	new Polytype(Node.down, constraint: constraint, monotype: createFunType(parameters.types(), returnType)));
}

/**
 * A symbol for a declared method.
 */
public class MethodSymbol extends FunSymbol
{
  MethodDeclaration declaration;

  getFieldAccessMethod()
  {
    let decl = this.declaration;
    if (decl instanceof FieldAccess)
      return decl;

    return null;
  }

  isIgnored() = this.declaration.isIgnored();
 
  checkSpecialRequirements(arguments) =
      this.declaration.checkSpecialRequirements(arguments);

  resolve()
  {
    if (this.isIgnored())
      return;

    // Check that resolving has not already been done.
    if (syntacticType != null)
      {
        super;
      	  
      	// The method has a raw type, while the symbol needs a nullness marker
        declaration.type = this.type;
	this.type = nice.tools.typing.Types.addSure(this.type); 
      }
  }

  getDefinition() = this.declaration;
 
  public override MethodDeclaration getMethodDeclaration() = this.declaration;
 
  compile() = this.declaration.getCode();
  	
  compileInCallPosition() = declaration.getCodeInCallPosition();
 
  toString() = this.declaration.toString();
  
  explainWhyMatchFails(Arguments arguments) =
    	this.declaration.explainWhyMatchFails(arguments);

  defaultExplainWhyMatchFails(Arguments arguments) =
    	this.explainWhyMatchFailsWithFunSymbol(arguments);
}

new MethodSymbol(MethodDeclaration declaration, LocatedString name,
	Constraint constraint, Monotype returnType )
{
  FormalParameters parameters = notNull(declaration.formalParameters());
  this(name, declaration: declaration, parameters: parameters, arity: parameters.size,
	syntacticType: new Polytype(Node.down, constraint: constraint, monotype: createFunType(parameters.types(), returnType)));
}

new MethodSymbol(MethodDeclaration declaration, LocatedString name,
	mlsub.typing.Polytype type)
{
  this(name, declaration: declaration, type: nice.tools.typing.Types.addSure(type),
	parameters: declaration.formalParameters(), arity: declaration.arity); 
}

// FIXME if CustomConstructor is made to extend Constructor, this code can be cleaned up
class ConstructorCallSymbol extends MethodSymbol
{
  compileInCallPosition()
  {
    let decl = this.declaration;

    if (decl instanceof Constructor)
      return decl.getInitializationCode(true);
    else if (decl instanceof CustomConstructor)
      return decl.getInitializationCode(true);

    throw Internal.error("Declaration associated with ConstructorCallSymbol is not a constructor.");
  }
}

boolean isNonStaticFieldAccess(VarSymbol sym)
{
  let access = sym.getFieldAccessMethod();
  return access != null && ! access.isStatic();
}

boolean isStaticFieldAccess(VarSymbol sym)
{
  let access = sym.getFieldAccessMethod();
  return access != null && access.isStatic();
}
