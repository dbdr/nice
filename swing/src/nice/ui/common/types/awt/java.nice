
/**************************************************************************/
/*                                                                        */
/*  This program is free software; you can redistribute it and/or modify  */
/*  it under the terms of the GNU General Public License as published by  */
/*  the Free Software Foundation; either version 2 of the License, or     */
/*  (at your option) any later version.                                   */
/*                                                                        */
/**************************************************************************/


package nice.ui.common.types.awt;


import java.io.*;
import java.util.*;
import java.awt.*;
import java.awt.event.*;
import java.awt.dnd.*;
import java.awt.font.*;
import java.awt.geom.*;
import java.awt.datatransfer.*;
import java.awt.image.*;
import java.beans.*;
import java.beans.beancontext.*;
import javax.accessibility.*;
import java.text.*;



Color black() = native Color.black;
Color blue() = native Color.blue;
Color cyan() = native Color.cyan;
Color darkGray() = native Color.darkGray;
Color gray() = native Color.gray;
Color green() = native Color.green;
Color lightGray() = native Color.lightGray;
Color magenta() = native Color.magenta;
Color orange() = native Color.orange;
Color pink() = native Color.pink;
Color red() = native Color.red;
Color white() = native Color.white;
Color yellow() = native Color.yellow;

Color BLACK() = native Color.black;
Color BLUE() = native Color.blue;
Color CYAN() = native Color.cyan;
Color DARK_GRAY() = native Color.darkGray;
Color GRAY() = native Color.gray;
Color GREEN() = native Color.green;
Color LIGHT_GRAY() = native Color.lightGray;
Color MAGENTA() = native Color.magenta;
Color ORANGE() = native Color.orange;
Color PINK() = native Color.pink;
Color RED() = native Color.red;
Color WHITE() = native Color.white;
Color YELLOW() = native Color.yellow;

String WEST() = native BorderLayout.WEST;
String CENTER() = native BorderLayout.CENTER;
String EAST() = native BorderLayout.EAST;
String NORTH() = native BorderLayout.NORTH;
String SOUTH() = native BorderLayout.SOUTH;
String AFTER_LAST_LINE() = native BorderLayout.AFTER_LAST_LINE;
String AFTER_LINE_ENDS() = native BorderLayout.AFTER_LINE_ENDS;
String BEFORE_FIRST_LINE() = native BorderLayout.BEFORE_FIRST_LINE;
String BEFORE_LINE_BEGINS() = native BorderLayout.BEFORE_LINE_BEGINS;
//JDK1.4 String LINE_END() = native BorderLayout.LINE_END;
//JDK1.4 String LINE_START() = native BorderLayout.LINE_START;
//JDK1.4 String PAGE_END() = native BorderLayout.PAGE_END;
//JDK1.4 String PAGE_START() = native BorderLayout.PAGE_START;


/**
 * EVENT INTERFACE SECTION
 */

// interface ActionListener
void actionPerformed(ActionListener, ActionEvent)
  = native void ActionListener.actionPerformed(ActionEvent);


// interface AdjustmentListener
void adjustmentValueChanged(AdjustmentListener, AdjustmentEvent)
  = native void AdjustmentListener.adjustmentValueChanged(AdjustmentEvent);


// interface AWTEventListener
void eventDispatched(AWTEventListener, AWTEvent)
  = native void AWTEventListener.eventDispatched(AWTEvent);


// interface ComponentListener
void componentHidden(ComponentListener, ComponentEvent)
  = native void ComponentListener.componentHidden(ComponentEvent);
void componentMoved(ComponentListener, ComponentEvent)
  = native void ComponentListener.componentMoved(ComponentEvent);
void componentShown(ComponentListener, ComponentEvent)
  = native void ComponentListener.componentShown(ComponentEvent);
void componentResized(ComponentListener, ComponentEvent)
  = native void ComponentListener.componentResized(ComponentEvent);


// interface ContainerListener
void componentAdded(ContainerListener, ContainerEvent)
  = native void ContainerListener.componentAdded(ContainerEvent);
void componentRemoved(ContainerListener, ContainerEvent)
  = native void ContainerListener.componentRemoved(ContainerEvent);


// interface FocusListener
void focusGained(FocusListener, FocusEvent)
  = native void FocusListener.focusGained(FocusEvent);
void focusLost(FocusListener, FocusEvent)
  = native void FocusListener.focusLost(FocusEvent);


// interface HierarchyBoundsListener
void ancestorMoved(HierarchyBoundsListener, HierarchyEvent)
  = native void HierarchyBoundsListener.ancestorMoved(HierarchyEvent);
void ancestorResized(HierarchyBoundsListener, HierarchyEvent)
  = native void HierarchyBoundsListener.ancestorResized(HierarchyEvent);


// interface HierarchyListener
void hierarchyChanged(HierarchyListener, HierarchyEvent)
  = native void HierarchyListener.hierarchyChanged(HierarchyEvent);


// interface InputMethodListener
void caretPositionChanged(InputMethodListener, InputMethodEvent)
  = native void InputMethodListener.caretPositionChanged(InputMethodEvent);
void inputMethodTextChanged(InputMethodListener, InputMethodEvent)
  = native void InputMethodListener.inputMethodTextChanged(InputMethodEvent);


// interface ItemListener
void itemStateChanged(ItemListener, ItemEvent)
  = native void ItemListener.itemStateChanged(ItemEvent);


// interface KeyListener
void keyPressed(KeyListener, KeyEvent)
  = native void KeyListener.keyPressed(KeyEvent);
void keyReleased(KeyListener, KeyEvent)
  = native void KeyListener.keyReleased(KeyEvent);
void keyTyped(KeyListener, KeyEvent)
  = native void KeyListener.keyTyped(KeyEvent);


// interface MouseListener
void mouseClicked(MouseListener, MouseEvent)
  = native void MouseListener.mouseClicked(MouseEvent);
void mouseEntered(MouseListener, MouseEvent)
  = native void MouseListener.mouseEntered(MouseEvent);
void mouseExited(MouseListener, MouseEvent)
  = native void MouseListener.mouseExited(MouseEvent);
void mousePressed(MouseListener, MouseEvent)
  = native void MouseListener.mousePressed(MouseEvent);
void mouseReleased(MouseListener, MouseEvent)
  = native void MouseListener.mouseReleased(MouseEvent);


// interface MouseMotionListener
void mouseDragged(MouseMotionListener, MouseEvent)
  = native void MouseMotionListener.mouseDragged(MouseEvent);
void mouseMoved(MouseMotionListener, MouseEvent)
  = native void MouseMotionListener.mouseMoved(MouseEvent);


// interface TextListener
void textValueChanged(TextListener, TextEvent)
  = native void TextListener.textValueChanged(TextEvent);


// interface WindowListener
void windowActivated(WindowListener, WindowEvent)
  = native void WindowListener.windowActivated(WindowEvent);
void windowClosed(WindowListener, WindowEvent)
  = native void WindowListener.windowClosed(WindowEvent);
void windowClosing(WindowListener, WindowEvent)
  = native void WindowListener.windowClosing(WindowEvent);
void windowDeactivated(WindowListener, WindowEvent)
  = native void WindowListener.windowDeactivated(WindowEvent);
void windowDeiconified(WindowListener, WindowEvent)
  = native void WindowListener.windowDeiconified(WindowEvent);
void windowIconified(WindowListener, WindowEvent)
  = native void WindowListener.windowIconified(WindowEvent);
void windowOpened(WindowListener, WindowEvent)
  = native void WindowListener.windowOpened(WindowEvent);


// interface DragGestureListener
void dragGestureRecognized(DragGestureListener, DragGestureEvent)
  = native void DragGestureListener.dragGestureRecognized(DragGestureEvent);


// interface DragSourceListener
void dragDropEnd(DragSourceListener, DragSourceDropEvent)
  = native void DragSourceListener.dragDropEnd(DragSourceDropEvent);
void dragEnter(DragSourceListener, DragSourceDragEvent)
  = native void DragSourceListener.dragEnter(DragSourceDragEvent);
void dragExit(DragSourceListener, DragSourceEvent)
  = native void DragSourceListener.dragExit(DragSourceEvent);
void dragOver(DragSourceListener, DragSourceDragEvent)
  = native void DragSourceListener.dragOver(DragSourceDragEvent);
void dropActionChanged(DragSourceListener, DragSourceDragEvent)
  = native void DragSourceListener.dropActionChanged(DragSourceDragEvent);


// interface DropTargetListener
void dragEnter(DropTargetListener, DropTargetDragEvent)
  = native void DropTargetListener.dragEnter(DropTargetDragEvent);
void dragExit(DropTargetListener, DropTargetEvent)
  = native void DropTargetListener.dragExit(DropTargetEvent);
void dragOver(DropTargetListener, DropTargetDragEvent)
  = native void DropTargetListener.dragOver(DropTargetDragEvent);
void drop(DropTargetListener, DropTargetDropEvent)
  = native void DropTargetListener.drop(DropTargetDropEvent);
void dropActionChanged(DropTargetListener, DropTargetDragEvent)
  = native void DropTargetListener.dropActionChanged(DropTargetDragEvent);


//JDK1.4  // interface DragSourceMotionListener
//JDK1.4  void dragMouseMoved(DragSourceMotionListener, DragSourceDragEvent)
//JDK1.4    = native void DragSourceMotionListener.dragMouseMoved(DragSourceDragEvent);

//JDK1.4  // interface WindowStateListener
//JDK1.4  void windowStateChanged(WindowStateListener, WindowEvent)
//JDK1.4    = native void WindowStateListener.windowStateChanged(WindowEvent);

//JDK1.4  // interface WindowFocusListener
//JDK1.4  void windowGainedFocus(WindowFocusListener, WindowEvent)
//JDK1.4    = native void WindowFocusListener.windowGainedFocus(WindowEvent);
//JDK1.4  void windowLostFocus(WindowFocusListener, WindowEvent)
//JDK1.4    = native void WindowFocusListener.windowLostFocus(WindowEvent);



/**
 * INTERFACES SECTION
 */

// interface Adjustable
void addAdjustmentListener(Adjustable, AdjustmentListener)
  = native void Adjustable.addAdjustmentListener(AdjustmentListener);
void removeAdjustmentListener(Adjustable, AdjustmentListener)
  = native void Adjustable.removeAdjustmentListener(AdjustmentListener);


// interface Composite
<Any Key, Any Element> CompositeContext createContext(Composite, ColorModel, ColorModel, RenderingHints<Key,Element>)
  = native CompositeContext Composite.createContext(ColorModel, ColorModel, RenderingHints) ;


// interface CompositeContext
void compose(CompositeContext, Raster, Raster, WritableRaster)
  = native void CompositeContext.compose(Raster, Raster, WritableRaster);


// interface ItemSelectable
void addItemListener(ItemSelectable, ItemListener)
  = native void ItemSelectable.addItemListener(ItemListener);
void removeItemListener(ItemSelectable, ItemListener)
  = native void ItemSelectable.removeItemListener(ItemListener);


// interface LayoutManager
void addLayoutComponent(LayoutManager, String, Component)
  = native void LayoutManager.addLayoutComponent(String, Component);
void layoutContainer(LayoutManager, Container)
  = native void LayoutManager.layoutContainer(Container);
void removeLayoutComponent(LayoutManager, Component)
  = native void LayoutManager.removeLayoutComponent(Component);
Dimension minimumLayoutSize(LayoutManager, Container)
  = native Dimension LayoutManager.minimumLayoutSize(Container);
Dimension preferredLayoutSize(LayoutManager, Container)
  = native Dimension LayoutManager.preferredLayoutSize(Container);


// interface LayoutManager2
void addLayoutComponent(LayoutManager2, Component, Object)
  = native void LayoutManager2.addLayoutComponent(Component, Object);
float getLayoutAlignmentX(LayoutManager2, Container)
  = native float LayoutManager2.getLayoutAlignmentX(Container);
float getLayoutAlignmentY(LayoutManager2, Container)
  = native float LayoutManager2.getLayoutAlignmentY(Container);
void invalidateLayout(LayoutManager2, Container)
  = native void LayoutManager2.invalidateLayout(Container);
Dimension maximumLayoutSize(LayoutManager2, Container)
  = native Dimension LayoutManager2.maximumLayoutSize(Container);


// interface MenuContainer
Font getFont(MenuContainer)
  = native Font MenuContainer.getFont();
void remove(MenuContainer, MenuComponent)
  = native void MenuContainer.remove(MenuComponent);


// interface Paint
<Any Key, Element> PaintContext createContext(Paint, ColorModel, Rectangle, Rectangle2D, AffineTransform, RenderingHints<Key,Element>)
  = native PaintContext Paint.createContext(ColorModel, Rectangle, Rectangle2D, AffineTransform, RenderingHints);


// interface PaintContext
ColorModel getColorModel(PaintContext)
  = native ColorModel PaintContext.getColorModel();
Raster getRaster(PaintContext, int, int, int, int)
  = native Raster PaintContext.getRaster(int, int, int, int);


// interface PrintGraphics
PrintJob getPrintJob(PrintGraphics)
  = native PrintJob PrintGraphics.getPrintJob();


// interface Shape
boolean contains(Shape, Point2D)
  = native boolean Shape.contains(Point2D);
boolean contains(Shape, Rectangle2D)
  = native boolean Shape.contains(Rectangle2D);
boolean intersects(Shape, Rectangle2D)
  = native boolean Shape.intersects(Rectangle2D);
Rectangle getBounds(Shape)
  = native Rectangle Shape.getBounds();
Rectangle2D getBounds2D(Shape)
  = native Rectangle2D Shape.getBounds2D();
PathIterator getPathIterator(Shape, AffineTransform)
  = native PathIterator Shape.getPathIterator(AffineTransform);
PathIterator getPathIterator(Shape, AffineTransform, double)
  = native PathIterator Shape.getPathIterator(AffineTransform, double);


// interface Stroke
Shape createStrokedShape(Stroke, Shape)
  = native Shape Stroke.createStrokedShape(Shape);


// interface javax.accessibility.Accessible
AccessibleContext getAccessibleContext(javax.accessibility.Accessible)
  = native AccessibleContext javax.accessibility.Accessible.getAccessibleContext();


// interface java.awt.image.ImageObserver
boolean imageUpdate(ImageObserver, Image, int, int, int, int, int)
  = native boolean ImageObserver.imageUpdate(Image, int, int, int, int, int);


//JDK1.4  // interface KeyEventDispatcher
//JDK1.4  boolean dispatchKeyEvent(KeyEventDispatcher, KeyEvent)
//JDK1.4    = native boolean KeyEventDispatcher.dispatchKeyEvent(KeyEvent);


//JDK1.4  // interface KeyEventPostProcessor
//JDK1.4  boolean postProcessKeyEvent(KeyEventPostProcessor, KeyEvent)
//JDK1.4    = native boolean KeyEventPostProcessor.postProcessKeyEvent(KeyEvent);



/**
 * CLASSES SECTION
 */


// class AWTEventMulticaster
ActionListener add(ActionListener, ActionListener)
  = native ActionListener AWTEventMulticaster.add(ActionListener, ActionListener);
AdjustmentListener add(AdjustmentListener, AdjustmentListener)
  = native AdjustmentListener AWTEventMulticaster.add(AdjustmentListener, AdjustmentListener);
ComponentListener  add(ComponentListener , ComponentListener )
  = native ComponentListener  AWTEventMulticaster.add(ComponentListener , ComponentListener );
ContainerListener add(ContainerListener, ContainerListener)
  = native ContainerListener AWTEventMulticaster.add(ContainerListener, ContainerListener);
FocusListener  add(FocusListener , FocusListener )
  = native FocusListener  AWTEventMulticaster.add(FocusListener , FocusListener );
HierarchyBoundsListener add(HierarchyBoundsListener, HierarchyBoundsListener)
  = native HierarchyBoundsListener AWTEventMulticaster.add(HierarchyBoundsListener, HierarchyBoundsListener);
HierarchyListener  add(HierarchyListener , HierarchyListener )
  = native HierarchyListener  AWTEventMulticaster.add(HierarchyListener , HierarchyListener );
InputMethodListener  add(InputMethodListener , InputMethodListener )
  = native InputMethodListener  AWTEventMulticaster.add(InputMethodListener , InputMethodListener);
ItemListener add(ItemListener, ItemListener)
  = native ItemListener AWTEventMulticaster.add(ItemListener, ItemListener);
KeyListener add(KeyListener, KeyListener)
  = native KeyListener AWTEventMulticaster.add(KeyListener, KeyListener);
MouseListener add(MouseListener, MouseListener)
  = native MouseListener AWTEventMulticaster.add(MouseListener, MouseListener);
MouseMotionListener add(MouseMotionListener, MouseMotionListener)
  = native MouseMotionListener AWTEventMulticaster.add(MouseMotionListener, MouseMotionListener);
TextListener add(TextListener, TextListener)
  = native TextListener AWTEventMulticaster.add(TextListener, TextListener);
WindowListener add(WindowListener, WindowListener)
  = native WindowListener AWTEventMulticaster.add(WindowListener, WindowListener);
ActionListener remove(ActionListener, ActionListener)
  = native ActionListener AWTEventMulticaster.remove(ActionListener, ActionListener);
AdjustmentListener remove(AdjustmentListener, AdjustmentListener)
  = native AdjustmentListener AWTEventMulticaster.add(AdjustmentListener, AdjustmentListener);
ComponentListener  remove(ComponentListener , ComponentListener )
  = native ComponentListener  AWTEventMulticaster.add(ComponentListener , ComponentListener );
ContainerListener remove(ContainerListener, ContainerListener)
  = native ContainerListener AWTEventMulticaster.add(ContainerListener, ContainerListener);
FocusListener  remove(FocusListener , FocusListener )
  = native FocusListener  AWTEventMulticaster.add(FocusListener , FocusListener );
HierarchyBoundsListener remove(HierarchyBoundsListener, HierarchyBoundsListener)
  = native HierarchyBoundsListener AWTEventMulticaster.add(HierarchyBoundsListener, HierarchyBoundsListener);
HierarchyListener  remove(HierarchyListener , HierarchyListener )
  = native HierarchyListener  AWTEventMulticaster.add(HierarchyListener , HierarchyListener );
InputMethodListener  remove(InputMethodListener , InputMethodListener )
  = native InputMethodListener  AWTEventMulticaster.add(InputMethodListener , InputMethodListener);
ItemListener remove(ItemListener, ItemListener)
  = native ItemListener AWTEventMulticaster.add(ItemListener, ItemListener);
KeyListener remove(KeyListener, KeyListener)
  = native KeyListener AWTEventMulticaster.add(KeyListener, KeyListener);
MouseListener remove(MouseListener, MouseListener)
  = native MouseListener AWTEventMulticaster.add(MouseListener, MouseListener);
MouseMotionListener remove(MouseMotionListener, MouseMotionListener)
  = native MouseMotionListener AWTEventMulticaster.add(MouseMotionListener, MouseMotionListener);
TextListener remove(TextListener, TextListener)
  = native TextListener AWTEventMulticaster.add(TextListener, TextListener);
WindowListener remove(WindowListener, WindowListener)
  = native WindowListener AWTEventMulticaster.add(WindowListener, WindowListener);
//JDK1.4  EventListener[] getListeners(EventListener, Class)
//JDK1.4    = native EventListener[] AWTEventMulticaster.getListeners(EventListener, Class);
//JDK1.4  EventListener[] getListeners(java.awt.Component, Class)
//JDK1.4    = native EventListener[] java.awt.Component.getListeners(Class);
//JDK1.4  MouseWheelListener add(MouseWheelListener, MouseWheelListener)
//JDK1.4    = native MouseWheelListener AWTEventMulticaster.add(MouseWheelListener, MouseWheelListener);
//JDK1.4  WindowFocusListener  add(WindowFocusListener , WindowFocusListener)
//JDK1.4    = native WindowFocusListener AWTEventMulticaster.add(WindowFocusListener, WindowFocusListener);
//JDK1.4  WindowStateListener add(WindowStateListener, WindowStateListener)
//JDK1.4    = native WindowStateListener AWTEventMulticaster.add(WindowStateListener, WindowStateListener);
//JDK1.4  MouseWheelListener remove(MouseWheelListener, MouseWheelListener)
//JDK1.4    = native MouseWheelListener AWTEventMulticaster.add(MouseWheelListener, MouseWheelListener);
//JDK1.4  WindowFocusListener  remove(WindowFocusListener , WindowFocusListener)
//JDK1.4    = native WindowFocusListener AWTEventMulticaster.add(WindowFocusListener, WindowFocusListener);
//JDK1.4  WindowStateListener remove(WindowStateListener, WindowStateListener)
//JDK1.4    = native WindowStateListener AWTEventMulticaster.add(WindowStateListener, WindowStateListener);


// class BorderLayout
String CENTER() = native BorderLayout.CENTER;


// class Button
AccessibleContext getAccessibleContext(Button)
  = native AccessibleContext Button.getAccessibleContext();
String getActionCommand(Button)
  = native String Button.getActionCommand();
void processActionEvent(Button, ActionEvent)
  = native void Button.processActionEvent(ActionEvent);
//JDK1.4  ActionListener[] getActionListeners(Button)
//JDK1.4    = native ActionListener[] Button.getActionListeners();


// class Canvas
AccessibleContext getAccessibleContext(Canvas)
  = native AccessibleContext Canvas.getAccessibleContext();
//JDK1.4  BufferStrategy getBufferStrategy(Canvas)
//JDK1.4    = native BufferStrategy Canvas.getBufferStrategy();
//JDK1.4  void createBufferStrategy(Canvas, int, BufferCapabilities)
//JDK1.4    = native void Canvas.createBufferStrategy(int, BufferCapabilities);


// class Checkbox
AccessibleContext getAccessibleContext(Checkbox)
  = native AccessibleContext Checkbox.getAccessibleContext();
Object[] getSelectedObjects(Checkbox)
  = native Object[] Checkbox.getSelectedObjects();
void processItemEvent(Checkbox, ItemEvent)
  = native void Checkbox.processItemEvent(ItemEvent);
//JDK1.4  ItemListener[] getItemListeners(Checkbox)
//JDK1.4    = native ItemListener[] Checkbox.getItemListeners();
//JDK1.4  EventListener[] getListeners(Checkbox, Class)
//JDK1.4    = native EventListener[] Checkbox.getListeners(Class);


// class CheckboxMenuItem
AccessibleContext getAccessibleContext(CheckboxMenuItem)
  = native AccessibleContext CheckboxMenuItem.getAccessibleContext();
Object[] getSelectedObjects(CheckboxMenuItem)
  = native Object[] CheckboxMenuItem.getSelectedObjects();
void processItemEvent(CheckboxMenuItem, ItemEvent)
  = native void CheckboxMenuItem.processItemEvent(ItemEvent);
//JDK1.4  ItemListener[] getItemListeners(CheckboxMenuItem)
//JDK1.4    = native ItemListener[] CheckboxMenuItem.getItemListeners();


// class Choice
void add(Choice, String)
  = native void Choice.add(String);
void addItem(Choice, String)
  = native void Choice.addItem(String);
void remove(Choice, String)
  = native void Choice.remove(String);
void select(Choice, String)
  = native void Choice.select(String);
void insert(Choice, String, int)
  = native void Choice.insert(String, int);
AccessibleContext getAccessibleContext(Choice)
  = native AccessibleContext Choice.getAccessibleContext();
String getItem(Choice, int)
  = native String Choice.getItem(int);
String getSelectedItem(Choice)
  = native String Choice.getSelectedItem();
Object[] getSelectedObjects(Choice)
  = native Object[] Choice.getSelectedObjects();
//JDK1.4  ItemListener[] getItemListeners(Choice)
//JDK1.4    = native ItemListener[] Choice.getItemListeners();


// class Component
void addComponentListener(Component, ComponentListener)
  = native void Component.addComponentListener(ComponentListener);
void addFocusListener(Component, FocusListener)
  = native void Component.addFocusListener(FocusListener);
void addHierarchyBoundsListener(Component, HierarchyBoundsListener)
  = native void Component.addHierarchyBoundsListener(HierarchyBoundsListener);
void addHierarchyListener(Component, HierarchyListener)
  = native void Component.addHierarchyListener(HierarchyListener);
void addInputMethodListener(Component, InputMethodListener)
  = native void Component.addInputMethodListener(InputMethodListener);
void addKeyListener(Component, KeyListener)
  = native void Component.addKeyListener(KeyListener);
void addMouseListener(Component, MouseListener)
  = native void Component.addMouseListener(MouseListener);
void addMouseMotionListener(Component, MouseMotionListener)
  = native void Component.addMouseMotionListener(MouseMotionListener);
void addPropertyChangeListener(Component, PropertyChangeListener)
  = native void Component.addPropertyChangeListener(PropertyChangeListener);
void addPropertyChangeListener(Component, String, PropertyChangeListener)
  = native void Component.addPropertyChangeListener(String, PropertyChangeListener);
void removeComponentListener(Component, ComponentListener)
  = native void Component.removeComponentListener(ComponentListener);
void removeFocusListener(Component, FocusListener)
  = native void Component.removeFocusListener(FocusListener);
void removeHierarchyBoundsListener(Component, HierarchyBoundsListener)
  = native void Component.removeHierarchyBoundsListener(HierarchyBoundsListener);
void removeHierarchyListener(Component, HierarchyListener)
  = native void Component.removeHierarchyListener(HierarchyListener);
void removeInputMethodListener(Component, InputMethodListener)
  = native void Component.removeInputMethodListener(InputMethodListener);
void removeKeyListener(Component, KeyListener)
  = native void Component.removeKeyListener(KeyListener);
void removeMouseListener(Component, MouseListener)
  = native void Component.removeMouseListener(MouseListener);
void removeMouseMotionListener(Component, MouseMotionListener)
  = native void Component.removeMouseMotionListener(MouseMotionListener);
void removePropertyChangeListener(Component, PropertyChangeListener)
  = native void Component.removePropertyChangeListener(PropertyChangeListener);
void removePropertyChangeListener(Component, String, PropertyChangeListener)
  = native void Component.removePropertyChangeListener(String, PropertyChangeListener);
void add(Component, PopupMenu)
  = native void Component.add(PopupMenu);
boolean contains(Component, Point)
  = native boolean Component.contains(Point);
void firePropertyChange(Component, String, Object, Object)
  = native void Component.firePropertyChange(String, Object, Object);
void list(Component, PrintStream)
  = native void Component.list(PrintStream);
void list(Component, PrintStream, int)
  = native void Component.list(PrintStream, int);
void list(Component, PrintWriter)
  = native void Component.list(PrintStream);
void list(Component, PrintWriter, int)
  = native void Component.list(PrintStream, int);
void paint(Component, Graphics)
  = native void Component.paint(Graphics);
void paintAll(Component, Graphics)
  = native void Component.paintAll(Graphics);
void print(Component, Graphics)
  = native void Component.print(Graphics);
void printAll(Component, Graphics)
  = native void Component.printAll(Graphics);
void remove(Component, MenuComponent)
  = native void Component.remove(MenuComponent);
void setBackground(Component, Color)
  = native void Component.setBackground(Color);
void setBounds(Component, Rectangle)
  = native void Component.setBounds(Rectangle);
void setComponentOrientation(Component, ComponentOrientation)
  = native void Component.setComponentOrientation(ComponentOrientation);
void setDropTarget(Component, DropTarget)
  = native void Component.setDropTarget(DropTarget);
void setFont(Component, Font)
  = native void Component.setFont(Font);
void setCursor(Component, Cursor)
  = native void Component.setCursor(Cursor);
void setForeground(Component, Color)
  = native void Component.setForeground(Color);
void setLocale(Component, Locale)
  = native void Component.setLocale(Locale);
void setLocation(Component, Point)
  = native void Component.setLocation(Point);
void setName(Component, String)
  = native void Component.setName(String);
void setSize(Component, Dimension)
  = native void Component.setSize(Dimension);
void update(Component, Graphics)
  = native void Component.update(Graphics);
Image createImage(Component, ImageProducer)
  = native Image Component.createImage(ImageProducer);
Image createImage(Component, int, int)
  = native Image Component.createImage(int, int);
AccessibleContext getAccessibleContext(Component)
  = native AccessibleContext Component.getAccessibleContext();
Color getBackground(Component)
  = native Color Component.getBackground();
Rectangle getBounds(Component)
  = native Rectangle Component.getBounds();
Rectangle getBounds(Component, Rectangle)
  = native Rectangle Component.getBounds(Rectangle);
ColorModel getColorModel(Component)
  = native ColorModel Component.getColorModel();
ComponentOrientation getComponentOrientation(Component)
  = native ComponentOrientation Component.getComponentOrientation();
Cursor getCursor(Component)
  = native Cursor Component.getCursor();
DropTarget getDropTarget(Component)
  = native DropTarget Component.getDropTarget();
Font getFont(Component)
  = native Font Component.getFont();
FontMetrics getFontMetrics(Component, Font)
  = native FontMetrics Component.getFontMetrics(Font);
Color getForeground(Component)
  = native Color Component.getForeground();
Graphics getGraphics(Component)
  = native Graphics Component.getGraphics();
GraphicsConfiguration getGraphicsConfiguration(Component)
  = native GraphicsConfiguration Component.getGraphicsConfiguration();
EventListener[?] getListeners(Component, Class)
  = native EventListener[] Component.getListeners(Class);
Locale getLocale(Component)
  = native Locale Component.getLocale();
Point getLocation(Component)
  = native Point Component.getLocation();
Point getLocation(Component, Point)
  = native Point Component.getLocation(Point);
Point getLocationOnScreen(Component)
  = native Point Component.getLocationOnScreen();
Dimension getMaximumSize(Component)
  = native Dimension Component.getMaximumSize();
Dimension getMinimumSize(Component)
  = native Dimension Component.getMinimumSize();
String getName(Component)
  = native String Component.getName();
java.awt.Container getParent(Component)
  = native java.awt.Container Component.getParent();
Dimension getPreferredSize(Component)
  = native Dimension Component.getPreferredSize();
Dimension getSize(Component)
  = native Dimension Component.getSize();
Dimension getSize(Component, Dimension)
  = native Dimension Component.getSize(Dimension);
Toolkit getToolkit(Component)
  = native Toolkit Component.getToolkit();
Object getTreeLock(Component)
  = native Object Component.getTreeLock();
Component locate(Component, int, int)
  = native Component Component.locate(int, int);
Point location(Component)
  = native Point Component.location();
String toString(Component)
  = native String Component.toString();
void processEvent(Component, AWTEvent)
  = native void Component.processEvent(AWTEvent);
void processComponentEvent(Component, ComponentEvent)
  = native void Component.processComponentEvent(ComponentEvent);
void processFocusEvent(Component, FocusEvent)
  = native void Component.processFocusEvent(FocusEvent);
void processHierarchyBoundsEvent(Component, HierarchyEvent)
  = native void Component.processHierarchyBoundsEvent(HierarchyEvent);
void processHierarchyEvent(Component, HierarchyEvent)
  = native void Component.processHierarchyEvent(HierarchyEvent);
void processInputMethodEvent(Component, InputMethodEvent)
  = native void Component.processInputMethodEvent(InputMethodEvent);
void processKeyEvent(Component, KeyEvent)
  = native void Component.processKeyEvent(KeyEvent);
void processMouseEvent(Component, MouseEvent)
  = native void Component.processMouseEvent(MouseEvent);
void processMouseMotionEvent(Component, MouseEvent)
  = native void Component.processMouseMotionEvent(MouseEvent);
//JDK1.4  void addMouseWheelListener(Component, MouseWheelListener)
//JDK1.4    = native void Component.addMouseWheelListener(MouseWheelListener);
//JDK1.4  void removeMouseWheelListener(Component, MouseWheelListener)
//JDK1.4    = native void Component.removeMouseWheelListener(MouseWheelListener);
//JDK1.4  void processMouseWheelEvent(Component, MouseWheelEvent)
//JDK1.4    = native void Component.processMouseWheelEvent(MouseWheelEvent);
//JDK1.4  void firePropertyChange(Component, String, boolean, boolean)
//JDK1.4    = native void Component.firePropertyChange(String, boolean, boolean);
//JDK1.4  void firePropertyChange(Component, String, int, int)
//JDK1.4    = native void Component.firePropertyChange(String, int, int);
//JDK1.4  <Any Key, Any Element> void setFocusTraversalKeys(Component, int, Set<Key,Element>)
//JDK1.4    = native void Component.setFocusTraversalKeys(int, Set);
//JDK1.4  PropertyChangeListener[] getPropertyChangeListeners(Component)
//JDK1.4    = native PropertyChangeListener[] Component.getPropertyChangeListeners();
//JDK1.4  PropertyChangeListener[] getPropertyChangeListeners(Component, String)
//JDK1.4    = native PropertyChangeListener[] Component.getPropertyChangeListeners(String);
//JDK1.4  MouseListener[] getMouseListeners(Component)
//JDK1.4    = native MouseListener[] Component.getMouseListeners();
//JDK1.4  MouseMotionListener[] getMouseMotionListeners(Component)
//JDK1.4    = native MouseMotionListener[] Component.getMouseMotionListeners();
//JDK1.4  MouseWheelListener[] getMouseWheelListeners(Component)
//JDK1.4    = native MouseWheelListener[] Component.getMouseWheelListeners();
//JDK1.4  HierarchyBoundsListener[] getHierarchyBoundsListeners(Component)
//JDK1.4    = native HierarchyBoundsListener[] Component.getHierarchyBoundsListeners();
//JDK1.4  HierarchyListener[] getHierarchyListeners(Component)
//JDK1.4    = native HierarchyListener[] Component.getHierarchyListeners();
//JDK1.4  InputMethodListener[] getInputMethodListeners(Component)
//JDK1.4    = native InputMethodListener[] Component.getInputMethodListeners();
//JDK1.4  KeyListener[] getKeyListeners(Component)
//JDK1.4    = native KeyListener[] Component.getKeyListeners();
//JDK1.4  ComponentListener[] getComponentListeners(Component)
//JDK1.4    = native ComponentListener[] Component.getComponentListeners();
//JDK1.4  Container getFocusCycleRootAncestor(Component)
//JDK1.4    = native Container Component.getFocusCycleRootAncestor();
//JDK1.4  FocusListener[] getFocusListeners(Component)
//JDK1.4    = native FocusListener[] Component.getFocusListeners();
//JDK1.4  Set getFocusTraversalKeys(Component, int)
//JDK1.4    = native Set Component.getFocusTraversalKeys(int);
//JDK1.4  boolean isFocusCycleRoot(Component, Container)
//JDK1.4    = native boolean Component.isFocusCycleRoot(Container);



// class java.awt.Container
Component add(java.awt.Container, Component)
  = native Component java.awt.Container.add(Component);
Component add(java.awt.Container, Component, int)
  = native Component java.awt.Container.add(Component, int);
Component add(java.awt.Container, String, Component)
  = native java.awt.Component java.awt.Container.add(String, Component);
void add(java.awt.Container, Component, Object)
  = native void java.awt.Container.add(Component, Object);
void add(java.awt.Container, Component, Object, int)
  = native void java.awt.Container.add(Component, Object, int);
void addContainerListener(java.awt.Container, ContainerListener)
  = native void java.awt.Container.addContainerListener(ContainerListener);
void removeContainerListener(java.awt.Container, ContainerListener)
  = native void java.awt.Container.removeContainerListener(ContainerListener);
void addImpl(java.awt.Container, Component, Object, int)
  = native void java.awt.Container.addImpl(Component, Object, int);
?Component findComponentAt(java.awt.Container, Point)
  = native Component java.awt.Container.findComponentAt(Point);
?Component getComponentAt(java.awt.Container, Point)
  = native Component java.awt.Container.getComponentAt(Point);
void paintComponents(java.awt.Container, Graphics)
  = native void java.awt.Container.paintComponents(Graphics);
void printComponents(java.awt.Container, Graphics)
  = native void java.awt.Container.printComponents(Graphics);
void remove(java.awt.Container, Component)
  = native void java.awt.Container.remove(Component);
Component getComponent(java.awt.Container, int)
  = native java.awt.Component java.awt.Container.getComponent(int);
Component[] getComponents(java.awt.Container)
  = native java.awt.Component[] java.awt.Container.getComponents();
Insets getInsets(java.awt.Container)
  = native Insets java.awt.Container.getInsets();
LayoutManager getLayout(java.awt.Container)
  = native LayoutManager java.awt.Container.getLayout();
Insets insets(java.awt.Container)
  = native Insets java.awt.Container.insets();
Dimension minimumSize(java.awt.Container)
  = native Dimension java.awt.Container.minimumSize();
Dimension preferredSize(java.awt.Container)
  = native Dimension java.awt.Container.preferredSize();
boolean isAncestorOf(java.awt.Container, Component)
  = native boolean java.awt.Container.isAncestorOf(Component);
void processContainerEvent(java.awt.Container, ContainerEvent)
  = native void java.awt.Container.processContainerEvent(ContainerEvent);
void setLayout(java.awt.Container, LayoutManager)
  = native void java.awt.Container.setLayout(LayoutManager);

//JDK1.4  ContainerListener[] getContainerListeners(java.awt.Container)
//JDK1.4    = native ContainerListener[] java.awt.Container.getContainerListeners();
//JDK1.4  Set getFocusTraversalKeys(java.awt.Container, int)
//JDK1.4    = native Set java.awt.Container.getFocusTraversalKeys(int);
//JDK1.4  void applyComponentOrientation(java.awt.Container, ComponentOrientation)
//JDK1.4    = native void java.awt.Container.applyComponentOrientation(ComponentOrientation);
//JDK1.4  void setFocusTraversalPolicy(java.awt.Container, FocusTraversalPolicy)
//JDK1.4    = native void java.awt.Container.setFocusTraversalPolicy(FocusTraversalPolicy);


// class Cursor
// static methods
Cursor getDefaultCursor()
  = native Cursor Cursor.getDefaultCursor();
Cursor getPredefinedCursor(int)
  = native Cursor Cursor.getPredefinedCursor(int);
Cursor getSystemCustomCursor(String)
  = native Cursor Cursor.getSystemCustomCursor(String);


// class Dialog
AccessibleContext getAccessibleContext(Dialog)
  = native AccessibleContext Dialog.getAccessibleContext();


// class Dimension
Dimension getSize(Dimension)
  = native Dimension Dimension.getSize();


// class EventQueue
AWTEvent getNextEvent(EventQueue)
  = native AWTEvent EventQueue.getNextEvent();
AWTEvent peekEvent(EventQueue)
  = native AWTEvent EventQueue.peekEvent();


// class FileDialog
FilenameFilter getFilenameFilter(FileDialog)
  = native FilenameFilter FileDialog.getFilenameFilter();
void setFilenameFilter(FileDialog, FilenameFilter)
  = native void FileDialog.setFilenameFilter(FilenameFilter);


// class Font
// static methods
Font createFont(int, InputStream)
  = native Font Font.createFont(int, InputStream);
Font decode(String)
  = native Font Font.decode(String);
<Any Key, Any Element> Font getFont(Map<Key,Element>)
  = native Font Font.getFont(Map);
Font getFont(String, Font)
  = native Font Font.getFont(String, Font);
Font getFont(String)
  = native Font Font.getFont(String);
// nonstatic methods
GlyphVector createGlyphVector(Font, FontRenderContext, char[])
  = native GlyphVector Font.createGlyphVector(FontRenderContext, char[]);
GlyphVector createGlyphVector(Font, FontRenderContext, CharacterIterator)
  = native GlyphVector Font.createGlyphVector(FontRenderContext, CharacterIterator);
GlyphVector createGlyphVector(Font, FontRenderContext, int[])
  = native GlyphVector Font.createGlyphVector(FontRenderContext, int[]);
GlyphVector createGlyphVector(Font, FontRenderContext, String)
  = native GlyphVector Font.createGlyphVector(FontRenderContext, String);
Font deriveFont(Font, AffineTransform)
  = native Font Font.deriveFont(AffineTransform);
Font deriveFont(Font, float)
  = native Font Font.deriveFont(float);
Font deriveFont(Font, int)
  = native Font Font.deriveFont(int);
Font deriveFont(Font, int, AffineTransform)
  = native Font Font.deriveFont(int, AffineTransform);
Font deriveFont(Font, int, float)
  = native Font Font.deriveFont(int, float);
<Any Key, Any Element> Font deriveFont(Font, Map<Key,Element>)
  = native Font Font.deriveFont(Map);
<Any Key, Any Element> Map<Key,Element> getAttributes(Font)
  = native Map Font.getAttributes();
String getFamily(Font)
  = native String Font.getFamily();
String getFamily(Font, Locale)
  = native String Font.getFamily(Locale);
String getFontName(Font)
  = native String Font.getFontName();
String getFontName(Font, Locale)
  = native String Font.getFontName(Locale);
LineMetrics getLineMetrics(Font, char[], int, int, FontRenderContext)
  = native LineMetrics Font.getLineMetrics(char[], int, int, FontRenderContext);
LineMetrics getLineMetrics(Font, CharacterIterator, int, int, FontRenderContext)
  = native LineMetrics Font.getLineMetrics(CharacterIterator, int, int, FontRenderContext);
LineMetrics getLineMetrics(Font, String, FontRenderContext)
  = native LineMetrics Font.getLineMetrics(String, FontRenderContext);
LineMetrics getLineMetrics(Font, String, int, int, FontRenderContext)
  = native LineMetrics Font.getLineMetrics(String, int, int, FontRenderContext);
Rectangle2D getMaxCharBounds(Font, FontRenderContext)
  = native Rectangle2D Font.getMaxCharBounds(FontRenderContext);
String getName(Font)
  = native String Font.getName();
String getPSName(Font)
  = native String Font.getPSName();
Rectangle2D getStringBounds(Font, char[], int, int, FontRenderContext)
  = native Rectangle2D Font.getStringBounds(char[], int, int, FontRenderContext);
Rectangle2D getStringBounds(Font, CharacterIterator, int, int, FontRenderContext)
  = native Rectangle2D Font.getStringBounds(CharacterIterator, int, int, FontRenderContext);
Rectangle2D getStringBounds(Font, String, FontRenderContext)
  = native Rectangle2D Font.getStringBounds(String, FontRenderContext);
Rectangle2D getStringBounds(Font, String, int, int, FontRenderContext)
  = native Rectangle2D Font.getStringBounds(String, int, int, FontRenderContext);
AffineTransform getTransform(Font)
  = native AffineTransform Font.getTransform();
//JDK1.4  GlyphVector layoutGlyphVector(Font, FontRenderContext, char[], int, int, int)
//JDK1.4    = native GlyphVector Font.layoutGlyphVector(FontRenderContext, char[], int, int, int);
//JDK1.4  AttributedCharacterIterator.Attribute[] getAvailableAttributes(Font)
//JDK1.4    = native AttributedCharacterIterator.Attribute[] Font.getAvailableAttributes();


// class FontMetrics
LineMetrics getLineMetrics(FontMetrics,char[], int, int, Graphics)
  = native LineMetrics FontMetrics.getLineMetrics(char[], int, int, Graphics);
LineMetrics getLineMetrics(FontMetrics, CharacterIterator, int, int, Graphics)
  = native LineMetrics FontMetrics.getLineMetrics(CharacterIterator, int, int, Graphics);
LineMetrics getLineMetrics(FontMetrics, String, Graphics)
  = native LineMetrics FontMetrics.getLineMetrics(String, Graphics);
LineMetrics getLineMetrics(FontMetrics, String, int, int, Graphics)
  = native LineMetrics FontMetrics.getLineMetrics(String, int, int, Graphics);
Rectangle2D getMaxCharBounds(FontMetrics, Graphics)
  = native Rectangle2D FontMetrics.getMaxCharBounds(Graphics);
Rectangle2D getStringBounds(FontMetrics, char[], int, int, Graphics)
  = native Rectangle2D FontMetrics.getStringBounds(char[], int, int, Graphics);
Rectangle2D getStringBounds(FontMetrics, CharacterIterator, int, int, Graphics)
  = native Rectangle2D FontMetrics.getStringBounds(CharacterIterator, int, int, Graphics);
Rectangle2D getStringBounds(FontMetrics, String, Graphics)
  = native Rectangle2D FontMetrics.getStringBounds(String, Graphics);
Rectangle2D getStringBounds(FontMetrics, String, int, int, Graphics)
  = native Rectangle2D FontMetrics.getStringBounds(String, int, int, Graphics);
String toString(FontMetrics)
  = native String FontMetrics.toString();


// class Frame
// static methods
Frame[] getFrames()
  = native Frame[] Frame.getFrames();
// nonstatic methods
AccessibleContext getAccessibleContext(Frame)
  = native AccessibleContext Frame.getAccessibleContext();
String getTitle(Frame)
  = native String Frame.getTitle();
void setIconImage(Frame, Image)
  = native void Frame.setIconImage(Image);
void setMenuBar(Frame, MenuBar)
  = native void Frame.setMenuBar(MenuBar);
void setTitle(Frame, String)
  = native void Frame.setTitle(String);
//JDK1.4  void setMaximizedBounds(Frame, Rectangle)
//JDK1.4    = native void Frame.setMaximizedBounds(Rectangle);


// class Graphics
Graphics create(Graphics)
  = native Graphics Graphics.create();
Graphics create(Graphics, int, int, int, int)
  = native Graphics Graphics.create(int, int, int, int);
Color getColor(Graphics)
  = native Color Graphics.getColor();
Font getFont(Graphics)
  = native Font Graphics.getFont();
FontMetrics getFontMetrics(Graphics)
  = native FontMetrics Graphics.getFontMetrics();
FontMetrics getFontMetrics(Graphics, Font)
  = native FontMetrics Graphics.getFontMetrics(Font);


// class Graphics2D
Color getBackground(Graphics2D) =
  native Color Graphics2D.getBackground();
Composite getComposite(Graphics2D) =
  native Composite Graphics2D.getComposite();
GraphicsConfiguration getDeviceConfiguration(Graphics2D) =
  native GraphicsConfiguration Graphics2D.getDeviceConfiguration();
FontRenderContext getFontRenderContext(Graphics2D) =
  native FontRenderContext Graphics2D.getFontRenderContext();
Paint getPaint(Graphics2D) =
  native Paint Graphics2D.getPaint();
<Any Key, Any Element> RenderingHints<Key,Element> getRenderingHints(Graphics2D) =
  native RenderingHints Graphics2D.getRenderingHints();
Stroke getStroke(Graphics2D) =
  native Stroke Graphics2D.getStroke();
AffineTransform getTransform(Graphics2D) =
  native AffineTransform Graphics2D.getTransform();
//JDK1.4  Object getRenderingHint(Graphics2D, java.awt.Key) =
//JDK1.4    native Object Graphics2D.getRenderingHint(java.awt.Key);


// java.awt.GridBagLayout
GridBagConstraints getConstraints(GridBagLayout, Component)
  = native GridBagConstraints GridBagLayout.getConstraints(Component);
Point getLayoutOrigin(GridBagLayout)
  = native Point GridBagLayout.getLayoutOrigin();
Point location(GridBagLayout, int, int)
  = native Point GridBagLayout.location(int, int);
String toString(GridBagLayout)
  = native String GridBagLayout.toString();

// java.awt.GridLayout
String toString(GridLayout)
  = native String GridLayout.toString();

// java.awt.Image
Graphics getGraphics(Image)
  = native Graphics Image.getGraphics();
Image getScaledInstance(Image, int, int, int)
  = native Image Image.getScaledInstance(int, int, int);
ImageProducer getSource(Image)
  = native ImageProducer Image.getSource();


// java.awt.MenuItem
EventListener[?] getListeners(MenuItem, Class)
  = native EventListener[] MenuItem.getListeners(Class);


// class Menu
MenuItem add(Menu, MenuItem)
  = native MenuItem Menu.add(MenuItem);
void add(Menu, String)
  = native void Menu.add(String);
MenuItem getItem(Menu, int)
  = native MenuItem Menu.getItem(int);
void insert(Menu, MenuItem, int)
  = native void Menu.insert(MenuItem, int);
void insert(Menu, String, int)
  = native void Menu.insert(String, int);
void remove(Menu, MenuComponent)
  = native void Menu.remove(MenuComponent);


// java.awt.Label
String getText(Label)
  = native String Label.getText();
String paramString(Label)
  = native String Label.paramString();
void setText(Label, String)
  = native void Label.setText(String);


// java.awt.List
void add(java.awt.List, String)
  = native void java.awt.List.add(String);
void add(java.awt.List, String, int)
  = native void java.awt.List.add(String, int);
String getItem(java.awt.List, int)
  = native String java.awt.List.getItem(int);
void processActionEvent(java.awt.List, ActionEvent)
  = native void java.awt.List.processActionEvent(ActionEvent);
void processItemEvent(java.awt.List, ItemEvent)
  = native void java.awt.List.processItemEvent(ItemEvent);
void remove(java.awt.List, String)
  = native void java.awt.List.remove(String);
void replaceItem(java.awt.List, String, int)
  = native void java.awt.List.replaceItem(String, int);


// java.awt.Scrollbar
void processAdjustmentEvent(Scrollbar, AdjustmentEvent)
  = native void Scrollbar.processAdjustmentEvent(AdjustmentEvent);
String paramString(Scrollbar)
  = native String Scrollbar.paramString();


// class TextComponent
void processTextEvent(TextComponent, TextEvent)
  = native void TextComponent.processTextEvent(TextEvent);
void setText(TextComponent, String)
  = native void TextComponent.setText(String);


// class ScrollPane
void addImpl(ScrollPane, Component, Object, int)
  = native void ScrollPane.addImpl(Component, Object, int);
void setScrollPosition(ScrollPane, Point)
  = native void ScrollPane.setScrollPosition(Point);


// class MenuComponent
String getName(MenuComponent)
  = native String MenuComponent.getName();
Object getTreeLock(MenuComponent)
  = native Object MenuComponent.getTreeLock();
String paramString(MenuComponent)
  = native String MenuComponent.paramString();
void processEvent(MenuComponent, AWTEvent)
  = native void MenuComponent.processEvent(AWTEvent);
void setFont(MenuComponent, Font)
  = native void MenuComponent.setFont(Font);
void setName(MenuComponent, String)
  = native void MenuComponent.setName(String);


// class MenuBar
Menu add(MenuBar, Menu)
  = native Menu MenuBar.add(Menu);
void deleteShortcut(MenuBar, MenuShortcut)
  = native void MenuBar.deleteShortcut(MenuShortcut);
void remove(MenuBar, MenuComponent)
  = native void MenuBar.remove(MenuComponent);
void setHelpMenu(MenuBar, Menu)
  = native void MenuBar.setHelpMenu(Menu);
<Any Element> Enumeration<Element> shortcuts(MenuBar)
  = native Enumeration MenuBar.shortcuts();


// class MenuItem
void processActionEvent(MenuItem, ActionEvent)
  = native void MenuItem.processActionEvent(ActionEvent);
void setActionCommand(MenuItem, String)
  = native void MenuItem.setActionCommand(String);
void setLabel(MenuItem, String)
  = native void MenuItem.setLabel(String);
void setShortcut(MenuItem, MenuShortcut)
  = native void MenuItem.setShortcut(MenuShortcut);


// class Window
GraphicsConfiguration getGraphicsConfiguration(Window)
  = native GraphicsConfiguration Window.getGraphicsConfiguration();
Window[] getOwnedWindows(Window)
  = native Window[] Window.getOwnedWindows();
Window getOwner(Window)
  = native Window Window.getOwner();
void processWindowEvent(Window, WindowEvent)
  = native void Window.processWindowEvent(WindowEvent);
//JDK1.4  void processWindowFocusEvent(Window, WindowEvent)
//JDK1.4    = native void Window.processWindowFocusEvent(WindowEvent);
//JDK1.4  void processWindowStateEvent(Window, WindowEvent)
//JDK1.4    = native void Window.processWindowStateEvent(WindowEvent);
//JDK1.4  Component getMostRecentFocusOwner(Window)
//JDK1.4    = native Component Window.getMostRecentFocusOwner();
//JDK1.4  void createBufferStrategy(Window, int, BufferCapabilities)
//JDK1.4    = native void Window.createBufferStrategy(int, BufferCapabilities);
//JDK1.4  BufferStrategy getBufferStrategy(Window)
//JDK1.4    = native BufferStrategy Window.getBufferStrategy();


// class MediaTracker
void addImage(MediaTracker, Image, int)
  = native void MediaTracker.addImage(Image, int);
void addImage(MediaTracker, Image, int, int, int)
  = native void MediaTracker.addImage(Image, int, int, int);
void removeImage(MediaTracker, Image)
  = native void MediaTracker.removeImage(Image);
void removeImage(MediaTracker, Image, int)
  = native void MediaTracker.removeImage(Image, int);
void removeImage(MediaTracker, Image, int, int, int)
  = native void MediaTracker.removeImage(Image, int, int, int);


// class MenuShortcut
String paramString(MenuShortcut)
  = native String MenuShortcut.paramString();


// class PopupMenu
void show(PopupMenu, Component, int, int)
  = native void PopupMenu.show(Component, int, int);


// class Rectangle
void add(Rectangle, Point)
  = native void Rectangle.add(Point);
void add(Rectangle, Rectangle)
  = native void Rectangle.add(Rectangle);
boolean contains(Rectangle, Point)
  = native boolean Rectangle.contains(Point);
boolean contains(Rectangle, Rectangle)
  = native boolean Rectangle.contains(Rectangle);
Rectangle2D createIntersection(Rectangle, Rectangle2D)
  = native Rectangle2D Rectangle.createIntersection(Rectangle2D);
Rectangle2D createUnion(Rectangle, Rectangle2D)
  = native Rectangle2D Rectangle.createUnion(Rectangle2D);
Point getLocation(Rectangle)
  = native Point Rectangle.getLocation();
Dimension getSize(Rectangle)
  = native Dimension Rectangle.getSize();
Rectangle intersection(Rectangle, Rectangle)
  = native Rectangle Rectangle.intersection(Rectangle);
void setBounds(Rectangle, Rectangle)
  = native void Rectangle.setBounds(Rectangle);
void setLocation(Rectangle, Point)
  = native void Rectangle.setLocation(Point);
void setSize(Rectangle, Dimension)
  = native void Rectangle.setSize(Dimension);
Rectangle union(Rectangle, Rectangle)
  = native Rectangle Rectangle.union(Rectangle);


// class TextArea
void append(TextArea, String)
  = native void TextArea.append(String);
void insert(TextArea, String, int)
  = native void TextArea.insert(String, int);
void replaceRange(TextArea, String, int, int)
  = native void TextArea.replaceRange(String, int, int);


// class TextField
void processActionEvent(TextField, ActionEvent)
  = native void TextField.processActionEvent(ActionEvent);
