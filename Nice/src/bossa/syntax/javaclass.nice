/**************************************************************************/
/*                                N I C E                                 */
/*             A high-level object-oriented research language             */
/*                        (c) Daniel Bonniot 2004                         */
/*                                                                        */
/*  This program is free software; you can redistribute it and/or modify  */
/*  it under the terms of the GNU General Public License as published by  */
/*  the Free Software Foundation; either version 2 of the License, or     */
/*  (at your option) any later version.                                   */
/*                                                                        */
/**************************************************************************/

package bossa.syntax;

import bossa.util.*;

/**
   A class definition which reflects an existing native java class.
   
   This is usefull when you want to add type parameters
   to an existing java class.
   
*/
public class JavaClass extends ClassImplementation
{
  TypeDefinition definition;
  LocatedString javaName;
  boolean ignoredRetyping = false;

  {
    this.lookup();
  }  

  /**
     This must be called in a first pass, before bytecode types are implicitely
     loaded, so that the retyping is taken into account.
  */
  private void lookup()
  {
    let classType = nice.tools.code.TypeImport.lookup(javaName);
    
    if (classType == null)
      {
	if (!definition.inInterfaceFile())
          User.warning(javaName, javaName + " was not found in classpath so this retyping is ignored");

	ignoredRetyping = true;
	return;
      }

    if (! (classType instanceof gnu.bytecode.ClassType))
       throw User.error(definition, javaName + " is a primitive type");

    // Check that we don't give a wrong arity to a generic class.
    int nativeArity = classType.getArity();
    
    if (nativeArity != -1 && nativeArity != definition.getTC().arity())
      User.error(definition, javaName + " has " + nativeArity + " type parameters");
    
    let old = JavaClasses.setTypeConstructorForJavaClass
		(definition.compilation(), definition.getTC(), classType);

    if (old != null)
      User.error(definition, javaName + " was already associated with the Nice class " + old);
    
    definition.setJavaType(classType);
  }

  resolveClass()
  {
    if (ignoredRetyping)
      return;

    JavaClasses.fetchMethods(definition.getTC(), cast(definition.getJavaType()));
  }

  printInterface(s)
  {
    s.print(" = native " + javaName.toString() + ";\n");
  }
}
