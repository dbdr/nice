
/**************************************************************************/
/*                                                                        */
/*  This program is free software; you can redistribute it and/or modify  */
/*  it under the terms of the GNU General Public License as published by  */
/*  the Free Software Foundation; either version 2 of the License, or     */
/*  (at your option) any later version.                                   */
/*                                                                        */
/**************************************************************************/


package nice.ui.common;

/** 
 * Wrapper classes for all listeners defined in java.awt
 * and java.awt.dnd. They implement a java.awt.event.* interface
 * and delegate the action(s) to optional anonymous function(s).
 *
 * The classes define fields that store optional anonymous
 * functions that point to the method that should be invoked
 * when the according event occured
 *
 * They override all their inherited methods by calling the appropriate
 * field to invoke the defined listener method.
 *
 * The field can be initialized by using the automatically 
 * generated constructor
 *
 * TODO
 * make it work with visibility modifiers. this means providing
 * get/set methods for the fields...
 */


class NActionListener implements ActionListener , NiceListener
{
  private ActionEvent ?-> void actionPerformed;

  public ActionEvent ?-> void getActionPerformed() = this.actionPerformed;  
  public void setActionPerformed(ActionEvent ?-> void value) { this.actionPerformed = value; }


  actionPerformed(e)
  {
    ActionEvent ?-> void actionPerformed = this.actionPerformed;
    if(actionPerformed != null) actionPerformed(e);
  }
}


class NAdjustmentListener implements AdjustmentListener , NiceListener
{
  private AdjustmentEvent ?-> void adjustmentValueChanged;

  public AdjustmentEvent ?-> void getAdjustmentValueChanged() = this.adjustmentValueChanged;  
  public void setAdjustmentValueChanged(AdjustmentEvent ?-> void value) { this.adjustmentValueChanged = value; }


  adjustmentValueChanged(e)
  {
    AdjustmentEvent ?-> void adjustmentValueChanged = this.adjustmentValueChanged;
    if(adjustmentValueChanged != null) adjustmentValueChanged(e);
  }
}


class NAWTEventListener implements AWTEventListener , MappableAWTEventListener
{
  private AWTEvent ?-> void eventDispatched;

  public AWTEvent ?-> void getEventDispatched() = this.eventDispatched;  
  public void setEventDispatched(AWTEvent ?-> void value) { this.eventDispatched = value; }


  eventDispatched(e)
  {
    AWTEvent ?-> void eventDispatched = this.eventDispatched;
    if(eventDispatched != null) eventDispatched(e);
  }
}  


class NComponentListener implements ComponentListener , NiceListener
{
  private ComponentEvent ?-> void componentHidden = null;
  private ComponentEvent ?-> void componentMoved  = null;
  private ComponentEvent ?-> void componentResized = null;
  private ComponentEvent ?-> void componentShown  = null;
  
  public ComponentEvent ?-> void getComponentHidden() = this.componentHidden;
  public ComponentEvent ?-> void getComponentMoved() = this.componentMoved;
  public ComponentEvent ?-> void getComponentResized() = this.componentResized;
  public ComponentEvent ?-> void getComponentShown() = this.componentShown;
  
  public void setComponentHidden(ComponentEvent ?-> void value) { this.componentHidden = value; }
  public void setComponentMoved(ComponentEvent ?-> void value) { this.componentMoved = value; }
  public void setComponentResized(ComponentEvent ?-> void value) { this.componentResized = value; }
  public void setComponentShown(ComponentEvent ?-> void value) { this.componentShown = value; }


  componentHidden(e)
  {
    ComponentEvent ?-> void componentHidden = this.componentHidden;
    if(componentHidden != null) componentHidden(e);
  }
  
  componentMoved(e)
  {
    ComponentEvent ?-> void componentMoved = this.componentMoved;
    if(componentMoved != null) componentMoved(e);
  }

  componentResized(e)
  {
    ComponentEvent ?-> void componentResized = this.componentResized;
    if(componentResized != null) componentResized(e);
  }
  
  componentShown(e)
  {
    ComponentEvent ?-> void componentShown = this.componentShown;
    if(componentShown != null) componentShown(e);
  }
}


class NContainerListener implements ContainerListener , NiceListener
{
  private ContainerEvent ?-> void componentAdded = null;
  private ContainerEvent ?-> void componentRemoved = null;
  
  public ContainerEvent ?-> void getComponentAdded() = this.componentAdded;
  public ContainerEvent ?-> void getComponentRemoved() = this.componentRemoved;
  
  public void setComponentAdded(ContainerEvent ?-> void value) { this.componentAdded = value; }
  public void setComponentRemoved(ContainerEvent ?-> void value) { this.componentRemoved = value; }


  componentAdded(e)
  {
    ContainerEvent ?-> void componentAdded = this.componentAdded;
    if(componentAdded != null) componentAdded(e);
  }
  
  componentRemoved(e)
  {
    ContainerEvent ?-> void componentRemoved = this.componentRemoved;
    if(componentRemoved != null) componentRemoved(e);
  }
}


class NFocusListener implements FocusListener , NiceListener
{
  private FocusEvent ?-> void focusGained = null;
  private FocusEvent ?-> void focusLost = null;
  
  public FocusEvent ?-> void getFocusGained() = this.focusGained;
  public FocusEvent ?-> void getFocusLost() = this.focusLost;
  
  public void setFocusGained(FocusEvent ?-> void value) { this.focusGained = value; }
  public void setFocusLost(FocusEvent ?-> void value) { this.focusLost = value; }


  focusGained(e)
  {
    FocusEvent ?-> void focusGained = this.focusGained;
    if(focusGained != null) focusGained(e);
  }

  focusLost(e)
  {
    FocusEvent ?-> void focusLost = this.focusLost;
    if(focusLost != null) focusLost(e);
  }
}


class NHierarchyBoundsListener implements HierarchyBoundsListener , NiceListener
{
  private HierarchyEvent ?-> void hierarchyAncestorMoved = null;
  private HierarchyEvent ?-> void hierarchyAncestorResized = null;
  
  public HierarchyEvent ?-> void getHierarchyAncestorMoved() = this.hierarchyAncestorMoved;
  public HierarchyEvent ?-> void getHierarchyAncestorResized() = this.hierarchyAncestorResized;
  
  public void setHierarchyAncestorMoved(HierarchyEvent ?-> void value) { this.hierarchyAncestorMoved = value; }
  public void setHierarchyAncestorResized(HierarchyEvent ?-> void value) { this.hierarchyAncestorResized = value; }


  ancestorMoved(e)
  {
    HierarchyEvent ?-> void hierarchyAncestorMoved = this.hierarchyAncestorMoved;
    if(hierarchyAncestorMoved != null) hierarchyAncestorMoved(e);
  }

  ancestorResized(e)
  {
    HierarchyEvent ?-> void hierarchyAncestorResized = this.hierarchyAncestorResized;
    if(hierarchyAncestorResized != null) hierarchyAncestorResized(e);
  }
}


class NHierarchyListener implements HierarchyListener , NiceListener
{
  private HierarchyEvent ?-> void hierarchyChanged;
  
  public HierarchyEvent ?-> void getHierarchyChanged() = this.hierarchyChanged;
  public void setHierarchyChanged(HierarchyEvent ?-> void value) { this.hierarchyChanged = value; }


  hierarchyChanged(e)
  {
    HierarchyEvent ?-> void hierarchyChanged = this.hierarchyChanged;
    if(hierarchyChanged != null) hierarchyChanged(e);
  }
}


class NInputMethodListener implements InputMethodListener , NiceListener
{
  private InputMethodEvent ?-> void caretPositionChanged = null;
  private InputMethodEvent ?-> void inputMethodTextChanged = null;
  
  public InputMethodEvent ?-> void getCaretPositionChanged() = this.caretPositionChanged;
  public InputMethodEvent ?-> void getInputMethodTextChanged() = this.inputMethodTextChanged;
  
  public void setCaretPositionChanged(InputMethodEvent ?-> void value) { this.caretPositionChanged = value; }
  public void setInputMethodTextChanged(InputMethodEvent ?-> void value) { this.inputMethodTextChanged = value; }


  caretPositionChanged(e)
  {
    InputMethodEvent ?-> void caretPositionChanged = this.caretPositionChanged;
    if(caretPositionChanged != null) caretPositionChanged(e);
  }

  inputMethodTextChanged(e)
  {
    InputMethodEvent ?-> void inputMethodTextChanged = this.inputMethodTextChanged;
    if(inputMethodTextChanged != null) inputMethodTextChanged(e);
  }
}


class NItemListener implements ItemListener , NiceListener
{
  private ItemEvent ?-> void itemStateChanged;
  
  public ItemEvent ?-> void getItemStateChanged() = this.itemStateChanged;
  public void setItemStateChanged(ItemEvent ?-> void value) { this.itemStateChanged = value; }


  itemStateChanged(e)
  {
    ItemEvent ?-> void itemStateChanged = this.itemStateChanged;
    if(itemStateChanged != null) itemStateChanged(e);
  }
}


class NKeyListener implements KeyListener , NiceListener
{
  private KeyEvent ?-> void keyPressed = null;
  private KeyEvent ?-> void keyReleased = null;
  private KeyEvent ?-> void keyTyped = null;
  
  public KeyEvent ?-> void getKeyPressed() = this.keyPressed;
  public KeyEvent ?-> void getKeyReleased() = this.keyReleased;
  public KeyEvent ?-> void getKeyTyped() = this.keyTyped;
  
  public void setKeyPressed(KeyEvent ?-> void value) { this.keyPressed = value; }
  public void setKeyReleased(KeyEvent ?-> void value) { this.keyReleased = value; }
  public void setKeyTyped(KeyEvent ?-> void value) { this.keyTyped = value; }


  keyPressed(e)
  {
    KeyEvent ?-> void keyPressed = this.keyPressed;
    if(keyPressed != null) keyPressed(e);
  }
  
  keyReleased(e)
  {
    KeyEvent ?-> void keyReleased = this.keyReleased;
    if(keyReleased != null) keyReleased(e);
  }
  
  keyTyped(e)
  {
    KeyEvent ?-> void keyTyped = this.keyTyped;
    if(keyTyped != null) keyTyped(e);
  }
}


class NMouseListener implements MouseListener , NiceListener
{
  private MouseEvent ?-> void mouseClicked = null;
  private MouseEvent ?-> void mouseEntered = null;
  private MouseEvent ?-> void mouseExited = null;
  private MouseEvent ?-> void mousePressed = null;
  private MouseEvent ?-> void mouseReleased = null;
  
  public MouseEvent ?-> void getMouseClicked() = this.mouseClicked;
  public MouseEvent ?-> void getMouseEntered() = this.mouseEntered;
  public MouseEvent ?-> void getMouseExited() = this.mouseExited;
  public MouseEvent ?-> void getMousePressed() = this.mousePressed;
  public MouseEvent ?-> void getMouseReleased() = this.mouseReleased;
  
  public void setMouseClicked(MouseEvent ?-> void value) { this.mouseClicked = value; }
  public void setMouseEntered(MouseEvent ?-> void value) { this.mouseEntered = value; }
  public void setMouseExited(MouseEvent ?-> void value) { this.mouseExited = value; }
  public void setMousePressed(MouseEvent ?-> void value) { this.mousePressed = value; }
  public void setMouseReleased(MouseEvent ?-> void value) { this.mouseReleased = value; }


  mouseClicked(e)
  {
    MouseEvent ?-> void mouseClicked = this.mouseClicked;
    if(mouseClicked != null) mouseClicked(e);
  }
  
  mouseEntered(e)
  {
    MouseEvent ?-> void mouseEntered = this.mouseEntered;
    if(mouseEntered != null) mouseEntered(e);
  }

  mouseExited(e)
  {
    MouseEvent ?-> void mouseExited = this.mouseExited;
    if(mouseExited != null) mouseExited(e);
  }

  mousePressed(e)
  {
    MouseEvent ?-> void mousePressed = this.mousePressed;
    if(mousePressed != null) mousePressed(e);
  }

  mouseReleased(e)
  {
    MouseEvent ?-> void mouseReleased = this.mouseReleased;
    if(mouseReleased != null) mouseReleased(e);
  }
}


class NMouseMotionListener implements MouseMotionListener , NiceListener
{
  private MouseEvent ?-> void mouseDragged = null;
  private MouseEvent ?-> void mouseMoved = null;
  
  public MouseEvent ?-> void getMouseDragged() = this.mouseDragged;
  public MouseEvent ?-> void getMouseMoved() = this.mouseMoved;
  
  public void setMouseDragged(MouseEvent ?-> void value) { this.mouseDragged = value; }
  public void setMouseMoved(MouseEvent ?-> void value) { this.mouseMoved = value; }


  mouseDragged(e)
  {
    MouseEvent ?-> void mouseDragged = this.mouseDragged;
    if(mouseDragged != null) mouseDragged(e);
  }
  
  mouseMoved(e)
  {
    MouseEvent ?-> void mouseMoved = this.mouseMoved;
    if(mouseMoved != null) mouseMoved(e);
  }
}


class NTextListener implements TextListener , NiceListener
{
  private TextEvent ?-> void textValueChanged;
  
  public TextEvent ?-> void getTextValueChanged() = this.textValueChanged;
  public void setTextValueChanged(TextEvent ?-> void value) { this.textValueChanged = value; }


  textValueChanged(e)
  {
    TextEvent ?-> void textValueChanged = this.textValueChanged;
    if(textValueChanged != null) textValueChanged(e);
  }
}


class NWindowListener implements WindowListener , NiceListener
{
  private WindowEvent ?-> void windowActivated = null;
  private WindowEvent ?-> void windowClosed = null;
  private WindowEvent ?-> void windowClosing = null;
  private WindowEvent ?-> void windowDeactivated = null;
  private WindowEvent ?-> void windowDeiconified = null;
  private WindowEvent ?-> void windowIconified = null;
  private WindowEvent ?-> void windowOpened = null;
  
  public WindowEvent ?-> void getWindowActivated() = this.windowActivated;
  public WindowEvent ?-> void getWindowClosed() = this.windowClosed;
  public WindowEvent ?-> void getWindowClosing() = this.windowClosing;
  public WindowEvent ?-> void getWindowDeactivated() = this.windowDeactivated;
  public WindowEvent ?-> void getWindowDeiconified() = this.windowDeiconified;
  public WindowEvent ?-> void getWindowIconified() = this.windowIconified;
  public WindowEvent ?-> void getWindowOpened() = this.windowOpened;
  
  public void setWindowActivated(WindowEvent ?-> void value) { this.windowActivated = value; }
  public void setWindowClosed(WindowEvent ?-> void value) { this.windowClosed = value; }
  public void setWindowClosing(WindowEvent ?-> void value) { this.windowClosing = value; }
  public void setWindowDeactivated(WindowEvent ?-> void value) { this.windowDeactivated = value; }
  public void setWindowDeiconified(WindowEvent ?-> void value) { this.windowDeiconified = value; }
  public void setWindowIconified(WindowEvent ?-> void value) { this.windowIconified = value; }
  public void setWindowOpened(WindowEvent ?-> void value) { this.windowOpened = value; }


  windowActivated(e) 
  {
    WindowEvent ?-> void windowActivated = this.windowActivated;
    if(windowActivated != null) windowActivated(e);
  }

  windowClosed(e)
  {
    WindowEvent ?-> void windowClosed = this.windowClosed;
    if(windowClosed != null) windowClosed(e);
  }

  windowClosing(e)
  {
    WindowEvent ?-> void windowClosing = this.windowClosing;	
    if(windowClosing != null) windowClosing(e);
  }

  windowDeactivated(e)
  {
    WindowEvent ?-> void windowDeactivated = this.windowDeactivated;
    if(windowDeactivated != null) windowDeactivated(e);
  }

  windowDeiconified(e)
  {
    WindowEvent ?-> void windowDeiconified = this.windowDeiconified;
    if(windowDeiconified != null) windowDeiconified(e);
  }

  windowIconified(e)
  {
    WindowEvent ?-> void windowIconified = this.windowIconified;
    if(windowIconified != null) windowIconified(e);
  }

  windowOpened(e)
  {
    WindowEvent ?-> void windowOpened = this.windowOpened;
    if(windowOpened != null) windowOpened(e);
  }
}


class NDragGestureListener implements DragGestureListener , NiceListener
{
  private DragGestureEvent ?-> void dragGestureRecognized;
  
  public DragGestureEvent ?-> void getDragGestureRecognized() = this.dragGestureRecognized;
  public void setDragGestureRecognized(DragGestureEvent ?-> void value) { this.dragGestureRecognized = value; }


  dragGestureRecognized(e)
  {
    DragGestureEvent ?-> void dragGestureRecognized = this.dragGestureRecognized;
    if(dragGestureRecognized != null) dragGestureRecognized(e);
  }
}


class NDragSourceListener implements DragSourceListener , NiceListener
{
  private DragSourceDropEvent ?-> void dsDragDropEnd = null;
  private DragSourceDragEvent ?-> void dsDragEnter = null;
  private DragSourceDragEvent ?-> void dsDragOver = null;
  private DragSourceDragEvent ?-> void dsDropActionChanged = null;
  private DragSourceEvent ?-> void dsDragExit = null;
  
  public DragSourceDropEvent ?-> void getDsDragDropEnd() = this.dsDragDropEnd;
  public DragSourceDragEvent ?-> void getDsDragEnter() = this.dsDragEnter;
  public DragSourceDragEvent ?-> void getDsDragOver() = this.dsDragOver;
  public DragSourceDragEvent ?-> void getDsDropActionChanged() = this.dsDropActionChanged;
  public DragSourceEvent ?-> void getDsDragExit() = this.dsDragExit;
  
  public void setDsDragDropEnd(DragSourceDropEvent ?-> void value) { this.dsDragDropEnd = value; }
  public void setDsDragEnter(DragSourceDragEvent ?-> void value) { this.dsDragEnter = value; }
  public void setDsDragOver(DragSourceDragEvent ?-> void value) { this.dsDragOver = value; }
  public void setDsDropActionChanged(DragSourceDragEvent ?-> void value) { this.dsDropActionChanged = value; }
  public void setDsDragExit(DragSourceEvent ?-> void value) { this.dsDragExit = value; }


  dragDropEnd(e)
  {
    DragSourceDropEvent ?-> void dsDragDropEnd = this.dsDragDropEnd;
    if(dsDragDropEnd != null) dsDragDropEnd(e);
  }

  dragEnter(e)
  {
    DragSourceDragEvent ?-> void dsDragEnter = this.dsDragEnter;
    if(dsDragEnter != null) dsDragEnter(e);
  }

  dragOver(e)
  {
    DragSourceDragEvent ?-> void dsDragOver = this.dsDragOver;
    if(dsDragOver != null) dsDragOver(e);
  }

  dropActionChanged(e)
  {
    DragSourceDragEvent ?-> void dsDropActionChanged = this.dsDropActionChanged;
    if(dsDropActionChanged != null) dsDropActionChanged(e);
  }

  dragExit(e)
  {
    DragSourceEvent ?-> void dsDragExit = this.dsDragExit;
    if(dsDragExit != null) dsDragExit(e);
  }
}


class NDropTargetListener implements DropTargetListener , NiceListener
{
  private DropTargetDropEvent ?-> void dtDrop = null;
  private DropTargetDragEvent ?-> void dtDragEnter = null;
  private DropTargetDragEvent ?-> void dtDragOver = null;
  private DropTargetDragEvent ?-> void dtDropActionChanged = null;
  private DropTargetEvent ?-> void dtDragExit = null;
  
  public DropTargetDropEvent ?-> void getDtDrop() = this.dtDrop;
  public DropTargetDragEvent ?-> void getDtDragEnter() = this.dtDragEnter;
  public DropTargetDragEvent ?-> void getDtDragOver() = this.dtDragOver;
  public DropTargetDragEvent ?-> void getDtDropActionChanged() = this.dtDropActionChanged;
  public DropTargetEvent ?-> void getDtDragExit() = this.dtDragExit;
  
  public void getDtDrop(DropTargetDropEvent ?-> void value) { this.dtDrop = value; }
  public void getDtDragEnter(DropTargetDragEvent ?-> void value) { this.dtDragEnter = value; }
  public void getDtDragOver(DropTargetDragEvent ?-> void value) { this.dtDragOver = value; }
  public void getDtDropActionChanged(DropTargetDragEvent ?-> void value) { this.dtDropActionChanged = value; }
  public void getDtDragExit(DropTargetEvent ?-> void value) { this.dtDragExit = value; }


  drop(e)
  {
    DropTargetDropEvent ?-> void dtDrop = this.dtDrop;
    if(dtDrop != null) dtDrop(e);
  }

  dragEnter(e)
  {
    DropTargetDragEvent ?-> void dtDragEnter = this.dtDragEnter;
    if(dtDragEnter != null) dtDragEnter(e);
  }

  dragOver(e)
  {
    DropTargetDragEvent ?-> void dtDragOver = this.dtDragOver;
    if(dtDragOver != null) dtDragOver(e);
  }

  dropActionChanged(e)
  {
    DropTargetDragEvent ?-> void dtDropActionChanged = this.dtDropActionChanged;
    if(dtDropActionChanged != null) dtDropActionChanged(e);
  }

  dragExit(e)
  {
    DropTargetEvent ?-> void dtDragExit = this.dtDragExit;
    if(dtDragExit != null) dtDragExit(e);
  }
}


//JDK1.4  class NDragSourceMotionListener implements DragSourceMotionListener , NiceListener
//JDK1.4  {
//JDK1.4    private DragSourceDragEvent ?-> void dragMouseMoved;
//JDK1.4  
//JDK1.4    public DragSourceDragEvent ?-> void getDragMouseMoved() = this.dragMouseMoved;
//JDK1.4    public void setDragMouseMoved(DragSourceDragEvent ?-> void value) { this.dragMouseMoved = value; }
//JDK1.4    
//JDK1.4  
//JDK1.4    dragMouseMoved(e)
//JDK1.4    {
//JDK1.4      DragSourceDragEvent ?-> void dragMouseMoved = this.dragMouseMoved;
//JDK1.4      if(dragMouseMoved != null) dragMouseMoved(e);
//JDK1.4    }
//JDK1.4  }


//JDK1.4  class NMouseWheelListener implements MouseWheelListener , NiceListener
//JDK1.4  {
//JDK1.4    private MouseWheelEvent ?-> void mouseWheelMoved;
//JDK1.4
//JDK1.4    public MouseWheelEvent ?-> void getMouseWheelMoved() = this.mouseWheelMoved;
//JDK1.4    public void setMouseWheelMoved(MouseWheelEvent ?-> void value) { this.mouseWheelMoved = value; }
//JDK1.4      
//JDK1.4    
//JDK1.4    mouseWheelMoved(e){
//JDK1.4    { 
//JDK1.4      MouseWheelEvent ?-> void mouseWheelMoved = this.mouseWheelMoved;
//JDK1.4      if(mouseWheelMoved != null) mouseWheelMoved(e);
//JDK1.4    }
//JDK1.4  }


//JDK1.4  class NWindowFocusListener implements WindowFocusListener , NiceListener
//JDK1.4  {
//JDK1.4    private WindowEvent ?-> void windowGainedFocus = null;
//JDK1.4    private WindowEvent ?-> void windowLostFocus = null;
//JDK1.4    
//JDK1.4    public WindowEvent ?-> void getWindowGainedFocus() = this.windowGainedFocus;
//JDK1.4    public WindowEvent ?-> void getWindowLostFocus() = this.windowLostFocus;
//JDK1.4  
//JDK1.4    public void setWindowGainedFocus(WindowEvent ?-> void value) { this.windowGainedFocus = value; }
//JDK1.4    public void setWindowLostFocus(WindowEvent ?-> void value) { this.windowLostFocus = value; }
//JDK1.4  
//JDK1.4   
//JDK1.4    windowGainedFocus(e)
//JDK1.4    { 
//JDK1.4      WindowEvent ?-> void windowGainedFocus = this.windowGainedFocus;
//JDK1.4      if(windowGainedFocus != null) windowGainedFocus(e);
//JDK1.4    }
//JDK1.4   
//JDK1.4    windowLostFocus(e)
//JDK1.4    {  
//JDK1.4      WindowEvent ?-> void windowLostFocus = this.windowLostFocus;
//JDK1.4      if(windowLostFocus != null) windowLostFocus(e);
//JDK1.4    }
//JDK1.4  }


//JDK1.4  class NWindowStateListener implements WindowStateListener , NiceListener
//JDK1.4  {
//JDK1.4    private WindowEvent ?-> void windowStateChanged;
//JDK1.4  
//JDK1.4    public WindowEvent ?-> void getWindowStateChanged() = this.windowStateChanged;
//JDK1.4    public void setWindowStateChanged(WindowEvent ?-> void value) { this.windowStateChanged = value; }
//JDK1.4   
//JDK1.4      
//JDK1.4    windowStateChanged(e)
//JDK1.4    {
//JDK1.4      WindowEvent ?-> void windowStateChanged = this.windowStateChanged;
//JDK1.4      if(windowStateChanged != null) windowStateChanged(e);
//JDK1.4    }
//JDK1.4  }
