package regtest.basic;

class A
{
  int x;
}

<Any I> I id(I);
id(x) = x;

void bidon();
bidon()
{
}

long returnLong();
returnLong()
{
  long j = 1;
  return j=j;
}

(int, int) min_max(int, int);
min_max(x,y) = x < y ? (x, y) : (y, x);

void test_discards();
test_discards()
{
  // Presently fails
  //id (x); // x is A's field method, of type A->int

  A a = new A(x:2);
  int i = 0;
  boolean b = false;

  // test how surabondant value is discarded
  
  if (b)
    i = 14;
  else
    bidon();

  if (b)
    i++;
  else
    bidon();

  if (b)
    --i;
  else
    bidon();

  if (b)
    a.x = 17;
  else
    bidon();

  if (b)
    a.x--;
  else
    bidon();
  
  if (b)
    ++a.x;
  else
    bidon();

  String s1;
  String->void test = fun(String s2) => { s1 = s2; };
}

void test_captures();
test_captures()
{
  // modification of a variable captured in a lambda
  int j=2;
  println("" + j);
  println(""+(fun()=>--j)());
  println(""+(fun()=>j++)());
  println(""+(fun()=>j=2*j)());
}

void main(String[] args)
{
  test_discards();
  test_captures();
  test_tuples();
  test_numeric();
  test_arrays();
  test_comparable();
  test_optional();
  test_classes();
  test_methods();
  test_functions();
  test_global();
  test_native();
  test_exceptions();
  test_higher_order();
  test_localFunctions();
  test_null();
  test_constructors();
}
