
/**************************************************************************/
/*                                                                        */
/*  This program is free software; you can redistribute it and/or modify  */
/*  it under the terms of the GNU General Public License as published by  */
/*  the Free Software Foundation; either version 2 of the License, or     */
/*  (at your option) any later version.                                   */
/*                                                                        */
/**************************************************************************/


package nice.ui.common;




/**
 * DECLARATION of methods to remove nice.ui.beans.NiceListeners from nice.ui.beans.NiceListenerHandlers
 */

public <PropertyChangeListenerHandler H> void removeNicePropertyChangeListener(H,NicePropertyChangeListener);
public <VetoableChangeListenerHandler H> void removeNiceVetoableChangeListener(H,NiceVetoableChangeListener);
public <MappablePropertyChangeListenerHandler H, PropertyChangeKey K> void removeNicePropertyChangeListener(H,K,NicePropertyChangeListener);
public <MappableVetoableChangeListenerHandler H, PropertyChangeKey K> void removeNiceVetoableChangeListener(H,K,NiceVetoableChangeListener);
//JDK1.4  public <ExceptionListenerHandler H> void removeExceptionListener(H,NiceExceptionListener);



/**
 * DEFINITION of methods to remove NiceListener from NiceListenerHandlers
 */

removeNicePropertyChangeListener(this@PropertyEditorSupport,listener)
{
	this.removePropertyChangeListener(listener);
	//this.removeInAccessibleListener(listener,propertyChangeListeners);
}

removeNicePropertyChangeListener(this@PropertyChangeSupport,listener)
{
	this.removePropertyChangeListener(listener);
	//this.removeInAccessibleListener(listener,propertyChangeListeners);
}

removeNiceVetoableChangeListener(this@VetoableChangeSupport,listener)
{
	this.removeVetoableChangeListener(listener);
	//this.removeInAccessibleListener(listener,vetoableChangeListeners);
}

removeNicePropertyChangeListener(this@PropertyChangeSupport,key@String,listener)
{
	this.removePropertyChangeListener(key,listener);
	//this.removeMappableListener(key,listener,mappablePropertyChangeListeners);
}

removeNicePropertyChangeListener(this@BeanContextChildSupport,key@String,listener)
{
	this.removePropertyChangeListener(key,listener);
	//this.removeMappableListener(key,listener,mappablePropertyChangeListeners);
}

removeNiceVetoableChangeListener(this@VetoableChangeSupport,key@String,listener)
{
	this.removeVetoableChangeListener(key,listener);
	//this.removeMappableListener(key,listener,mappableVetoableChangeListeners);
}

removeNiceVetoableChangeListener(this@BeanContextChildSupport,key@String,listener)
{
	this.removeVetoableChangeListener(key,listener);
	//this.removeMappableListener(key,listener,mappableVetoableChangeListeners);
}

//JDK1.4  removeNiceExceptionListener(this@XMLDecoder,listener) = this.setExceptionListener(listener);
//JDK1.4  removeNiceExceptionListener(this@Encoder,listener) = this.setExceptionListener(listener);


  
/**
 * DEFINITION of functions to remove all nice.ui.awt.NiceListener 
 * from all nice.ui.beans.NiceListenerHandler
 */ 
 
public <PropertyChangeListenerHandler H> void removePropertyChangeListener
  (H this,
   PropertyChangeEvent -> void propertyChange
   )
{
  NicePropertyChangeListener[?] listeners = this.getNicePropertyChangeListeners(); 
  if(listeners == null) return;
  listeners.foreach
    (NicePropertyChangeListener l =>
     {
       if(l.getPropertyChange() == propertyChange) l.setPropertyChange(null);
     }
     ); 
}
 
public <VetoableChangeListenerHandler H> void removeVetoableChangeListener
  (H this,
   PropertyChangeEvent -> void vetoableChange
   )
{
  NiceVetoableChangeListener[?] listeners = this.getNiceVetoableChangeListeners();
  if(listeners == null) return;
  listeners.foreach
    (NiceVetoableChangeListener l =>
     {
       if(l.getVetoableChange() == vetoableChange) l.setVetoableChange(null);
     }
     );
} 

  
//JDK1.4   public <BeanContextMembershipListenerHandler H> void removeBeanContextMembershipListener
//JDK1.4     (H this,
//JDK1.4      BeanContextMembershipEvent ?-> void childrenAdded = null,
//JDK1.4      BeanContextMembershipEvent ?-> void childrenRemoved = null
//JDK1.4      )
//JDK1.4   {
//JDK1.4     NiceBeanContextMembershipListener[?] listeners = this.geNiceBeanContextMembershipListeners():
//JDK1.4     if(listeners == null) return;
//JDK1.4     listeners.foreach
//JDK1.4       (NiceBeanContextMembershipListener l =>
//JDK1.4        {
//JDK1.4          if(childrenAdded != null && l.getChildrenAdded() == childrenAdded) l.setChildrenAdded(null);
//JDK1.4          if(childrenRemoved != null && l.getChildrenRemoved() == childrenRemoved) l.setChildrenRemoved(null);
//JDK1.4        }
//JDK1.4        );
//JDK1.4   }
  
  
//JDK1.4   public <BeanContextServicesListenerHandler H> void removeBeanContextServicesListener
//JDK1.4     (H this,
//JDK1.4      BeanContextServiceAvailableEvent -> void serviceAvailable
//JDK1.4      )
//JDK1.4   {
//JDK1.4     NiceBeanContextServicesListener[?] listeners = this.getNiceBeanContextServicesListeners();
//JDK1.4     if(listeners == null) return;
//JDK1.4     listeners.foreach
//JDK1.4       (NiceBeanContextServicesListener l =>
//JDK1.4        {
//JDK1.4          if(l.getServiceAvailable() == serviceAvailable) l.setServiceAvailable(null);
//JDK1.4        }
//JDK1.4        );
//JDK1.4   }

  
//JDK1.4   public <BeanContextServiceRevokedListenerHandler H> void removeBeanContextServiceRevokedListener
//JDK1.4     (H this,
//JDK1.4      BeanContextServiceRevokedEvent -> void serviceRevoked
//JDK1.4      )
//JDK1.4   {
//JDK1.4     NiceBeanContextServiceRevokedListener[?] listeners = this.getNiceBeanContextServiceRevokedListeners();
//JDK1.4     if(listeners == null) return;
//JDK1.4     listeners.foreach
//JDK1.4       (NiceBeanContextServiceRevokedListener l =>
//JDK1.4        {
//JDK1.4          if(l.getServiceRevoked() == serviceRevoked) l.setServiceRevoked(null);
//JDK1.4        }
//JDK1.4        );
//JDK1.4   }

  
//JDK1.4   public <ExceptionListenerHandler H> void removeExceptionListener
//JDK1.4     (H this,
//JDK1.4      Exception -> void exceptionThrown
//JDK1.4      )
//JDK1.4   {
//JDK1.4     NiceExceptionListener[?] listeners = this.getNiceExceptionListeners();
//JDK1.4     if(listeners == null) return;
//JDK1.4     listeners.foreach
//JDK1.4       (NiceExceptionListener l =>
//JDK1.4        {
//JDK1.4          if(l.getExceptionThrown() == exceptionThrown) l.setExceptionThrown(null);
//JDK1.4        }
//JDK1.4        );
//JDK1.4   }
