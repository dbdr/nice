/**************************************************************************/
/*                                N I C E                                 */
/*             A high-level object-oriented research language             */
/*                        (c) Daniel Bonniot 2000                         */
/*                                                                        */
/*  This program is free software; you can redistribute it and/or modify  */
/*  it under the terms of the GNU General Public License as published by  */
/*  the Free Software Foundation; either version 2 of the License, or     */
/*  (at your option) any later version.                                   */
/*                                                                        */
/**************************************************************************/

/**
   Numerical hierarchy.

   Usual operations on native types are inlined, 
   so they have the same efficiency as in Java code.

   @version $Date$
   @author Daniel Bonniot
*/

package nice.lang;

int MAX_INT() = native java.lang.Integer.MAX_VALUE;

// Narrowing primitive conversions
float float(double d) = inline nice.lang.inline.Nop();

int int(double d) = inline nice.lang.inline.Nop();
short short(double d) = inline nice.lang.inline.Nop();
byte byte(double d) = inline nice.lang.inline.Nop();
char char(double d) = inline nice.lang.inline.Nop();


// Comparison
boolean `<`(double, double) = inline nice.lang.inline.CompOp("dLt");
boolean `<`(float, float) = inline nice.lang.inline.CompOp("fLt");
boolean `<`(long, long) = inline nice.lang.inline.CompOp("lLt");
boolean `<`(int, int) = inline nice.lang.inline.CompOp("iLt");

boolean `<=`(double, double) = inline nice.lang.inline.CompOp("dLe");
boolean `<=`(float, float) = inline nice.lang.inline.CompOp("fLe");
boolean `<=`(long, long) = inline nice.lang.inline.CompOp("lLe");
boolean `<=`(int, int) = inline nice.lang.inline.CompOp("iLe");

boolean `>`(double, double) = inline nice.lang.inline.CompOp("dGt");
boolean `>`(float, float) = inline nice.lang.inline.CompOp("fGt");
boolean `>`(long, long) = inline nice.lang.inline.CompOp("lGt");
boolean `>`(int, int) = inline nice.lang.inline.CompOp("iGt");

boolean `>=`(double, double) = inline nice.lang.inline.CompOp("dGe");
boolean `>=`(float, float) = inline nice.lang.inline.CompOp("fGe");
boolean `>=`(float, float) = inline nice.lang.inline.CompOp("lGe");
boolean `>=`(int, int) = inline nice.lang.inline.CompOp("iGe");

// Equality
boolean `==`(double, double) = inline nice.lang.inline.CompOp("dEq");
boolean `==`(float, float) = inline nice.lang.inline.CompOp("fEq");
boolean `==`(long, long) = inline nice.lang.inline.CompOp("lEq");
boolean `==`(int, int) = inline nice.lang.inline.CompOp("iEq");

// Inequality
boolean `!=`(double, double) = inline nice.lang.inline.CompOp("dNe");
boolean `!=`(float, float) = inline nice.lang.inline.CompOp("fNe");
boolean `!=`(long, long) = inline nice.lang.inline.CompOp("lNe");
boolean `!=`(int, int) = inline nice.lang.inline.CompOp("iNe");

// Unary +
// Only effect = promotion if type < int
// This conforms to Java. Should we say instead that +(byte) is byte?
double `+`(double) = inline nice.lang.inline.Nop();
float `+`(float) = inline nice.lang.inline.Nop();
long `+`(long) = inline nice.lang.inline.Nop();
int `+`(int) = inline nice.lang.inline.Nop();


// unary negation
double `-`(double) = inline nice.lang.inline.NumOp("dNeg");
float `-`(float) = inline nice.lang.inline.NumOp("fNeg");
long `-`(long) = inline nice.lang.inline.NumOp("lNeg");
int `-`(int) = inline nice.lang.inline.NumOp("iNeg");

// multiplication
double `*`(double, double) = inline nice.lang.inline.NumOp("dMul");
float `*`(float, float) = inline nice.lang.inline.NumOp("fMul");
long `*`(long, long) = inline nice.lang.inline.NumOp("lMul");
int `*`(int, int) = inline nice.lang.inline.NumOp("iMul");

// division
double `/`(double, double) = inline nice.lang.inline.NumOp("dDiv");
float `/`(float, float) = inline nice.lang.inline.NumOp("fDiv");
long `/`(long, long) = inline nice.lang.inline.NumOp("lDiv");
int `/`(int, int) = inline nice.lang.inline.NumOp("iDiv");

// remainder
double `%`(double, double) = inline nice.lang.inline.NumOp("dRem");
float `%`(float, float) = inline nice.lang.inline.NumOp("fRem");
long `%`(long, long) = inline nice.lang.inline.NumOp("lRem");
int `%`(int, int) = inline nice.lang.inline.NumOp("iRem");

// addition
double `+`(double, double) = inline nice.lang.inline.NumOp("dAdd");
float `+`(float, float) = inline nice.lang.inline.NumOp("fAdd");
long `+`(long, long) = inline nice.lang.inline.NumOp("lAdd");
int `+`(int, int) = inline nice.lang.inline.NumOp("iAdd");

// substraction
double `-`(double, double) = inline nice.lang.inline.NumOp("dSub");
float `-`(float, float) = inline nice.lang.inline.NumOp("fSub");
long `-`(long, long) = inline nice.lang.inline.NumOp("lSub");
int `-`(int, int) = inline nice.lang.inline.NumOp("iSub");

// shift
int  `<<`(int , int) = inline nice.lang.inline.NumOp("iShl");
long `<<`(long, int) = inline nice.lang.inline.NumOp("lShl");

int  `>>`(int , int) = inline nice.lang.inline.NumOp("iShr");
long `>>`(long, int) = inline nice.lang.inline.NumOp("lShr");

int  `>>>`(int , int) = inline nice.lang.inline.NumOp("iuShr");
long `>>>`(long, int) = inline nice.lang.inline.NumOp("luShr");

// bitwise operators
int  `~`(int  x) = inline nice.lang.inline.NumOp("iComp");
long `~`(long x) = inline nice.lang.inline.NumOp("lComp");

int `&`(int, int) = inline nice.lang.inline.NumOp("iAnd");
int `|`(int, int) = inline nice.lang.inline.NumOp("iIOr");
int `^`(int, int) = inline nice.lang.inline.NumOp("iXOr");

long `&`(long, long) = inline nice.lang.inline.NumOp("lAnd");
long `|`(long, long) = inline nice.lang.inline.NumOp("lIOr");
long `^`(long, long) = inline nice.lang.inline.NumOp("lXOr");

// Shorter-than-int bitwise operations: 
// we give more precise types than in Java.
byte `&`(byte, byte) = inline nice.lang.inline.NumOp("iAnd");
byte `|`(byte, byte) = inline nice.lang.inline.NumOp("iIOr");
byte `^`(byte, byte) = inline nice.lang.inline.NumOp("iXOr");

short `&`(short, short) = inline nice.lang.inline.NumOp("iAnd");
short `|`(short, short) = inline nice.lang.inline.NumOp("iIOr");
short `^`(short, short) = inline nice.lang.inline.NumOp("iXOr");

char `&`(char, char) = inline nice.lang.inline.NumOp("iAnd");
char `|`(char, char) = inline nice.lang.inline.NumOp("iIOr");
char `^`(char, char) = inline nice.lang.inline.NumOp("iXOr");

/****************************************************************
 * Utilities (specific to Nice)
 ****************************************************************/

// Note: we should have testcases for this section.

// Upcasts
long long(int) = inline nice.lang.inline.Nop();


// Accessing individual bits of a word
boolean get(long x, int bit) = (x & (long(1) << bit)) != 0;
boolean get(int  x, int bit) = (x & (1 << bit)) != 0;

/** Returns a random positive number smaller than limit. */
int random(int limit) = int(floor(random() * limit));

/****************************************************************
 * Native methods
 ****************************************************************/

long round(double) = native long Math.round(double);
int  round(float)  = native int  Math.round(float);

double floor(double) = native double Math.floor(double);
double random() = native double Math.random();

double sin(double)  = native double Math.sin(double);
double cos(double)  = native double Math.cos(double);
double tan(double)  = native double Math.tan(double);
double asin(double) = native double Math.asin(double);
double acos(double) = native double Math.acos(double);
double atan(double) = native double Math.atan(double);

double max(double, double) = native double Math.max(double, double);
double min(double, double) = native double Math.min(double, double);
float  max(float , float ) = native float  Math.max(float , float );
float  min(float , float ) = native float  Math.min(float , float );
long   max(long  , long  ) = native long   Math.max(long  , long  );
long   min(long  , long  ) = native long   Math.min(long  , long  );
int    max(int   , int   ) = native int    Math.max(int   , int   );
int    min(int   , int   ) = native int    Math.min(int   , int   );


// Comparable interface
`<`(n1@Number, n2@Number) = n1.doubleValue() < n2.doubleValue();
