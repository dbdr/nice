/// PASS
  B b = new B(x: "");
  String s = b.x;
  /// Toplevel
class A<T> { T x; }
class B extends A<String> {}

/// PASS
  B b = new B();
  String s = b.get();
  /// Toplevel
abstract class A<T> { T get(); }
class B extends A<String> { get() = ""; }

/// PASS
  B b = new B();
  String s = b.get();
  /// Toplevel
interface A<T> { T get(); }
class B implements A<String> { get() = ""; }

/// FAIL
  B /*/// FAIL HERE */ b = new B(x: 0);
  /// Toplevel
class A<T> { T x; }
class B extends A<String> {}

/// PASS
  B<int> b = new B(x: 0, y: "");
  C<int> c = new C(x: "", y: 0);
  /// Toplevel
class A<T,U> { T x; U y; }
class B<V> extends A<V, String> {}
class C<W> extends A<String, W> {}

/// PASS
  B<int,boolean> b = new B(x: 0,    y: "", z: false);
  C<int,boolean> c = new C(x: true, y: "", z: 0);
  /// Toplevel
class A<T,U,V> { T x; U y; V z; }
class B<T,V> extends A<T, String, V> {}
class C<T,V> extends A<V, String, T> {}

/// PASS
  Foo foo = new Foo();
  foo["a"] = "1";
  assert foo["a"].equals("1");
  /// Toplevel
  class Foo extends HashMap<String, String> {}

/// PASS
  /// Toplevel
  class A<T> {}
  class B extends A<String> {
    int x;
  }

/// PASS
  /// Toplevel
  class A<T> {}
  class B extends A<String> {
    void foo() {}
  }

/// PASS
  // bug #1084559
  foo(new Aha());
  /// Toplevel
interface Buffer<Elem> {}

class Aha implements Buffer<int> {
  void foo() {}
}

/// PASS
  // bug #1090888
  /// Toplevel
class Env extends HashMap<String, String> {}

void _test_makeEnv() {
  Env env = new Env(new HashMap());
}

/// PASS
  // bug #1097571
  /// Toplevel
  class A<T> {}
  class B extends A<boolean> {}
  class C extends B {}

/// PASS
  // bug #1097571
  /// Toplevel
  interface A<T> {}
  interface B extends A<boolean> {}
  class C implements B {}

/// PASS
  // bug #1097571
  /// Toplevel
interface Term<T> {
  T value();
}
interface Bool implements Term<boolean> {}
class BoolImpl implements Bool {
  value() = true;
}

/// PASS
  // bug #1097571
  /// Toplevel
interface Term<T> {
  T value();
}
interface Bool implements Term<boolean> {}
class BoolImpl implements Bool {
}
value(BoolImpl this) = true;

/// PASS
  /// Toplevel
class A<T,U> {}
class B<T> extends A<T,String> {}
class C extends B<boolean> {}

/// PASS
  /// Toplevel
class A<T> {}
class B extends A<String> {}
class C extends B {
  void foo() {}
}

/// PASS
  /// Toplevel
class A<T> {}
class B extends A<String> {}
class C extends B {}
void foo(C this) {}

/// PASS
  C c = new C();
  /// Toplevel
class A<T> {}
class B extends A<String> {}
class C extends B {}

/// PASS bug
  C c = new C(0);
  /// Toplevel
class A<T> {}
class B extends A<String> {}
class C extends B {}
new C(int x) = this();

/// PASS
  /// package a
  /// Toplevel
class A<T> {}
class B extends A<String> {}

  /// package b import a
  B b = new B();

/// PASS
  /// package a
  /// Toplevel
class A<T,U> { T x; }
class B<T> extends A<T,String> {}

  /// package b import a
  B<int> b = new B(x: 0);

/// PASS
  /// package a
  /// Toplevel
class A<T> {}
class B extends A<String> {}
class C extends B {}

  /// package b import a
  C c = new C();

/// PASS
  /// package a
  /// Toplevel
class A<T> {}
class B extends A<String> {}
class C extends B {}
new C(int x) = this();

  /// package b import a
  C c = new C(0);

/// PASS bug
  /// Toplevel
class A<T> {}
void foo(A<int> a) {}

class B extends A<int>
{
  {
    foo(this);
  }
}
