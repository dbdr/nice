package nice.beans;

import java.beans.*;
import java.beans.beancontext.*;


// --------------------------------------------------------------------------------------------------
// --------------------- ActionDecorators for java.beans.beancontext.BeanContextChildSupport --------
// --------------------------------------------------------------------------------------------------

void addBeanContextChildSupportListeners(java.beans.beancontext.BeanContextChildSupport support,
                                         ?String propertyName = null,
                                         PropertyChangeEvent ?-> void propertyChange = null,   
                                         PropertyChangeEvent ?-> void vetoableChange = null    
                                         )
{
   // only if one of the according optional parameters really has a value, we will create and add the listener object                                                                 
   if(propertyName != null && propertyChange != null) 
   {
      support.addPropertyChangeListener(propertyName,
                                        new NicePropertyChangeListener(propertyChange: propertyChange
                                        )); 
   } 
                                                                     
   if(propertyName != null && vetoableChange != null) 
   {
      support.addVetoableChangeListener(propertyName,
                                        new NiceVetoableChangeListener(vetoableChange: vetoableChange
                                        )); 
   }                                                
}


// --------------------------------------------------------------------------------------------------
// --------------------- ActionDecorators for java.beans.beancontext.BeanContextServicesSupport -----
// --------------------------------------------------------------------------------------------------

void addBeanContextServicesSupportListeners(java.beans.beancontext.BeanContextServicesSupport support,
                                            BeanContextServiceAvailableEvent ?-> void serviceAvailable = null      
                                            )
{
   // only if one of the according optional parameters really has a value, we will create and add the listener object
   if(serviceAvailable != null) support.addBeanContextServicesListener(new NiceBeanContextServicesListener(serviceAvailable: serviceAvailable));                                              
}



// --------------------------------------------------------------------------------------------------
// --------------------- ActionDecorators for java.beans.beancontext.BeanContextSupport -----
// --------------------------------------------------------------------------------------------------

void addBeanContextSupportListeners(java.beans.beancontext.BeanContextSupport support,
                                    BeanContextMembershipEvent ?-> void childrenAdded = null,
                                    BeanContextMembershipEvent ?-> void childrenRemoved = null    
                                    )
{

   // only if one of the according optional parameters really has a value, we will create and add the listener object
   if(childrenAdded != null ||
      childrenRemoved != null
      )
   { 
      support.addBeanContextMembershipListener(new NiceBeanContextMembershipListener(childrenAdded: childrenAdded,
                                                                                     childrenRemoved: childrenRemoved
                                                                                     ));                                              
   }
}


// --------------------------------------------------------------------------------------------------
// --------------------- ActionDecorators for java.beans.PropertyChangeSupport ----------------------
// --------------------------------------------------------------------------------------------------

void addPropertyChangeSupportListeners(java.beans.PropertyChangeSupport support,
                                       ?String propertyName = null,
                                       PropertyChangeEvent ?-> void propertyChange = null  
                                       )
{
   // only if one of the according optional parameters really has a value, we will create and add the listener object                                                                 
   if(propertyName != null && propertyChange != null) 
   {
      support.addPropertyChangeListener(propertyName,
                                        new NicePropertyChangeListener(propertyChange: propertyChange
                                        )); 
   } 
                                                                     
   if(propertyName == null && propertyChange != null) 
   {
      support.addPropertyChangeListener(new NicePropertyChangeListener(propertyChange: propertyChange)); 
   }                                                
}


// --------------------------------------------------------------------------------------------------
// --------------------- ActionDecorators for java.beans.VetoableChangeSupport ----------------------
// --------------------------------------------------------------------------------------------------

void addVetoableChangeSupportListeners(java.beans.VetoableChangeSupport support,
                                       ?String propertyName = null,
                                       PropertyChangeEvent ?-> void vetoableChange = null  
                                       )
{
   // only if one of the according optional parameters really has a value, we will create and add the listener object                                                                 
   if(propertyName != null && vetoableChange != null) 
   {
      support.addVetoableChangeListener(propertyName,
                                        new NiceVetoableChangeListener(vetoableChange: vetoableChange
                                        )); 
   } 
                                                                     
   if(propertyName == null && vetoableChange != null) 
   {
      support.addVetoableChangeListener(new NiceVetoableChangeListener(vetoableChange: vetoableChange)); 
   }                                                
}


// --------------------------------------------------------------------------------------------------
// --------------------- ActionDecorators for java.beans.PropertyEditorSupport ----------------------
// --------------------------------------------------------------------------------------------------

void addPropertyEditorSupportListeners(java.beans.PropertyEditorSupport support,
                                       PropertyChangeEvent ?-> void propertyChange = null  
                                       )
{
   // only if one of the according optional parameters really has a value, we will create and add the listener object                                                                 
   if(propertyChange != null) support.addPropertyChangeListener(new NicePropertyChangeListener(propertyChange: propertyChange));                                                 
}

