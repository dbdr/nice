/// PASS
  let dummy = new A(i: cst);
  /// Toplevel
  let int cst = 42;

  class A
  {
    int i;

    {
      int j = i;
      assert j == cst;
    }
  }

/// FAIL
  /// Toplevel
  class A
  {
    int i;
    { int j = i + true; }
  }

/// PASS
  boolean ok = false;
  try {
    let dummy = new A();
  }
  catch(Error e) { ok = true; }
  assert ok;

  /// Toplevel
  class A
  {
    { throw new Error(); }
  }


/// PASS
  boolean ok = false;
  try {
    let dummy = new B();
  }
  catch(Error e) { ok = true; }
  catch(Exception e) { ok = false; }
  assert ok;

  /// Toplevel
  class A
  {
    { throw new Error(); }
  }
  class B extends A
  {
    { throw new Exception(); }
  }

/// PASS
  // Initializers should be executed after all the instance variables are set
  let dummy = new B();

  /// Toplevel
  class A
  {
    void foo();
    foo() {}

    { this.foo(); }
  }
  class B extends A
  {
    int i = 1;

    foo() { assert i == 1; }
  }

/// PASS
  /// Toplevel
  class A<T>
  {
    T x;

    { T y = x; }
  }

/// PASS
  /// Toplevel
class test {
  {this.doTest();}
  void doTest() {}
}

class test2 {
  {this.doTest2();}
  void doTest2() {}
}

/// PASS
  /// package a
  /// Toplevel
class A
{
  boolean initialised = false;
  { initialised = true; }
}
  /// package b import a
  assert new A().initialised;

/// PASS
  /// package a
  /// Toplevel
class A
{
  boolean initialised = false;
  {
    let b1 = true, b2 = true;
    if (b1 && b2)
      initialised = true;
  }
}
  /// package b import a
  assert new A().initialised;

/// PASS
  /// package a
  /// Toplevel
class A
{
  boolean[] x = [false, false];

  { //test correct printing of various constructs

    for(int i = 0, boolean q = false; i<x.length; i++, q=true)
     x[i] = true;

    while(true) {break;}

    int k = 0;
    do k++;
    while (k<5);

    {}

    try {
      k = 1;
    } catch(Exception e) {
      let x = e;
    } finally {
      k = 5;
    }
    int c = int('\'');
  }
}
  /// package b import a
  assert new A().x[0];

/// PASS
  /// package a
  /// Toplevel
  class A
  {
    boolean x = false;
    {
      void foo() {
        // Implicit capture of 'this' inside an initializer
        x = true;
      }
      foo();
    }
  }
  /// package b import a
  assert new A().x;

/// PASS
  /// package a
  /// Toplevel
  class TestA {
    {
      this.foo((String s) => {});
    }

    void foo(String->void f) {
      (f)("xyz");
    }
  }
  /// package b import a
  let x = new TestA();

/// PASS
  // Capture of 'this' inside an initializer
  let dummy = new TestA(a: "ABC").b.equals("ABC");
  /// Toplevel
class TestA
{
  String a;
  String b = "";
  {
    let f = (String l) => this;
    b = f("").a;
  }
}

/// PASS
  let b = new B();
  // Usage of closure inside an instance initializer
  /// Toplevel
class A {
  void foo() {}
}

class B extends A {
  {
    [0].foreach(fst);
    this.foo();
  }
}

void fst(int i) {}

/// PASS
  // Test subclassing in a different package
  /// package a
  /// Toplevel
class A {
  boolean a = false;
  { a = true; }
}

  /// package b import a
  let b = new B();
  assert b.a && b.b;
  /// Toplevel
class B extends A {
  boolean b = false;

  { b = true; }
}

/// PASS
  let a = new A("foo");
  // Check that the initializer has been executed only once
  assert a.i == 4;
  /// Toplevel
class A
{
  int i = 0;

  {
    i++;
  }
}

new A(String s) { this(i: s.length); }
