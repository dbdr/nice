/// PASS
  A<int> ai = new A();
  A<String> as = new A();

  foo(ai);
  foo(as);
  /// Toplevel
class A<T> {}
void foo(A<?>) {}

/// PASS
  /// Toplevel
class A<T> { T x1; T x2; }
void swap(A<?> a)
{
  (a.x1, a.x2) = (a.x2, a.x1);
}

/// PASS
  /// Toplevel
class A<T> { T x1; T x2; }
void swap(A<?> a)
{
  let tmp = a.x1;
  a.x1 = a.x2;
  a.x2 = tmp;
}

/// FAIL
  A<int> a = new A(x: 0);
  A<?> aa = a;
  /*/// FAIL HERE */ aa.x = "";
  int i = a.x;

  /// Toplevel
class A<T> { T x; }


/// PASS
  /// Toplevel
class A<T0> { T0 x; }
Object foo(A<?> a) = a.x;

/// FAIL
  A<int,String> a = new A(x1: 0, x2: "");
  splash(a);
  int i = a.x1;

  /// Toplevel
class A<T1,T2> { T1 x1; T2 x2; }
void splash(A<?,?> a) {
  /*/// FAIL HERE */ a.x1 = a.x2;
}

/// FAIL
  A<int,String> a = new A(x1: 0, x2: "");
  splash(a);
  String s = a.x2;

  /// Toplevel
class A<T1,T2> { T1 x1; T2 x2; }
void splash(A<?,?> a) {
  /*/// FAIL HERE */ a.x2 = a.x1;
}

/// FAIL
  A<int,String> a = new A(x1: 0, x2: "");
  splash(a);

  /// Toplevel
class A<T1,T2> { T1 x1; T2 x2; }
void splash(A<?,?> a) {
  int /*/// FAIL HERE */ x = a.x2;
}

/// PASS
  /// Toplevel
class A<T> { T x; }
void foo(A<?> a) = bar(a.x);
<T> void bar(T x) {}

/// FAIL
  A<int> a1 = new A(x: 0);
  A<String> a2 = new A(x: "");
  foo(a1, a2);
  int x = a1.x;
  /// Toplevel
class A<T> { T x; }

void foo(A<int> a1, A<?> a2) = /*/// FAIL HERE */ splash(a1, a2);

<T> void splash(A<T> a1, A<T> a2)
{
  a1.x = a2.x;
}


/// FAIL
  A<B<String>> a = new A(x: new B(y: ""));
  /*/// FAIL HERE */ foo(a);
  String s = a.x.y;

  /// Toplevel
class A<T> { T x; }
class B<T> { T y; }

void foo(A<B<?>> a) { a.x = new B(y: 0); }

/// PASS
  foo(new A(x: new B(y: "")));

  /// Toplevel
class A<TA> { TA x; }
class B<TB> { TB y; }

void foo(A<B<?>> a) {}

/// FAIL
  A<String>[] as = [new A(x: "")];
  /*/// FAIL HERE */ getM(as);
  String s = as[0].x;
  /// Toplevel
class A<T> { T x; }

void getM(A<?>[] a) { a[0] = new A(x: 0); }


/// FAIL
  // bug #1216727
  /// Toplevel
class Cons<TT> {
  TT head;
  Cons<TT> tail;
  boolean isEmpty() = false;
}

void _testEmpty(Cons<?> c)
{
  let cc = /*/// FAIL HERE */ new Cons(head: 1, tail: c);
}
