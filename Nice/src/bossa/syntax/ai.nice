/**************************************************************************/
/*                                N I C E                                 */
/*             A high-level object-oriented research language             */
/*                        (c) Daniel Bonniot 2004                         */
/*                                                                        */
/*  This program is free software; you can redistribute it and/or modify  */
/*  it under the terms of the GNU General Public License as published by  */
/*  the Free Software Foundation; either version 2 of the License, or     */
/*  (at your option) any later version.                                   */
/*                                                                        */
/**************************************************************************/

package bossa.syntax;

import bossa.util.*;

/**
   Declaration of an abstract interface (i.e. a ML-Sub interface).

 */
public class AbstractInterface extends MethodContainer
{
  /** ML-Sub interface. */
  private mlsub.typing.Interface itf = cast(null);
  private ?List<MonotypeConstructor> extensions; // the super-interfaces
  private mlsub.typing.Interface[?] superInterfaces = null; // resolved super-interfaces

  getTypeSymbol()= itf;

  resolve()
  {
    super;

    if (extensions != null && notNull(extensions).size() != 0)
      superInterfaces = notNull(extensions).mapToArray(MonotypeConstructor parent =>
		notNull(parent.tc).resolveToItf(notNull(typeScope)));

    extensions = null;

    this.createContext();
  }

  private void createContext()
  {
    if (superInterfaces != null)
      try{
	mlsub.typing.Typing.assertLeq(itf, notNull(superInterfaces));
      }
      catch(mlsub.typing.KindingEx e){
	User.error(name, name + " cannot extends one of the interfaces " +
		   " because they don't have the same number or kind of " +
		   " type parameters");
      }
  }

  printInterface(w)
  {
    super;
    w.print("abstract interface "
            + this.getSimpleName()
            + this.printTypeParameters()
            + Util.map(" extends ",", ","", superInterfaces)
            + "{}\n");
  }

  compile() {}

  toString() = name.toString();
}

public AbstractInterface createAbstractInterface(LocatedString name, 
			   ClassConstraint typeParameters, 
			   List<?boolean> typeParametersVariances,
			   List<MonotypeConstructor> extensions
			  )
{
  let res = new AbstractInterface(name, Node.global, classConstraint: typeParameters,
	 variance: makeVariance(typeParametersVariances), extensions: extensions);

  res.itf = new mlsub.typing.Interface(res.variance, name.toString());
  res.addTypeSymbol(res.itf);
  return res;
}

/**
   Declaration that an existing class implements an abstract interface.

   The abstract interface must belong to the current package.

 */
public class AbstractInterfaceImplementation extends Definition
{
  final LocatedString className;
  final LocatedString interfaceName;
  final boolean _finally;
  final boolean _interface;

  ?mlsub.typing.TypeConstructor classTC = null;
  ?mlsub.typing.Interface interfaceITF = null;

  resolve()
  {
    classTC = new TypeIdent(name: className).resolveToTC(notNull(typeScope));

    if (isInterfaceTC(notNull(classTC)))
      {
        if (!_interface) User.error(this, ""+classTC+" is not a class");
      }
    else
      {
        if (_interface) User.error(this, ""+classTC+" is not an interface");
      }

    let ident = new TypeIdent
      (name: new LocatedString(module.pkg.getName() + '.' + interfaceName.content, 
			 interfaceName.location()));
    interfaceITF = ident.resolveToItf(notNull(typeScope));

    let def = getTypeDefinition(classTC);

    boolean isNiceClass = def != null &&
      (def.getImplementation() instanceof NiceClass);

    if (!isNiceClass && notNull(interfaceITF).associatedTC() != null)
      User.error(this, className + " is not a class defined in Nice.\n" +
                 "It can only implement abstract interfaces.");

    if (def != null)
      def.addInterfaceImplementation(notNull(interfaceITF));

    this.createContext();
  }

  private void createContext()
  {
    try {
      mlsub.typing.Typing.assertImp(classTC, interfaceITF, true);
      if (_finally)
	mlsub.typing.Typing.assertAbs(classTC, interfaceITF);
    }
    catch(mlsub.typing.TypingEx ex) {
      User.error(this, "Class " + classTC + " cannot implement " + 
		 interfaceITF + ": they do not have the same number or kind of type parameters");

    }
  }

  printInterface(w)
  {
    if (_interface)
      w.print("interface ");
    else
      w.print("class ");

    w.print(classTC);
    w.print(" implements ");
    w.print(interfaceName);
    w.println(";");
  }

  compile() {}
}
