/**************************************************************************/
/*                                N I C E                                 */
/*             A high-level object-oriented research language             */
/*                        (c) Daniel Bonniot 2004                         */
/*                                                                        */
/*  This program is free software; you can redistribute it and/or modify  */
/*  it under the terms of the GNU General Public License as published by  */
/*  the Free Software Foundation; either version 2 of the License, or     */
/*  (at your option) any later version.                                   */
/*                                                                        */
/**************************************************************************/

package bossa.syntax;

import bossa.util.*;

/**
   A field access.
   
   In terms of scoping, this is the symbol
   that is returned when the access to a field is done,
   either a 'get' or a 'set'.

 */
abstract class FieldAccess extends MethodDeclaration
{
  ?gnu.expr.Declaration fieldDecl = null;

  public boolean isFinal();
  public boolean isStatic() = false;

  computeCode()
  {
    throw new UsingFieldAsValue();
  }

  public gnu.expr.Expression compileAccess(gnu.expr.Expression[] arguments)
  {
    if (arguments.length == 0)
      return NiceUtils.doInline(new nice.tools.code.GetFieldProc(fieldDecl));
    else
      return NiceUtils.doInline(new nice.tools.code.GetFieldProc(fieldDecl), arguments[0]);
  }
  
  public gnu.expr.Expression compileAssign(gnu.expr.Expression value)
  {
    return NiceUtils.doInline(
	new nice.tools.code.SetStaticFieldProc(fieldDecl), value);
  }

  public gnu.expr.Expression compileAssign(gnu.expr.Expression parameter, 
					   gnu.expr.Expression value)
  {
    return NiceUtils.doInline(
	new nice.tools.code.SetFieldProc(fieldDecl), parameter, value);
  }
}

class UsingFieldAsValue extends Error {}
