/// PASS
  /// package a
  /// Toplevel
  ?java.awt.color.ColorSpace space(java.awt.Color c) = c.getColorSpace();
  /// package b import a
  java.awt.color.ColorSpace space2(java.awt.Color c) = c.getColorSpace();
  /// Toplevel
  java.awt.color.ColorSpace getColorSpace(java.awt.Color) = native java.awt.color.ColorSpace java.awt.Color.getColorSpace();

/// PASS
  /// package a
  /// Toplevel
  ?java.awt.Color someColor() = black();
  /// package b import a
  java.awt.Color black = black();
  /// Toplevel
  java.awt.Color black() = native java.awt.Color.black;

/// PASS
  /// Toplevel
  
  // Use an inner class in a retyping.
  int getRunLimit(java.text.AttributedCharacterIterator,
                  java.text.AttributedCharacterIterator.Attribute attribute) =
   native int java.text.AttributedCharacterIterator.getRunLimit
     (java.text.AttributedCharacterIterator.Attribute);

/// PASS
  /// package a
  /// Toplevel

abstract class A implements javax.swing.Action {
  putValue(x, y) {}
}
  /// package b import a
  /// Toplevel
<T> void putValue(javax.swing.Action, String, T) = 
  native void javax.swing.Action.putValue(String, Object);

public class Flow4JEditPartFactory implements javax.swing.Action {
  putValue(editPart, model) {}
}


/// PASS
  /// package lib
  /// Toplevel
public class A
{
  public void foo() {}
}

  /// package a
  // We don't import the 'lib' package, so as to see it as a "native" package
  /// Toplevel
class A<T> = native lib.A;
<T> A<T> A() = native new lib.A();
<T> void foo(A<T>) = native void lib.A.foo();

  /// package b import a
  {}

  /// package c import b
  // It's questionable whether the retyped version of foo or the raw one
  // is visible here. In both cases this testcase should be.
  // Failing with "foo is not declared" is not OK.
  new lib.A().foo();
