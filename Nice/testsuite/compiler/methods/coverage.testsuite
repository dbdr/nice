/// FAIL
  /// Toplevel
class B implements nice.lang.Comparable {
 // `<` not implemented  
}

/// FAIL
  /// Toplevel
abstract interface I {
  boolean fooI(alike);
}

class nice.lang.boolean implements I;
fooI(boolean b1, boolean b2) = b1;

class A implements I {
 // `fooI` not implemented  
}

/// FAIL
  /// Toplevel
abstract interface I {
  boolean fooI(String);
}

class A implements I {
  fooI(x) = false;
}

class B implements I {
 // `fooI` not implemented  
}

/// PASS
  /// Toplevel
  <T> T foo(T x, Object o) = x;
  foo(String s, o) = "";

/// PASS
  assert !foo(null);
  assert foo("");
  /// Toplevel
<T> boolean foo(T x) = false;
foo(Object x) = true;

/// PASS
  /// Toplevel
  interface I {}
  class A implements I {}
  interface K extends I {}
  void foo(I x) {}
  foo(A x) {}
  foo(K x) {}
