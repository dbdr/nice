/**************************************************************************/
/*                                N I C E                                 */
/*             A high-level object-oriented research language             */
/*                        (c) Daniel Bonniot 2001                         */
/*                                                                        */
/*  This program is free software; you can redistribute it and/or modify  */
/*  it under the terms of the GNU General Public License as published by  */
/*  the Free Software Foundation; either version 2 of the License, or     */
/*  (at your option) any later version.                                   */
/*                                                                        */
/**************************************************************************/

// File    : prelude.nice
// Created : Thu Dec 02 11:42:48 1999 by bonniot

/**
   This file is part of the nice.lang package, which is imported
   automatically by any Nice package.
   In addition, this prelude file is read before any other file
   in the nice.lang package. Definitions that need to be read
   early, like native types, should therefore be in this file.
   It is best to reserve this file for such uses.
   
   @version $Date$
   @author Daniel Bonniot
 */

package nice.lang;

/****************************************************************
 * Nullness markers
 ****************************************************************/

abstract class Maybe<+T> = native;
final class Sure<+T> extends Maybe<T> = native;
final class Null<+T> extends Maybe<T> = native;

/** 
    Throws java.lang.NullPointerException if the argument is <code>null</code>.

    This call presently does no check, assuming that a dereferencing
    is coming next and will detect nullness.
    This should probably be fixed so that the semantics is well defined.
*/
<Any T> !T notNull(?T value)
{
  assert(value != null);
  return cast(value);
}

/****************************************************************
 * Primitive types
 ****************************************************************/

final class void = native;

class Number implements Comparable = native java.lang.Number;
class double extends Number = native;
class float  extends double = native;

class long   extends float  = native;
class int    extends long   = native;
class short  extends int    = native;
class byte   extends short  = native;

class char   extends int    = native;

double doubleValue(Number) = native double Number.doubleValue();

class Throwable = native java.lang.Throwable;
class Type = native;

/* 
   Allows to consider any nice object as an instance of java.lang.Object
*/
<Any T> Object object(T) = native Object Native.object(Object);

/** Unsafe cast operator. UNSAFE! */
<Any T, Any U> U cast(T) = inline nice.lang.inline.Nop();

/****************************************************************
 * Basic functions
 ****************************************************************/

<Any T> boolean `==`(T,T) = inline nice.lang.inline.ReferenceOp("==");
<Any T> boolean `!=`(T,T) = inline nice.lang.inline.ReferenceOp("!=");

boolean `==`(char, char) = inline nice.lang.inline.CompOp("iEq");
boolean `!=`(char, char) = inline nice.lang.inline.CompOp("iNe");


<Any T> boolean equals(T,T) = native boolean Object.equals(Object);
<T> int hashCode(!T) = native int Object.hashCode();

// can be overriden in nice
<Any T> boolean eq(T,T);
eq(o1, o2) = equals(o1, o2);

<Any T> String toString(!T) = native String Object.toString();
<Any T> String valueOf(T) = native String String.valueOf(Object);
<Any T> Class getClass(!T) = native Class Object.getClass();

java.util.Properties<String,String> getProperties() = 
  native java.util.Properties java.lang.System.getProperties();

/****************************************************************
 * Ref
 ****************************************************************/

class Ref<T> { T value; }

/****************************************************************
 * Main
 ****************************************************************/

void main(Array<String>);
