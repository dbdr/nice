/// COMMENT Symbols that are less specific than others are ignored.

/// Global

class A {}
class B extends A {}


/// PASS
  f(new B());

  ///Toplevel
void f(A) { assert (false); }
void f(B, ?String s = null) {}


/// PASS
  f(a: new B(), "");

  ///Toplevel
void f(A a, String s) { assert(false); }
void f(B a, String s) { }

/// PASS
  f(a: new B(), "");

  ///Toplevel
void f(A a, String s) { assert(false); }
void f(int s, int a) {}
void f(B a, String s) { }

/// PASS
  h(a: new B());

  ///Toplevel
void h(?String s = null, A a) {}
void h(B a, ?String s = null) {}

/// FAIL
   /* ///FAIL HERE */ f(a: new B(), "");

  ///Toplevel
void f(A a, String s) { }
void f(B a, String s) { }
void f(B a, String s, int i = 0) { }

/// PASS
  /// Toplevel
  abstract class A {}
  class B extends A {}
  void foo(A);
  void foo(B);
  foo(B x) {}

/// PASS
  /// Toplevel
  abstract class A {}
  class B extends A {}
  void foo(A, String);
  void foo(B ,Number);
  foo(B(A) x ,s) {}
  foo(B(B) x ,s) {}

/// PASS
  /// Toplevel
  abstract class A {}
  class B extends A {}
  void foo(A, A);
  void foo(A, B);
  void foo(B, A);
  void foo(B, B);
  foo(B x, B y) {}

/// FAIL
  /// Toplevel
  interface I1 {}
  interface I2 {}
  class B implements I1,I2 {}
  void foo(I1, String);
  void foo(I2, String);
  void foo(I2, int);
  foo(B(I1) x, y) {}
  /* ///FAIL HERE */ foo(B(I2) x, y) {}

/// PASS
  /// Toplevel
  abstract class A {}
  class B extends A {}
  void foo(A, String);
  void foo(B ,Number);
  void foo(B ,Integer);
  foo(B x, String s) {}
  foo(B x, Number s) {}
  foo(B x, Integer s) {}
  
/// PASS
  /// Toplevel
  abstract class A {}
  class B extends A {}
  void foo(A, B);
  void foo(B ,A);
  foo(B(A) a ,x) {}
  foo(B(B) a ,x) {}

/// PASS
  B->boolean bar = foo;
  assert bar(new B());
  /// Toplevel
  class A {}
  class B extends A {}
  boolean foo(A x) = false;
  boolean foo(B x) = true;

/// FAIL
  C->void bar = /* /// FAIL HERE */foo;
  /// Toplevel
  interface A {}
  interface B {}
  class C implements A,B {}
  void foo(A x) {}
  void foo(B x) {}

/// PASS
  assert foo(null) == null;
  let String s = foo("abc");
  ///Toplevel
  ?String foo(?String);
  override String foo(String);
  foo(null) = null;
  foo(String s) = s;

/// PASS
  /// Toplevel
abstract interface I {
  void foo();
}

abstract class A {
  void foo() {}
}

class B extends A implements I {}

foo(B(I) b) {}
