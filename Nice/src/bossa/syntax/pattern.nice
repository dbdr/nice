/**************************************************************************/
/*                                N I C E                                 */
/*             A high-level object-oriented research language             */
/*                        (c) Daniel Bonniot 2004                         */
/*                                                                        */
/*  This program is free software; you can redistribute it and/or modify  */
/*  it under the terms of the GNU General Public License as published by  */
/*  the Free Software Foundation; either version 2 of the License, or     */
/*  (at your option) any later version.                                   */
/*                                                                        */
/**************************************************************************/

package bossa.syntax;

import bossa.util.*;

/**
   Represents the information about one argument of a method body.
   
   @see MethodBodyDefinition
*/
public abstract class Pattern implements Located
{
  ?LocatedString name = null;
  ?TypeIdent typeConstructor= null;
  private ?TypeIdent additional = null;
  ?mlsub.typing.TypeConstructor tc = null;
  ?mlsub.typing.TypeConstructor tc2 = null;
  ?mlsub.typing.Interface itf2 = null;

  // The class constraint verified by this pattern.
  private ?mlsub.typing.Constraint constraint = null;
  // The type of the class matched, if it is constrained.
  private ?mlsub.typing.Monotype patternType = null;

  private Location loc;

  public ?mlsub.typing.TypeConstructor getTC() = tc;

  ?mlsub.typing.TypeConstructor getRuntimeTC() = null;

  void resolveTC(TypeScope scope)
  {
    if (typeConstructor != null)
      {
        let sym = notNull(typeConstructor).resolveToTypeSymbol(scope);

        if (sym instanceof mlsub.typing.TypeConstructor)
          tc = sym;
        else
          throw User.error(this, notNull(typeConstructor) + 
                           " is not a declared class or interface");

        if (this.exactlyAtType() && !instantiableTC(notNull(tc)))
          User.error
	    (notNull(typeConstructor).location(), 
	     "Pattern #" + notNull(typeConstructor) +
	     " cannot be matched because interfaces and abstract classes do not have direct instances.");

	typeConstructor = null;
      }
    if (additional != null)
      {
        let sym = notNull(additional).resolveToTypeSymbol(scope);

        if (sym instanceof mlsub.typing.TypeConstructor)
          tc2 = sym;
        else if (sym instanceof mlsub.typing.Interface)
          itf2 = sym;
        else
          User.error(additional,
                     notNull(additional) + " should be a class or an interface");

	additional = null;
      }

    // Class constraints
    let def = getTypeDefinition(tc);
    if (def == null)
      return;

    let classType = def.getConstrainedType();
    if (classType != null)
      {
        constraint = classType.getConstraint();
        patternType = classType.getMonotype();
      }
  }

  /**
     Asserts that m is below this pattern.
   */
  private void leq(mlsub.typing.Monotype m)
  {
    nice.tools.typing.Types.setMarkedKind(m);
    m = m.equivalent();
    if (!(m instanceof mlsub.typing.MonotypeConstructor))
      throw Internal.error("Nullness check");
    
    mlsub.typing.MonotypeConstructor mc = m;

    if (this.atNull())
      mlsub.typing.Typing.leq(nice.tools.typing.PrimitiveType.maybeTC, mc.getTC());

    if (tc == null)
      return;

    // the argument is not null
    mlsub.typing.Typing.leq(mc.getTC(), nice.tools.typing.PrimitiveType.sureTC);
    mlsub.typing.Monotype type = nice.tools.typing.Types.rawType(mc);

    if (constraint != null)
      {
	notNull(constraint).enter();
	mlsub.typing.Typing.leq(type, patternType);
	if (this.exactlyAtType())
	  {
	    mlsub.typing.Typing.leq(patternType, type);
	    mlsub.typing.MonotypeConstructor inner = cast(type.equivalent());
	    inner.getTC().setMinimal();
	  }
      }
    else
      {
	mlsub.typing.Typing.leq(type, tc);
	if (this.exactlyAtType())
	  {
	    mlsub.typing.Typing.leq(tc, type);
	    mlsub.typing.MonotypeConstructor inner = cast(type.equivalent());
	    inner.getTC().setMinimal();
	  }
      }
  }

  void inDomain(mlsub.typing.Monotype type)
  {
    nice.tools.typing.Types.setMarkedKind(type);

    if (this.atNull())
      mlsub.typing.Typing.leq(nice.tools.typing.PrimitiveType.maybeTC, type.head());

    mlsub.typing.Monotype rawType = nice.tools.typing.Types.rawType(type);

    if (constraint != null)
      {
	notNull(constraint).enter();
	mlsub.typing.Typing.leq(patternType, rawType);
      }
    else
      {
	mlsub.typing.Typing.leq(tc, rawType);
      }

    if (tc2 != null)
      mlsub.typing.Typing.leq(tc2, rawType);
    else if (itf2 != null)
      mlsub.typing.Typing.assertImp(rawType.head(), itf2, false);
  }

  public boolean matches(?mlsub.typing.TypeConstructor tag);

  public boolean matchesValue(ConstantExp val);

  public Pattern setDomainEq(boolean equal) 
  {
    return this;
  }     

  public void setDomainTC(?mlsub.typing.TypeConstructor domaintc)  {}

  public void addValues(List<ConstantExp> values) {}

  public ?LocatedString getName() = name;

  location() = loc;

  /**
   * Returns a string used to recognize this pattern in the bytecode.
   * for the different patterns the following signatures are used:
   *   any 		: `@_`
   *   null 		: `@NULL`
   *   type 		: `@` + type   where `.` in type are replaced by `$`
   *   exactly at type  : `#` + type   idem
   *   integer literal	: `@-` / `@+` + int_literal 
   *   char literal	: `@'c'`   where c is an unescaped char
   *   string literal	: `@"string"` where string is an escaped string
   *   reference        : `@` + globalconstantname
   *   int comparison   : `@>` / `@>=` / `@<` / `@<=` + int_literal
   *
   * This is usefull to distinguish alternatives of a method.
   */
  public String bytecodeRepresentation();
 
  /**
     Returns code that tests if the parameter is matched.

     @param dispatchMade indicates that dispatch has already occured. It is
       still necessary to check for exact matching if applicable.
  */
  public gnu.expr.Expression matchTest(gnu.expr.Expression parameter, boolean dispatchMade);

  public boolean atAny() = false;
  public boolean atNull() = false;
  boolean exactlyAtType() = false; 
  public boolean atValue() = false;
  public boolean atTypeMatchingValue() = false;
}

void resolvePatterns(TypeScope tscope, VarScope vscope, Pattern[] patterns)
{
  for (int i = 0; i < patterns.length; i++)
    patterns[i].resolveTC(tscope);
}
 
void resolvePatternValues(Pattern[] patterns)
{
  for (int i = 0; i < patterns.length; i++)
    patterns[i] = resolveGlobalConstants(patterns[i]);
}
 
/**
   Assert that the monotypes belong the the patterns.
 */
void inPattern(mlsub.typing.Monotype[] monotypes, Pattern[] patterns)
{
  for (int i = 0; i < monotypes.length; i++)
    patterns[i].leq(monotypes[i]);
}
  

public String bytecodeRepresentation(Pattern[] patterns)
{
  StringBuffer res = new StringBuffer();
  for (int i = 0; i < patterns.length; i++)
    res.append(patterns[i].bytecodeRepresentation());

  return res.toString();
}

public class UnknownPattern extends RuntimeException {} 

public Pattern createPattern(LocatedString name)
{
  return new VariablePattern(name: name, loc: name.location());
}

public Pattern createPattern(LocatedString name, TypeIdent ti)
{
  if (ti.toString().equals("Object"))
    return new NotNullPattern(name: name, tc: nice.tools.typing.PrimitiveType.sureTC, loc: notNull(name.location));

  return new TypePattern(name: name, typeConstructor: ti, loc: name.location(), exactlyAt: false);
}

//for use in MethodImplementation
public Pattern createPattern(?LocatedString name, ?mlsub.typing.TypeConstructor tc, boolean sure)
{ // TODO: don't generate NotNullPatterns if the overriden domain is sure.
  let loc = (name != null) ? name.location() : Location.nowhere();

  if (nice.tools.typing.Types.isPrimitive(tc))
    tc = null;

  if (sure && tc == null)
    return new NotNullPattern(name: name, tc: nice.tools.typing.PrimitiveType.sureTC, loc: loc);

  if (tc == null || !sure)
    return new VariablePattern(name: name, loc: loc);

  return new TypePattern(name: name, tc: tc, loc: loc, exactlyAt: false);
}

public Pattern createPattern(TypeIdent ti, ?LocatedString name, boolean exactly, ?TypeIdent additional, ?mlsub.typing.TypeConstructor runtimeTC)
{
  if (ti.toString().equals("Object"))
    return new NotNullPattern(name: name, tc: nice.tools.typing.PrimitiveType.sureTC, loc: ti.location);

  return new TypePattern(name: name, typeConstructor: ti, additional: additional, loc: ti.location(), exactlyAt: exactly, runtimeTC: runtimeTC);
}

public Pattern createPattern(ConstantExp value)
{
  return createPattern(value, null);
}

public Pattern createPattern(ConstantExp value, ?TypeIdent additional)
{
  if (value instanceof NullExp)
    return new NullPattern(tc: value.tc, additional: additional, loc: value.location());

  if (value instanceof StringConstantExp)
    return new StringPattern(typeConstructor: new TypeIdent(name: new LocatedString("java.lang.String", value.location())),
				additional: additional, loc: value.location(), atValue: value);

  if (value instanceof BooleanConstantExp)
    return new BoolPattern(tc: value.tc, additional: additional, loc: value.location(), atValue: value);

  if (value instanceof CharConstantExp)
    return new CharPattern(tc: value.tc, additional: additional, loc: value.location(), atValue: value);

  assert value instanceof IntegerConstantExp;
  return new IntPattern(tc: value.tc, additional: additional, loc: value.location(), atValue: value);
}

public Pattern createPattern(String kind, ?LocatedString name, ?ConstantExp value, ?LocatedString refName, bossa.util.Location loc)
{
  CompareKind k;
  if ("<".equals(kind))
    k = CK_LT;
  else if ("<=".equals(kind))
    k = CK_LE;
  else if (">".equals(kind))
    k = CK_GT;
  else
    k = CK_GE;

  let tc = (value != null) ?  value.tc : null;
  return new IntComparePattern(name: name, tc: tc, loc: loc, atValue: cast(value), kind: k, refName: refName);
}

Pattern createPattern(mlsub.typing.TypeConstructor tc)
{
  return new TypePattern(tc: tc, loc: Location.nowhere(), exactlyAt: false);
}

public class VariablePattern extends Pattern
{
  atAny() = true;

  getName() = notNull(name).toString().equals("_") ? null : name;
}

public class NullPattern extends Pattern
{
  atNull() = true;
}

public class NotNullPattern extends Pattern {}

public class TypePattern extends Pattern
{
  boolean exactlyAt;
  ?mlsub.typing.TypeConstructor runtimeTC = null;

  getRuntimeTC() = runtimeTC;

  setDomainEq(equal)
  {
    // only set it to atAny if it's a @type pattern
    if (equal && !exactlyAt)
      return new VariablePattern(name: name, loc: this.location);

    // don't allow integer primitive types in @type and #type patterns
    if (!equal && mlsub.typing.Typing.testRigidLeq(tc, nice.tools.typing.PrimitiveType.longTC))
      User.error(this.location, "A pattern cannot have a primitive type that is different from the declaration.");

    return this;
  }

  exactlyAtType() = exactlyAt;
}

public abstract class ValuePattern extends Pattern
{
  final ConstantExp atValue;

  addValues(values)
  {
    values.add(atValue);
  }

  atValue() = true;
}

public class BoolPattern extends ValuePattern
{
  addValues(values)
  {
    values.add(createBooleanConstant(true, this.location));
    values.add(createBooleanConstant(false, this.location));
  }

  atTypeMatchingValue() = true;
}

public class StringPattern extends ValuePattern
{
  override StringConstantExp atValue;
}

public class CharPattern extends ValuePattern
{
  override CharConstantExp atValue;

  setDomainTC(domaintc)
  {
    if (domaintc != null)
      if (mlsub.typing.Typing.testRigidLeq(domaintc, nice.tools.typing.PrimitiveType.charTC))
        return;
    
    User.error(this.location, "Character value patterns are not allowed for methods where the declared parameter isn't a primitive type.");
  }
}

public class IntPattern extends ValuePattern
{
  override IntegerConstantExp atValue;

  setDomainTC(domaintc)
  {
    if (domaintc != null)
      {
	if (mlsub.typing.Typing.testRigidLeq(domaintc, nice.tools.typing.PrimitiveType.intTC))
	  {
	    tc = nice.tools.typing.PrimitiveType.intTC;
	    return;
          }
        else if (mlsub.typing.Typing.testRigidLeq(domaintc, nice.tools.typing.PrimitiveType.longTC))
	  {
	    tc = nice.tools.typing.PrimitiveType.longTC;
	    return;
          }
      }
    User.error(this.location, "Integer value patterns are not allowed for methods where the declared parameter isn't a primitive type.");
  }
}

enum CompareKind(String prefix, String abbrev) 
	{ CK_LT("<", "Lt"), CK_LE("<=", "Le"), CK_GT(">", "Gt"), CK_GE(">=", "Ge") }

boolean matches(CompareKind k, long x, long y);
matches(CK_LT, x, y) = x < y;
matches(CK_LE, x, y) = x <= y;
matches(CK_GT, x, y) = x > y;
matches(CK_GE, x, y) = x >= y;

public class IntComparePattern extends IntPattern
{
  CompareKind kind;
  ?LocatedString refName;
  
  addValues(values)
  {
    let val = atValue.longValue();
    long lo = val;
    long hi = val;
    if (kind == CK_LT || kind == CK_GE)
      lo = val-1;
    else
      hi = val+1;

    while(values.any(ConstantExp ce => (ce instanceof IntegerConstantExp) && (ce.longValue() == lo)))
      lo--;

    values.add(createLongConstantExp(lo));

    while(values.any(ConstantExp ce => (ce instanceof IntegerConstantExp) && (ce.longValue() == hi)))
      hi++;

    values.add(createLongConstantExp(hi));
  }

  boolean atLess() = (kind == CK_LT || kind == CK_LE);

  atTypeMatchingValue() = true;
}

public class ReferencePattern extends ValuePattern
{
  getName() = null;
}

public class EnumPattern extends ReferencePattern
{
  addValues(values)
  {
    let EnumSymbol esym = cast(atValue.value);
    for (sym : esym.getDefinition().symbols)
      values.add(createSymbolConstantExp(notNull(tc), sym, sym.getName().toString(), this.location));
  }

  atTypeMatchingValue() = true;
}

matches(VariablePattern p, tag) = true;
matches(NullPattern p, tag) = tag == nice.tools.typing.PrimitiveType.nullTC;
matches(NotNullPattern p, tag) = tag != nice.tools.typing.PrimitiveType.nullTC;
matches(TypePattern p, tag)
{
  if (tag == null)
    return false;

  if (p.exactlyAt)
    return mlsub.typing.Typing.testRigidLeq(tag, p.tc) && mlsub.typing.Typing.testRigidLeq(p.tc, tag);

  return mlsub.typing.Typing.testRigidLeq(tag, p.tc);
}
matches(ValuePattern p, tag) = false;
matches(BoolPattern p, tag) = tag == nice.tools.typing.PrimitiveType.boolTC;
matches(IntComparePattern p, tag) = tag != null && mlsub.typing.Typing.testRigidLeq(tag, nice.tools.typing.PrimitiveType.longTC);
matches(EnumPattern p, tag) = (tag != null) && mlsub.typing.Typing.testRigidLeq(tag, p.tc);

matchesValue(Pattern p, ConstantExp val) = false;
matchesValue(VariablePattern p, ConstantExp val) = true;
matchesValue(ValuePattern p, ConstantExp val) = p.atValue.equals(val);
matchesValue(IntPattern p, IntegerConstantExp val)
{
  return p.atValue.longValue() == val.longValue();
}
matchesValue(IntComparePattern p, IntegerConstantExp val)
{
  return matches(p.kind, val.longValue(), p.atValue.longValue());
}

/**
   Order on pattern that is compatible with the specificity of patterns.

   If that matches all values that this matches, the result is true.
   Additionally, if this matches values that are more specific than
   the values that matches, the result is also true. 
*/
boolean leq(Pattern this, Pattern that);

leq(VariablePattern this, VariablePattern that) = true;
leq(Pattern this, VariablePattern that) = true;
leq(VariablePattern this, Pattern that) = false;
leq(NullPattern this, NullPattern that) = true;
leq(NullPattern this, VariablePattern that) = true;
leq(NullPattern this, Pattern that) = false;
leq(Pattern this, NullPattern that) = false;
leq(VariablePattern this, NullPattern that) = false;
leq(NullPattern this, NotNullPattern that) = false;
leq(NotNullPattern this, NullPattern that) = false;
leq(Pattern this, NotNullPattern that) = true;
leq(NotNullPattern this, NotNullPattern that) = true;
leq(NotNullPattern this, VariablePattern that) = true;
leq(VariablePattern this, NotNullPattern that) = false;
leq(NotNullPattern this, Pattern that) = false;
leq(ValuePattern this, ValuePattern that) = this.atValue.equals(that.atValue);
leq(TypePattern this, ValuePattern that) = false;
leq(IntComparePattern this, IntComparePattern that)
{
  if (this.atLess() != that.atLess())
    return false;

  long val = this.atValue.longValue();
  if (this.kind == CK_LT) val--;
  if (this.kind == CK_GT) val++;

  return matches(that.kind, val, that.atValue.longValue());
}
leq(IntPattern this, IntComparePattern that) = matches(that.kind, this.atValue.longValue(), that.atValue.longValue());
leq(IntComparePattern this, IntPattern that) = false;
leq(TypePattern this, TypePattern that)
{
    if (this.tc == that.tc)
      return this.exactlyAt || ! that.exactlyAt;

    return mlsub.typing.Typing.testRigidLeq(this.tc, that.tc); 
}
leq(Pattern this, Pattern that)
{
  if (this.tc == that.tc)
    return true;

  return mlsub.typing.Typing.testRigidLeq(this.tc, that.tc); 
}

/**
 returns true when the patterns can't match the same values.
 May return false if it can't be determined easily.
*/

boolean disjoint(Pattern this, Pattern that);

disjoint(VariablePattern this, VariablePattern that) = false;
disjoint(Pattern this, VariablePattern that) = false;
disjoint(VariablePattern this, Pattern that) = false;
disjoint(NullPattern this, NullPattern that) = false;
disjoint(Pattern this, NullPattern that) = true;
disjoint(NullPattern this, Pattern that) = false;
disjoint(NullPattern this, VariablePattern that) = false;
disjoint(VariablePattern this, NullPattern that) = false;
disjoint(NotNullPattern this, NotNullPattern that) = false;
disjoint(NotNullPattern this, NullPattern that) = true;
disjoint(NullPattern this, NotNullPattern that) = true;
disjoint(ValuePattern this, ValuePattern that) = ! this.atValue.equals(that.atValue);
disjoint(IntComparePattern this, IntComparePattern that) 
{
	if (this.atLess() == that.atLess())
	  return false;

        long val = this.atValue.longValue();
        if (this.kind == CK_LT) val--;
        if (this.kind == CK_GT) val++;

	return ! matches(that.kind, val, that.atValue.longValue());
}
disjoint(IntComparePattern this, IntPattern that) = matches(this.kind, that.atValue.longValue(), this.atValue.longValue());
disjoint(IntPattern this, IntComparePattern that) = matches(that.kind, this.atValue.longValue(), that.atValue.longValue());
disjoint(TypePattern this, TypePattern that)
{
  if (this.exactlyAt && that.exactlyAt)
    return this.tc != that.tc;

  if (isClassTC(notNull(this.tc)) && isClassTC(notNull(that.tc)))
    return (! mlsub.typing.Typing.testRigidLeq(this.tc, that.tc)) &&
	   (! mlsub.typing.Typing.testRigidLeq(that.tc, this.tc));

  //TODO: check disjoints for all tc's with a <T | T <: TC_PA, T <: TC_PB> constraint

  return false;
}
disjoint(Pattern this, Pattern that)
{
  if (isClassTC(notNull(this.tc)) && isClassTC(notNull(that.tc)))
    return (! mlsub.typing.Typing.testRigidLeq(this.tc, that.tc)) &&
	   (! mlsub.typing.Typing.testRigidLeq(that.tc, this.tc));

  //TODO: check disjoints for all tc's with a <T | T <: TC_PA, T <: TC_PB> constraint

  return false;
}

matchTest(VariablePattern p, parameter, dispatchMade) = gnu.expr.QuoteExp.trueExp;
matchTest(NullPattern p, parameter, dispatchMade) = nice.tools.code.Gen.isNullExp(parameter);
matchTest(NotNullPattern p, parameter, dispatchMade)
{
  return nice.tools.code.Gen.boolNotExp(nice.tools.code.Gen.isNullExp(parameter));
}
matchTest(TypePattern p, parameter, dispatchMade)
{
  if (dispatchMade && ! p.exactlyAt)
    return gnu.expr.QuoteExp.trueExp; 

  let ct = nice.tools.code.Types.javaType(p.tc);

  if (p.exactlyAt)
    return nice.tools.code.Gen.isOfClass(parameter, ct, true);
    
  return nice.tools.code.Gen.instanceOfExp(parameter, ct);
}
matchTest(BoolPattern p, parameter, dispatchMade)
{
  if (p.atValue.isFalse())
    return nice.tools.code.Gen.boolNotExp(parameter);

  return cast(parameter);
}
matchTest(StringPattern p, parameter, dispatchMade)
{
  let String val = cast(p.atValue.value);
  return nice.tools.code.Gen.stringEquals(val, parameter);
}
matchTest(CharPattern p, parameter, dispatchMade)
{
  return nice.tools.code.Gen.integerComparison("Eq", parameter, p.atValue.longValue());
}
matchTest(IntPattern p, parameter, dispatchMade)
{
  return nice.tools.code.Gen.integerComparison("Eq", parameter, p.atValue.longValue());
}
matchTest(IntComparePattern p, parameter, dispatchMade)
{
  return nice.tools.code.Gen.integerComparison(p.kind.abbrev, parameter, p.atValue.longValue());
}
matchTest(ReferencePattern p, parameter, dispatchMade)
{
  return nice.tools.code.Gen.referenceEqualsExp(p.atValue.compile(), parameter);
}

toString(VariablePattern p) = (p.name != null) ? notNull(p.name).toString() : "_";
toString(NullPattern p) = "null";
toString(NotNullPattern p) = "!null";
toString(TypePattern p)
{
  let res = new StringBuffer();
  res.append(p.exactlyAt ? "#" : (p.name != null ? "" : "@"));
  
  if (p.typeConstructor != null)
    res.append(p.typeConstructor);
  else if (p.tc != null)
    res.append(p.tc);

  if (p.name != null)
    res.append(" " +p.name);
  
  return res.toString();
}
toString(ValuePattern p) = p.atValue.toString();
toString(IntComparePattern p) = (p.name!=null? notNull(p.name).toString() : "") + p.kind.prefix + p.atValue;


private ?VarSymbol findRefSymbol(LocatedString refName)
{
  for (sym : Node.getGlobalScope().lookup(refName))
    if (sym instanceof GlobalVarSymbol ||
	sym instanceof EnumSymbol )
      return sym;

  return null;
}

Pattern resolveGlobalConstants(Pattern pattern)
{
  return pattern;
}

resolveGlobalConstants(IntComparePattern pattern)
{
  if (pattern.refName != null)
    {
      let symbol = findRefSymbol(notNull(pattern.refName));
      if (symbol instanceof GlobalVarSymbol)
	{
	  if (symbol.getValue() instanceof ConstantExp && !symbol.isAssignable())
	    {
	      ConstantExp val = cast(symbol.getValue());
	      if (mlsub.typing.Typing.testRigidLeq(val.tc, nice.tools.typing.PrimitiveType.longTC))
                return createPattern(pattern.kind.prefix, pattern.name, val, null, pattern.location);
	    }
	}
      User.error(pattern.refName, notNull(pattern.refName).toString() + " is not a global constant with an integer value."); 
    }
  return pattern;
}

resolveGlobalConstants(VariablePattern pattern)
{
  if (pattern.name == null)
    return pattern;

  let symbol = findRefSymbol(notNull(pattern.name));
  if (symbol == null)
    return pattern;

  if (symbol instanceof EnumSymbol)
    {
      NewExp val = cast(symbol.getValue());
      return new EnumPattern(name: pattern.name, tc: val.tc, loc: pattern.location(), atValue:
		createSymbolConstantExp(pattern.tc, symbol, notNull(pattern.name).toString(), pattern.location()));
    }

  if (! (symbol instanceof GlobalVarSymbol))
    return pattern;

  if (symbol.getValue() instanceof ConstantExp)
    {
      if (symbol.isAssignable())
        User.error(pattern.name, "" + pattern.name + " is not constant");

      ConstantExp val = cast(symbol.getValue());

      if (val.tc == nice.tools.typing.PrimitiveType.floatTC)
	return pattern;

      return createPattern(val);
    }
  else if (symbol.getValue() instanceof NewExp)
    {
      NewExp val = cast(symbol.getValue());
      return new ReferencePattern(name: pattern.name, tc: val.tc, loc: pattern.location(), atValue:
		createSymbolConstantExp(pattern.tc, symbol,
				notNull(pattern.name).toString(), pattern.location()));
    }
  else
    User.error(pattern.name, "The value of " + pattern.name + " can't be used as pattern");

  return pattern;
}

bytecodeRepresentation(VariablePattern p) = "@_";
bytecodeRepresentation(NullPattern p) = "@NULL";
bytecodeRepresentation(NotNullPattern p) = "@NONNULL";
bytecodeRepresentation(TypePattern p)
{
 return (p.exactlyAt ? "#" : "@") + notNull(p.tc).toString().replace('$','.');
}
bytecodeRepresentation(BoolPattern p) = p.atValue.isTrue() ? "@true" : "@false";
bytecodeRepresentation(StringPattern p) = "@" + p.atValue.representation;
bytecodeRepresentation(CharPattern p) = "@\'" + p.atValue.value + "\'";
bytecodeRepresentation(IntPattern p) = "@" + (p.atValue.longValue() >= 0 ? "+" : "") + p.atValue;
bytecodeRepresentation(IntComparePattern p) = "@" + p.kind.prefix + p.atValue;
bytecodeRepresentation(ReferencePattern p) = "@=" + p.name;

public ?Pattern readPattern(String rep, int[]/*ref*/ pos)
{
  int cpos = pos[0];

  if (cpos >= rep.length())
    return null;

  if (rep[cpos] != '@' && rep[cpos] != '#')
    Internal.error("Invalid pattern representation at character " + cpos +  ": " + rep);

  boolean exact = rep[cpos] == '#';

  int start = ++cpos;
  int len = rep.length();

  if (rep[cpos] == '\'')
    { //char literal patterns are 3 chars
      cpos += 3;
    }
  else if (rep[cpos] == '\"')
    { //we need to skip possible '@' or '#' content of the string literal
      cpos += 2;
      while(cpos < len &&
		! ( ( rep[cpos] == '@' || rep[cpos] != '#')
		&& rep[cpos-1] == '\"' 
		&& rep[cpos-2] != '\\') )
	cpos++;

    }
  else
    {
      while(cpos < len && rep[cpos] != '@' && rep[cpos] != '#')
	cpos++;
    }

  String name = rep.substring(start, cpos);
  pos[0] = cpos;
  let loc = Location.nowhere();

  if (name.length() > 1)
    {
      if (name[0] == '\'')
	return createPattern(createCharConstant(name[1], loc));

      if (name[0] == '-')
        return createPattern(createIntegerConstantExp(new LocatedString(name)));

      if (name[0] == '+')
        return createPattern(createIntegerConstantExp(new LocatedString(name.substring(1))));

      if (name[0] == '\"')
        return createPattern(createStringConstantExp(
			name.substring(1,name.length()-1)));

      if (name[0] == '<' || name[0] == '>')
	{
	  let prefix = name.substring(0, (name[1] == '=') ? 2 : 1);
	  return createPattern(prefix, null, createIntegerConstantExp(
		new LocatedString(name.substring(prefix.length()))), null, loc);
        }

      if (name[0] == '=')
        return resolveGlobalConstants(new VariablePattern(name: new LocatedString(name.substring(1)), loc: loc));
    }

  if (name.equals("_"))
    return createPattern(new LocatedString("_"));

  if (name.equals("NONNULL"))
    return new NotNullPattern(tc: nice.tools.typing.PrimitiveType.sureTC, loc: loc);

  if (name.equals("NULL"))
    return createPattern(createNullExp(loc));

  if (name.equals("true") || name.equals("false") ) 
    return createPattern(createBooleanConstant(name.equals("true"), loc));

  let sym = Node.getGlobalTypeScope().lookup(name);

  if (sym == null)
    // This can happen if the class exists only in a later version
    // of the JDK.
    throw new UnknownPattern();

  let mlsub.typing.TypeConstructor tc = cast(sym);
  return new TypePattern(tc: tc, loc: Location.nowhere(), exactlyAt: exact);
}
