/**************************************************************************/
/*                                N I C E                                 */
/*             A high-level object-oriented research language             */
/*                        (c) Daniel Bonniot 2000                         */
/*                                                                        */
/*  This program is free software; you can redistribute it and/or modify  */
/*  it under the terms of the GNU General Public License as published by  */
/*  the Free Software Foundation; either version 2 of the License, or     */
/*  (at your option) any later version.                                   */
/*                                                                        */
/**************************************************************************/

/*
   Type checking.
*/

package bossa.syntax;

import mlsub.typing.*;

// Interface

void typecheck(?Statement);
void typecheck(?Expression);

/****************************************************************
 * Expressions
 ****************************************************************/

typecheck(@null(Expression)) {}

typecheck(e@AssignExp)
{
  Expression to = notNull(notNull(e.to).noOverloading());
  e.to = to;
  typecheck(to);
  if(!to.isAssignable())
    bossa.util.User.error(e, "" + to + " cannot be assigned a value");
  
  try{
    e.value = checkAssignment(to.getType(), notNull(e.value));
  }
  catch(TypingEx t){
    ?MonoSymbol variable = monoSymbol(to);
    if (variable != null)
      if (hasConditionalType(variable) && isNullError(t)) {
      try
        {
	  final unsureType = makeUnsure(variable.type);
	  e.value = checkAssignment(new mlsub.typing.Polytype(unsureType), notNull(e.value));

	  // It is OK to assign the variable with a null value.
	  variable.setVarType(now: unsureType,
			      otherBranch: variable.type,
			      brothers: unsureType);
	  return;
	}
      catch (TypingEx newError) { t = newError; }
    }

    if (notNullError(t, e, notNull(e.value).toString()))
      throw assignmentError(e, to.toString(), 
			    to.getType().toString(), 
			    notNull(e.value));
  }
}

?MonoSymbol monoSymbol(Expression);
monoSymbol(e) = null;
monoSymbol(e@SymbolExp)
{
  if (e.getSymbol() instanceof bossa.syntax.MonoSymbol)
    return cast(e.getSymbol());
  else
    return null;
}

boolean hasConditionalType(MonoSymbol v)
{
  return conditionalTypes.has(fun(<MonoSymbol, mlsub.typing.Monotype> couple) => {
    (MonoSymbol other, mlsub.typing.Monotype t) = couple;
    return v == other;
  });
}

void typecheckExps(?Expression[] exps)
{
  for (int i = 0; i < exps.length; i++)
    typecheck(exps[i]);
}

void typecheckArgs(Arguments args)
{
  for (int i = 0; i < args.size(); i++)
    typecheck(args.getExp(i));
}

typecheck(e@CallExp)
{
  typecheck(e.function);
  notNull(e.arguments).typecheckArgs();

  // forces computation of the type if not done.
  mlsub.typing.Polytype t = e.getType();

  // Prepare the bytecode type for EnsureTypeProc
  if (t.getConstraint() != mlsub.typing.Constraint.True)
    try{
      Typing.enter();
      try{
	mlsub.typing.Constraint.assert(t.getConstraint());
	nice.tools.code.Types.setBytecodeType(t.getMonotype());
      }
      finally{
	Typing.leave();
      }
    }
  catch(TypingEx e){
  }
}

typecheck(e@FunExp)
{
  Function saved = notNull(Node.getCurrentFunction());
  Node.setCurrentFunction(e);
  typecheck(e.body);
  Node.setCurrentFunction(saved);
}

typecheck(e@IdentExp)
{
  throw new Error("typecheck in IdentExp");
}

/**
   Analyse a boolean test to check if it ensures that some
   local variable is always null or alwyas non-null.

    @return 
      the local variable found, or null
    and
      true  if the variable if always null     when the test succeeds
      false if the variable if always non-null when the test succeeds
*/
<?MonoSymbol, boolean> nullnessInfo(Expression test);
nullnessInfo(test) = (null, false);
nullnessInfo(test@CallExp)
{
  boolean isAlwaysNull;
  if (test.isCallTo("=="))
    isAlwaysNull = true;
  else if (test.isCallTo("!="))
    isAlwaysNull = false;
  else /// give up
    return (null, false);

  int varPosition;
  if (isNullExp(notNull(notNull(test.arguments).getExp(0))))
    varPosition = 1;
  else if (isNullExp(notNull(notNull(test.arguments).getExp(1))))
    varPosition = 0;
  else // Give up.
    return (null, false);

  return (localVariable(notNull(notNull(test.arguments).getExp(varPosition))), isAlwaysNull);
}

/** 
    Collects knowledge about more precise type in branches of conditionals.
    
    At the moments only tests agains null are considered.
    Later, instanceof tests will also be taken into account.
*/

var int ifLevel;
var Stack<int> levels = makeVector(10);
var Vector<<MonoSymbol, mlsub.typing.Monotype>> conditionalTypes = 
  makeVector(10);

void enterIf() { ifLevel++; }

void enterElse()
{
  while (levels.size() > 0 && levels.top() == ifLevel * 2)
    {
      levels.pop();
      (MonoSymbol variable, mlsub.typing.Monotype baseType) = conditionalTypes.pop();
      variable.type = baseType;
    }
}

void exitIf()
{ 
  while (levels.size() > 0 && levels.top() == ifLevel * 2 + 1)
    {
      levels.pop();
      (MonoSymbol variable, mlsub.typing.Monotype baseType) = conditionalTypes.pop();
      variable.type = baseType;
    }
  ifLevel--;
}

void pushBranchType(MonoSymbol variable, mlsub.typing.Monotype baseType)
{
  levels.push(2 * ifLevel);
  conditionalTypes.push((variable, baseType));
}

void pushBrotherType(MonoSymbol variable, mlsub.typing.Monotype baseType)
{
  levels.push(2 * ifLevel + 1);
  conditionalTypes.push((variable, baseType));
}

typecheck(e@IfExp)
{
  Expression condition = notNull(e.condition);
  Expression thenExp = notNull(e.thenExp);
  Expression elseExp = notNull(e.elseExp);

  try{
    condition = checkAssignment(notNull(ConstantExp.boolPolytype), condition);
    e.condition = condition;
  }
  catch(TypingEx t){
    if (notNullError(t, e, condition.toString()))
      throw new bossa.util.UserError
      (e, 
       "The condition must be a boolean.\n" + 
       condition + " has type " + condition.getType());
  }

  enterIf();

  try{
    (?MonoSymbol variable, boolean isAlwaysNull) = nullnessInfo(condition);

    if (variable == null)
      {
	typecheck(thenExp);
	enterElse();
	typecheck(elseExp);
	return;
      }

    MonoSymbol variable = notNull(variable);

    if (! isAlwaysNull)
      // variable is non-null in the 'then' part
      {
	mlsub.typing.Monotype type = notNull(variable.type);
	mlsub.typing.Monotype sureType = makeSure(type);

	setVarType(variable, now: sureType, brothers: type);

	typecheck(thenExp);
	// since the type of the variable is destructively changed,
	// it is important to compute the branch's type and to store it now.
	thenExp.computeType();

	enterElse();

	typecheck(elseExp);
      }
    else
      // variable is non-null in the 'else' part
      {
	mlsub.typing.Monotype type = variable.type;
	mlsub.typing.Monotype sureType = makeSure(type);
	typecheck(thenExp);

	enterElse();

	setVarType(variable, now: sureType, brothers: type);

	typecheck(elseExp);
	// since the type of the variable is destructively changed,
	// it is important to compute the branch's type and to store it now.
	elseExp.computeType();
      }
  }
  finally{
    exitIf();
  }
}

/**
   Describe changes to make to the type of a variable in conditional branches.

   @param now type to be used in the next branch.
   @param otherBranch type to be used in the other branches
   @param brothers type to be used in the block containing the conditional
   @param later type to be used when returning to the parent block
*/
private void setVarType(MonoSymbol variable, 
			mlsub.typing.Monotype now, 
			?mlsub.typing.Monotype otherBranch = null,
			mlsub.typing.Monotype brothers)
{
  variable.type = now;
  pushBrotherType(variable, brothers);
  if (otherBranch != null)
    pushBranchType(variable, otherBranch);
}

typecheck(e@IncrementExp)
{
  try{
    e.variable = checkAssignment(notNull(ConstantExp.longPolytype), 
				 notNull(e.variable));
  }
  catch(TypingEx t){
    if (notNullError(t, e, String.valueOf(e.variable)))
      throw new bossa.util.UserError
      (e, 
       notNull(e.description()) + " is only valid on integers.\n" + 
       e.variable + " has type " + notNull(e.variable).getType());
  }
}

typecheck(e@LiteralArrayExp)
{
  typecheckExps(notNull(e.elements));
}

typecheck(e@NewArrayExp)
{
  ?Expression[] knownDimensions = notNull(e.knownDimensions);
  typecheckExps(knownDimensions);
  for (int i=0; i<knownDimensions.length; i++)
    {
      Expression dim = notNull(knownDimensions[i]);
      try{
	Typing.leq(dim.getType(),
		   ConstantExp.intPolytype);
      }
      catch(TypingEx ex){
	if (notNullError(ex, dim, 
			 dim.toString()))
	  bossa.util.User.error(dim, "" + dim + " should be an integer");
      }
    }
}

typecheck(e@NewExp)
{
  notNull(e.arguments).typecheckArgs();
  // force computation of type
  e.getType();
}

typecheck(e@StatementExp)
{
  typecheck(e.statement);
}

typecheck(e@TupleExp)
{
  typecheckExps(notNull(e.expressions));
}

typecheck(e@ClassExp) {}
typecheck(c@ConstantExp){}
typecheck(e@NullExp) {}
typecheck(e@OverloadedSymbolExp) {}
typecheck(e@PackageExp) {}
typecheck(e@SymbolExp) {}

/****************************************************************
 * Statements
 ****************************************************************/

typecheck(@null(Statement)) {}

typecheck(b@Block)
{
  new JavaList(impl: notNull(b.locals)).iter(fun(?Block.LocalDeclaration d)=> typecheck(d));
  notNull(b.statements).iter(fun(?Statement s)=> typecheck(s));
}

typecheck(decl@Block.LocalVariable)
{
  ?Expression value = decl.value;
  if (value == null)
    return;

  MonoSymbol target = notNull(decl.left());

  try{
    decl.value = checkAssignment(notNull(target.getType()), value);
  }
  catch(TypingEx t){
    if (notNullError(t, target, value.toString()))
      throw assignmentError(target, target.name.toString(), 
			    String.valueOf(target.getMonotype), 
			    value);
  }
}

typecheck(decl@Block.LocalConstant)
{
  notNull(decl.left).type = notNull(decl.value).getType();
  typecheck(decl.value);
}

typecheck(decl@Block.LocalFunction)
{
  typecheck(decl.value);
  try{
    Typing.leq(decl.inferredReturnType(), decl.declaredReturnType());
  }
  catch(TypingEx t){
    if (notNullError(t, decl, "returned value"))
      wrongReturnType(decl, 
		      String.valueOf(decl.inferredReturnType), 
		      String.valueOf(decl.declaredReturnType), t);
  }
}

typecheck(s@ExpressionStmt)
{
  typecheck(s.exp);
}

typecheck(l@LoopStmt)
{
  typecheck(l.whileExp);

  enterIf();

  ?Expression whileExp = l.whileExp;
  if (whileExp != null)
    if (l.isTestFirst)
      {
	(?MonoSymbol variable, boolean isAlwaysNull) = nullnessInfo(whileExp);
	if (variable != null)
	  if (isAlwaysNull == false)
	    setVarType(variable, 
		       now: makeSure(variable.type), brothers: variable.type);
      }

  typecheck(l.loopBody);
  typecheck(l.iterationStatements);

  // There is no else part in a loop, but this call is necessary to pop off
  // conditional type information (from assignments) from the stack.
  enterElse();
  exitIf();
}

typecheck(b@BreakStmt) {}
typecheck(b@BreakLabelStmt) {}
typecheck(c@ContinueStmt) {}

typecheck(s@LabeledStmt)
{
  typecheck(s.getStatement());
}

typecheck(r@ReturnStmt)
{
  r.includingFunction = Node.currentFunction;

  if (r.value != null)
    {
      r.value = notNull(r.value).noOverloading();
      typecheck(r.value);
    }
  
  ?mlsub.typing.Monotype declaredRetType = notNull(r.includingFunction).getReturnType();
  if (declaredRetType == null)
    return;
  
  try{
    Typing.leq(r.returnType(), declaredRetType);
  }
  catch(TypingEx e){
    if (notNullError(e, r, String.valueOf(r.value)))
      wrongReturnType(r, notNull(r.returnType()).toString(), 
		      declaredRetType.toString(), e);
  }
}

typecheck(t@TryStmt)
{
  typecheck(t.body);
  new JavaList(impl: notNull(t.catches)).iter(fun(TryStmt.Catch c)=> typecheck(c.body));
  typecheck(t.finallyBody);
}


/****************************************************************
 * Error handling
 ****************************************************************/

/**
   Checks that right can be assigned to a variable of type left.
   Returns a new expression to be used instead of right,
   since overloading resolution is done on the expected type.
*/
Expression checkAssignment(mlsub.typing.Polytype left, Expression right)
{
  Expression val = notNull(right.resolveOverloading(left));
  typecheck(val);
  Typing.leq(val.getType(), left);
  return val;
}

boolean isNullError(TypingEx ex);
isNullError(@TypingEx) = true;
isNullError(ex@MonotypeLeqEx)
{
  /*
    This is an approximation.
    An exact report of nullness errors would probably need
    to keep track of the lowlevel exception.
  */
  ?TypeConstructor tc1 = notNull(ex.getM1()).head();
  ?TypeConstructor tc2 = notNull(ex.getM2()).head();

  if (tc1 == tc2) return false;

  if (tc1 == ConstantExp.maybeTC &&
      (tc2 != ConstantExp.maybeTC || tc2 != null))
    return true;

  return false;
}

/**
   Throws a UserError with an explicit message if 
     the error is that value might be null.
   Returns true the error is not related to null types.
*/
boolean notNullError(TypingEx ex, bossa.util.Located resp, ?String value) {
  if (isNullError(ex))
    throw new bossa.util.UserError(resp, "" + value + " might be null");
  else
    return true;
}

void wrongReturnType(bossa.util.Located responsible, 
		     String typeFound, 
		     String typeExpected, Exception e)
{
  String message = 
    "Incorrect return type:" +
    "\nFound   : " + typeFound +
    "\nExpected: " + typeExpected;

  if (bossa.util.Debug.powerUser)
    message = message + "\n\nLowlevel error: " + e;

  throw new bossa.util.UserError(responsible, message);
}

// Local Variables:
// nice-xprogram: "nicec -d \"$HOME/Nice/classes\" --sourcepath=\"$HOME/Nice/src\" --classpath=\"$HOME/Nice/classes\""
// End:
